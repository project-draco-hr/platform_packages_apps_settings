{
  super(context,0);
  mInflater=(LayoutInflater)context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  List<ApplicationInfo> pkgs=context.getPackageManager().getInstalledApplications(0);
  for (int i=0; i < pkgs.size(); i++) {
    ApplicationInfo ai=pkgs.get(i);
    if (ai.uid == Process.SYSTEM_UID) {
      continue;
    }
    if (mDebuggableOnly) {
      if ((ai.flags & ApplicationInfo.FLAG_DEBUGGABLE) == 0 && "user".equals(Build.TYPE)) {
        continue;
      }
    }
    if (mPermissionName != null) {
      boolean requestsPermission=false;
      try {
        PackageInfo pi=getPackageManager().getPackageInfo(ai.packageName,PackageManager.GET_PERMISSIONS);
        if (pi.requestedPermissions == null) {
          continue;
        }
        for (        String requestedPermission : pi.requestedPermissions) {
          if (requestedPermission.equals(mPermissionName)) {
            requestsPermission=true;
            break;
          }
        }
        if (!requestsPermission) {
          continue;
        }
      }
 catch (      PackageManager.NameNotFoundException e) {
        continue;
      }
    }
    MyApplicationInfo info=new MyApplicationInfo();
    info.info=ai;
    info.label=info.info.loadLabel(getPackageManager()).toString();
    mPackageInfoList.add(info);
  }
  Collections.sort(mPackageInfoList,sDisplayNameComparator);
  MyApplicationInfo info=new MyApplicationInfo();
  info.label=context.getText(R.string.no_application);
  mPackageInfoList.add(0,info);
  addAll(mPackageInfoList);
}
