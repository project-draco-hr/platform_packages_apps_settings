{
  super.onCreate(savedInstanceState);
  mFingerprintManager=(FingerprintManager)getActivity().getSystemService(Context.FINGERPRINT_SERVICE);
  mDPM=(DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);
  mKeyStore=KeyStore.getInstance();
  mChooseLockSettingsHelper=new ChooseLockSettingsHelper(this.getActivity());
  mLockPatternUtils=new LockPatternUtils(getActivity());
  final boolean confirmCredentials=getActivity().getIntent().getBooleanExtra(CONFIRM_CREDENTIALS,true);
  if (getActivity() instanceof ChooseLockGeneric.InternalActivity) {
    mPasswordConfirmed=!confirmCredentials;
  }
  mHasChallenge=getActivity().getIntent().getBooleanExtra(ChooseLockSettingsHelper.EXTRA_KEY_HAS_CHALLENGE,false);
  mChallenge=getActivity().getIntent().getLongExtra(ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE,0);
  mForFingerprint=getActivity().getIntent().getBooleanExtra(ChooseLockSettingsHelper.EXTRA_KEY_FOR_FINGERPRINT,false);
  if (savedInstanceState != null) {
    mPasswordConfirmed=savedInstanceState.getBoolean(PASSWORD_CONFIRMED);
    mWaitingForConfirmation=savedInstanceState.getBoolean(WAITING_FOR_CONFIRMATION);
    mEncryptionRequestQuality=savedInstanceState.getInt(ENCRYPT_REQUESTED_QUALITY);
    mEncryptionRequestDisabled=savedInstanceState.getBoolean(ENCRYPT_REQUESTED_DISABLED);
  }
  mUserId=Utils.getSameOwnerUserId(getContext(),getArguments());
  if (mPasswordConfirmed) {
    updatePreferencesOrFinish();
  }
 else   if (!mWaitingForConfirmation) {
    ChooseLockSettingsHelper helper=new ChooseLockSettingsHelper(this.getActivity(),this);
    if (!helper.launchConfirmationActivity(CONFIRM_EXISTING_REQUEST,getString(R.string.unlock_set_unlock_launch_picker_title),true,mUserId)) {
      mPasswordConfirmed=true;
      updatePreferencesOrFinish();
    }
 else {
      mWaitingForConfirmation=true;
    }
  }
}
