{
  if (!mPasswordConfirmed) {
    throw new IllegalStateException("Tried to update password without confirming it");
  }
  quality=upgradeQuality(quality);
  if (quality >= DevicePolicyManager.PASSWORD_QUALITY_NUMERIC) {
    int minLength=mDPM.getPasswordMinimumLength(null);
    if (minLength < MIN_PASSWORD_LENGTH) {
      minLength=MIN_PASSWORD_LENGTH;
    }
    final int maxLength=mDPM.getPasswordMaximumLength(quality);
    Intent intent=new Intent().setClass(getActivity(),ChooseLockPassword.class);
    intent.putExtra(LockPatternUtils.PASSWORD_TYPE_KEY,quality);
    intent.putExtra(ChooseLockPassword.PASSWORD_MIN_KEY,minLength);
    intent.putExtra(ChooseLockPassword.PASSWORD_MAX_KEY,maxLength);
    intent.putExtra(CONFIRM_CREDENTIALS,false);
    intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);
    startActivity(intent);
  }
 else   if (quality == DevicePolicyManager.PASSWORD_QUALITY_SOMETHING) {
    boolean showTutorial=!mChooseLockSettingsHelper.utils().isPatternEverChosen();
    Intent intent=new Intent();
    intent.setClass(getActivity(),showTutorial ? ChooseLockPatternTutorial.class : ChooseLockPattern.class);
    intent.addFlags(Intent.FLAG_ACTIVITY_FORWARD_RESULT);
    intent.putExtra("key_lock_method","pattern");
    intent.putExtra(CONFIRM_CREDENTIALS,false);
    startActivity(intent);
  }
 else   if (quality == DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED) {
    mChooseLockSettingsHelper.utils().clearLock();
    mChooseLockSettingsHelper.utils().setLockScreenDisabled(disabled);
    getActivity().setResult(Activity.RESULT_OK);
  }
  finish();
}
