{
  if (!mPasswordConfirmed) {
    throw new IllegalStateException("Tried to update password without confirming it");
  }
  quality=upgradeQuality(quality);
  final Context context=getActivity();
  if (quality >= DevicePolicyManager.PASSWORD_QUALITY_NUMERIC) {
    int minLength=mDPM.getPasswordMinimumLength(null);
    if (minLength < MIN_PASSWORD_LENGTH) {
      minLength=MIN_PASSWORD_LENGTH;
    }
    final int maxLength=mDPM.getPasswordMaximumLength(quality);
    Intent intent;
    if (mHasChallenge) {
      intent=getLockPasswordIntent(context,quality,minLength,maxLength,mRequirePassword,mChallenge);
    }
 else {
      intent=getLockPasswordIntent(context,quality,minLength,maxLength,mRequirePassword,mUserPassword);
    }
    startActivityForResult(intent,CHOOSE_LOCK_REQUEST);
  }
 else   if (quality == DevicePolicyManager.PASSWORD_QUALITY_SOMETHING) {
    Intent intent;
    if (mHasChallenge) {
      intent=getLockPatternIntent(context,mRequirePassword,mChallenge);
    }
 else {
      intent=getLockPatternIntent(context,mRequirePassword,mUserPassword);
    }
    startActivityForResult(intent,CHOOSE_LOCK_REQUEST);
  }
 else   if (quality == DevicePolicyManager.PASSWORD_QUALITY_UNSPECIFIED) {
    mChooseLockSettingsHelper.utils().clearLock(UserHandle.myUserId());
    mChooseLockSettingsHelper.utils().setLockScreenDisabled(disabled,UserHandle.myUserId());
    removeAllFingerprintTemplatesAndFinish();
    getActivity().setResult(Activity.RESULT_OK);
  }
 else {
    removeAllFingerprintTemplatesAndFinish();
  }
}
