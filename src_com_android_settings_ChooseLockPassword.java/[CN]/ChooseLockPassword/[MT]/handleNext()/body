{
  if (mDone)   return;
  final String pin=mPasswordEntry.getText().toString();
  if (TextUtils.isEmpty(pin)) {
    return;
  }
  String errorMsg=null;
  if (mUiStage == Stage.Introduction) {
    errorMsg=validatePassword(pin);
    if (errorMsg == null) {
      mFirstPin=pin;
      mPasswordEntry.setText("");
      updateStage(Stage.NeedToConfirm);
    }
  }
 else   if (mUiStage == Stage.NeedToConfirm) {
    if (mFirstPin.equals(pin)) {
      boolean wasSecureBefore=mLockPatternUtils.isSecure(UserHandle.myUserId());
      final boolean required=getActivity().getIntent().getBooleanExtra(EncryptionInterstitial.EXTRA_REQUIRE_PASSWORD,true);
      mLockPatternUtils.setCredentialRequiredToDecrypt(required);
      mLockPatternUtils.saveLockPassword(pin,mCurrentPassword,mRequestedQuality,UserHandle.myUserId());
      if (mHasChallenge) {
        Intent intent=new Intent();
        byte[] token=mLockPatternUtils.verifyPassword(pin,mChallenge,UserHandle.myUserId());
        intent.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE_TOKEN,token);
        getActivity().setResult(RESULT_FINISHED,intent);
      }
 else {
        getActivity().setResult(RESULT_FINISHED);
      }
      getActivity().finish();
      mDone=true;
      if (!wasSecureBefore) {
        startActivity(getRedactionInterstitialIntent(getActivity()));
      }
    }
 else {
      CharSequence tmp=mPasswordEntry.getText();
      if (tmp != null) {
        Selection.setSelection((Spannable)tmp,0,tmp.length());
      }
      updateStage(Stage.ConfirmWrong);
    }
  }
  if (errorMsg != null) {
    showError(errorMsg,mUiStage);
  }
}
