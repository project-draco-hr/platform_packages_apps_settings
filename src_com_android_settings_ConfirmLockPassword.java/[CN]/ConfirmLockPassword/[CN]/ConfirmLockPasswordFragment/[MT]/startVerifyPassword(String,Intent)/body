{
  long challenge=getActivity().getIntent().getLongExtra(ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE,0);
  final int localEffectiveUserId=mEffectiveUserId;
  final int localUserId=mUserId;
  final LockPatternChecker.OnVerifyCallback onVerifyCallback=new LockPatternChecker.OnVerifyCallback(){
    @Override public void onVerified(    byte[] token,    int timeoutMs){
      mPendingLockCheck=null;
      boolean matched=false;
      if (token != null) {
        matched=true;
        if (mReturnCredentials) {
          intent.putExtra(ChooseLockSettingsHelper.EXTRA_KEY_CHALLENGE_TOKEN,token);
        }
      }
      mCredentialCheckResultTracker.setResult(matched,intent,timeoutMs,localUserId);
    }
  }
;
  mPendingLockCheck=(localEffectiveUserId == localUserId) ? LockPatternChecker.verifyPassword(mLockPatternUtils,pin,challenge,localUserId,onVerifyCallback) : LockPatternChecker.verifyTiedProfileChallenge(mLockPatternUtils,pin,false,challenge,localUserId,onVerifyCallback);
}
