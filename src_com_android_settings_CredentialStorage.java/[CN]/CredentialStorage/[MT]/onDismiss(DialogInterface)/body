{
  if (mPositive) {
    mPositive=false;
    mError.setVisibility(View.VISIBLE);
    if (mNewPassword == null) {
      mKeyStore.unlock(mOldPassword.getText().toString());
    }
 else {
      String newPassword=mNewPassword.getText().toString();
      String confirmPassword=mConfirmPassword.getText().toString();
      if (!newPassword.equals(confirmPassword)) {
        mError.setText(R.string.credentials_passwords_mismatch);
        ((AlertDialog)dialog).show();
        return;
      }
 else       if (mOldPassword == null) {
        mKeyStore.password(newPassword);
      }
 else {
        mKeyStore.password(mOldPassword.getText().toString(),newPassword);
      }
    }
    int error=mKeyStore.getLastError();
    if (error == KeyStore.NO_ERROR) {
      Toast.makeText(this,R.string.credentials_enabled,Toast.LENGTH_SHORT).show();
      install();
    }
 else     if (error == KeyStore.UNINITIALIZED) {
      Toast.makeText(this,R.string.credentials_erased,Toast.LENGTH_SHORT).show();
    }
 else     if (error >= KeyStore.WRONG_PASSWORD) {
      int count=error - KeyStore.WRONG_PASSWORD + 1;
      if (count > 3) {
        mError.setText(R.string.credentials_wrong_password);
      }
 else       if (count == 1) {
        mError.setText(R.string.credentials_reset_warning);
      }
 else {
        mError.setText(getString(R.string.credentials_reset_warning_plural,count));
      }
      ((AlertDialog)dialog).show();
      return;
    }
  }
  if (mNeutral) {
    mNeutral=false;
    new ResetKeyStoreAndKeyChain().execute();
    return;
  }
  finish();
}
