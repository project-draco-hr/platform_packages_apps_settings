{
  if (failedAttempts == 0) {
  }
 else   if (failedAttempts == MAX_FAILED_ATTEMPTS) {
    sendBroadcast(new Intent("android.intent.action.MASTER_CLEAR"));
  }
 else   if (failedAttempts == -1) {
    setContentView(R.layout.crypt_keeper_progress);
    showFactoryReset(true);
    return;
  }
 else {
    if (mLockPatternView != null) {
      mLockPatternView.setDisplayMode(DisplayMode.Wrong);
      mLockPatternView.removeCallbacks(mClearPatternRunnable);
      mLockPatternView.postDelayed(mClearPatternRunnable,WRONG_PATTERN_CLEAR_TIMEOUT_MS);
    }
    if ((failedAttempts % COOL_DOWN_ATTEMPTS) == 0) {
      mCooldown=COOL_DOWN_INTERVAL;
      cooldown();
    }
 else {
      final TextView status=(TextView)findViewById(R.id.status);
      int remainingAttempts=MAX_FAILED_ATTEMPTS - failedAttempts;
      if (remainingAttempts < COOL_DOWN_ATTEMPTS) {
        CharSequence warningTemplate=getText(R.string.crypt_keeper_warn_wipe);
        CharSequence warning=TextUtils.expandTemplate(warningTemplate,Integer.toString(remainingAttempts));
        status.setText(warning);
      }
 else {
        status.setText(R.string.try_again);
      }
      if (mLockPatternView != null) {
        mLockPatternView.setDisplayMode(DisplayMode.Wrong);
      }
      if (mPasswordEntry != null) {
        mPasswordEntry.setEnabled(true);
        final InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.showSoftInput(mPasswordEntry,0);
        setBackFunctionality(true);
      }
      if (mLockPatternView != null) {
        mLockPatternView.setEnabled(true);
      }
    }
  }
}
