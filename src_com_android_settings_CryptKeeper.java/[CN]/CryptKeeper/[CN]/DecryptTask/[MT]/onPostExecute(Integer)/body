{
  if (failedAttempts == 0) {
    if (mLockPatternView != null) {
      mLockPatternView.removeCallbacks(mClearPatternRunnable);
      mLockPatternView.postDelayed(mClearPatternRunnable,RIGHT_PATTERN_CLEAR_TIMEOUT_MS);
    }
    final TextView status=(TextView)findViewById(R.id.status);
    status.setText(R.string.starting_android);
    hide(R.id.passwordEntry);
    hide(R.id.switch_ime_button);
    hide(R.id.lockPattern);
    hide(R.id.owner_info);
    hide(R.id.emergencyCallButton);
  }
 else   if (failedAttempts == MAX_FAILED_ATTEMPTS) {
    Intent intent=new Intent(Intent.ACTION_MASTER_CLEAR);
    intent.addFlags(Intent.FLAG_RECEIVER_FOREGROUND);
    intent.putExtra(Intent.EXTRA_REASON,"CryptKeeper.MAX_FAILED_ATTEMPTS");
    sendBroadcast(intent);
  }
 else   if (failedAttempts == -1) {
    setContentView(R.layout.crypt_keeper_progress);
    showFactoryReset(true);
    return;
  }
 else {
    if (mLockPatternView != null) {
      mLockPatternView.setDisplayMode(DisplayMode.Wrong);
      mLockPatternView.removeCallbacks(mClearPatternRunnable);
      mLockPatternView.postDelayed(mClearPatternRunnable,WRONG_PATTERN_CLEAR_TIMEOUT_MS);
    }
    if ((failedAttempts % COOL_DOWN_ATTEMPTS) == 0) {
      mCooldown=COOL_DOWN_INTERVAL;
      cooldown();
    }
 else {
      final TextView status=(TextView)findViewById(R.id.status);
      int remainingAttempts=MAX_FAILED_ATTEMPTS - failedAttempts;
      if (remainingAttempts < COOL_DOWN_ATTEMPTS) {
        CharSequence warningTemplate=getText(R.string.crypt_keeper_warn_wipe);
        CharSequence warning=TextUtils.expandTemplate(warningTemplate,Integer.toString(remainingAttempts));
        status.setText(warning);
      }
 else {
        int passwordType=StorageManager.CRYPT_TYPE_PASSWORD;
        try {
          final IMountService service=getMountService();
          passwordType=service.getPasswordType();
        }
 catch (        Exception e) {
          Log.e(TAG,"Error calling mount service " + e);
        }
        if (passwordType == StorageManager.CRYPT_TYPE_PIN) {
          status.setText(R.string.cryptkeeper_wrong_pin);
        }
 else         if (passwordType == StorageManager.CRYPT_TYPE_PATTERN) {
          status.setText(R.string.cryptkeeper_wrong_pattern);
        }
 else {
          status.setText(R.string.cryptkeeper_wrong_password);
        }
      }
      if (mLockPatternView != null) {
        mLockPatternView.setDisplayMode(DisplayMode.Wrong);
      }
      if (mPasswordEntry != null) {
        mPasswordEntry.setEnabled(true);
        final InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
        imm.showSoftInput(mPasswordEntry,0);
        setBackFunctionality(true);
      }
      if (mLockPatternView != null) {
        mLockPatternView.setEnabled(true);
      }
    }
  }
}
