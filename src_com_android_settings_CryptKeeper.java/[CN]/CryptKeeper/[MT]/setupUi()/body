{
  if (mEncryptionGoneBad || isDebugView(FORCE_VIEW_ERROR)) {
    setContentView(R.layout.crypt_keeper_progress);
    showFactoryReset(mCorrupt);
    return;
  }
  final String progress=SystemProperties.get("vold.encrypt_progress");
  if (!"".equals(progress) || isDebugView(FORCE_VIEW_PROGRESS)) {
    setContentView(R.layout.crypt_keeper_progress);
    encryptionProgressInit();
  }
 else   if (mValidationComplete || isDebugView(FORCE_VIEW_PASSWORD)) {
    new AsyncTask<Void,Void,Void>(){
      int passwordType=StorageManager.CRYPT_TYPE_PASSWORD;
      String owner_info;
      boolean pattern_visible;
      boolean password_visible;
      @Override public Void doInBackground(      Void... v){
        try {
          final IMountService service=getMountService();
          passwordType=service.getPasswordType();
          owner_info=service.getField(StorageManager.OWNER_INFO_KEY);
          pattern_visible=!("0".equals(service.getField(StorageManager.PATTERN_VISIBLE_KEY)));
          password_visible=!("0".equals(service.getField(StorageManager.PASSWORD_VISIBLE_KEY)));
        }
 catch (        Exception e) {
          Log.e(TAG,"Error calling mount service " + e);
        }
        return null;
      }
      @Override public void onPostExecute(      java.lang.Void v){
        Settings.System.putInt(getContentResolver(),Settings.System.TEXT_SHOW_PASSWORD,password_visible ? 1 : 0);
        if (passwordType == StorageManager.CRYPT_TYPE_PIN) {
          setContentView(R.layout.crypt_keeper_pin_entry);
          mStatusString=R.string.enter_pin;
        }
 else         if (passwordType == StorageManager.CRYPT_TYPE_PATTERN) {
          setContentView(R.layout.crypt_keeper_pattern_entry);
          setBackFunctionality(false);
          mStatusString=R.string.enter_pattern;
        }
 else {
          setContentView(R.layout.crypt_keeper_password_entry);
          mStatusString=R.string.enter_password;
        }
        final TextView status=(TextView)findViewById(R.id.status);
        status.setText(mStatusString);
        final TextView ownerInfo=(TextView)findViewById(R.id.owner_info);
        ownerInfo.setText(owner_info);
        ownerInfo.setSelected(true);
        passwordEntryInit();
        if (mLockPatternView != null) {
          mLockPatternView.setInStealthMode(!pattern_visible);
        }
        if (mCooldown) {
          setBackFunctionality(false);
          cooldown();
        }
      }
    }
.execute();
  }
 else   if (!mValidationRequested) {
    new ValidationTask().execute((Void[])null);
    mValidationRequested=true;
  }
}
