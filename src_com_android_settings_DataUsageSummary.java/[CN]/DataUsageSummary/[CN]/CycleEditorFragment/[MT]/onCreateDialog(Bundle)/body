{
  final Context context=getActivity();
  final DataUsageSummary target=(DataUsageSummary)getTargetFragment();
  final NetworkPolicyEditor editor=target.mPolicyEditor;
  final AlertDialog.Builder builder=new AlertDialog.Builder(context);
  final LayoutInflater dialogInflater=LayoutInflater.from(builder.getContext());
  final View view=dialogInflater.inflate(R.layout.data_usage_cycle_editor,null,false);
  final NumberPicker cycleDayPicker=(NumberPicker)view.findViewById(R.id.cycle_day);
  final NetworkTemplate template=getArguments().getParcelable(EXTRA_TEMPLATE);
  final int cycleDay=editor.getPolicyCycleDay(template);
  cycleDayPicker.setMinValue(1);
  cycleDayPicker.setMaxValue(31);
  cycleDayPicker.setValue(cycleDay);
  cycleDayPicker.setWrapSelectorWheel(true);
  builder.setTitle(R.string.data_usage_cycle_editor_title);
  builder.setView(view);
  builder.setPositiveButton(R.string.data_usage_cycle_editor_positive,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      cycleDayPicker.clearFocus();
      final int cycleDay=cycleDayPicker.getValue();
      final String cycleTimezone=new Time().timezone;
      editor.setPolicyCycleDay(template,cycleDay,cycleTimezone);
      target.updatePolicy(true);
    }
  }
);
  return builder.create();
}
