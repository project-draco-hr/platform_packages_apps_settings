{
  mItems.clear();
  final int currentUserId=ActivityManager.getCurrentUser();
  final SparseArray<AppItem> knownItems=new SparseArray<AppItem>();
  NetworkStats.Entry entry=null;
  final int size=stats != null ? stats.size() : 0;
  for (int i=0; i < size; i++) {
    entry=stats.getValues(i,entry);
    final int uid=entry.uid;
    final int collapseKey;
    if (UserHandle.isApp(uid)) {
      if (UserHandle.getUserId(uid) == currentUserId) {
        collapseKey=uid;
      }
 else {
        collapseKey=UidDetailProvider.buildKeyForUser(UserHandle.getUserId(uid));
      }
    }
 else     if (uid == UID_REMOVED || uid == UID_TETHERING) {
      collapseKey=uid;
    }
 else {
      collapseKey=android.os.Process.SYSTEM_UID;
    }
    AppItem item=knownItems.get(collapseKey);
    if (item == null) {
      item=new AppItem(collapseKey);
      mItems.add(item);
      knownItems.put(item.key,item);
    }
    item.addUid(uid);
    item.total+=entry.rxBytes + entry.txBytes;
  }
  for (  int uid : restrictedUids) {
    if (UserHandle.getUserId(uid) != currentUserId)     continue;
    AppItem item=knownItems.get(uid);
    if (item == null) {
      item=new AppItem(uid);
      item.total=-1;
      mItems.add(item);
      knownItems.put(item.key,item);
    }
    item.restricted=true;
  }
  Collections.sort(mItems);
  mLargest=(mItems.size() > 0) ? mItems.get(0).total : 0;
  notifyDataSetChanged();
}
