{
  final Context context=getActivity();
  final DataUsageSummary target=(DataUsageSummary)getTargetFragment();
  final NetworkPolicyEditor editor=target.mPolicyEditor;
  final AlertDialog.Builder builder=new AlertDialog.Builder(context);
  final LayoutInflater dialogInflater=LayoutInflater.from(builder.getContext());
  final View view=dialogInflater.inflate(R.layout.data_usage_bytes_editor,null,false);
  final NumberPicker bytesPicker=(NumberPicker)view.findViewById(R.id.bytes);
  final NetworkTemplate template=getArguments().getParcelable(EXTRA_TEMPLATE);
  final long warningBytes=editor.getPolicyWarningBytes(template);
  final long limitBytes=editor.getPolicyLimitBytes(template);
  bytesPicker.setMaxValue(Integer.MAX_VALUE);
  if (warningBytes != WARNING_DISABLED && limitBytes > 0) {
    bytesPicker.setMinValue((int)(warningBytes / MB_IN_BYTES) + 1);
  }
 else {
    bytesPicker.setMinValue(0);
  }
  bytesPicker.setValue((int)(limitBytes / MB_IN_BYTES));
  bytesPicker.setWrapSelectorWheel(false);
  builder.setTitle(R.string.data_usage_limit_editor_title);
  builder.setView(view);
  builder.setPositiveButton(R.string.data_usage_cycle_editor_positive,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      bytesPicker.clearFocus();
      final long bytes=bytesPicker.getValue() * MB_IN_BYTES;
      editor.setPolicyLimitBytes(template,bytes);
      target.updatePolicy(false);
    }
  }
);
  return builder.create();
}
