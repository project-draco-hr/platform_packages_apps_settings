{
switch (item.getItemId()) {
case R.id.data_usage_menu_roaming:
{
      final boolean dataRoaming=!item.isChecked();
      if (dataRoaming) {
        ConfirmDataRoamingFragment.show(this);
      }
 else {
        setDataRoaming(false);
      }
      return true;
    }
case R.id.data_usage_menu_restrict_background:
{
    final boolean restrictBackground=!item.isChecked();
    if (restrictBackground) {
      ConfirmRestrictFragment.show(this);
    }
 else {
      setRestrictBackground(false);
    }
    return true;
  }
case R.id.data_usage_menu_split_4g:
{
  final boolean mobileSplit=!item.isChecked();
  setMobilePolicySplit(mobileSplit);
  item.setChecked(isMobilePolicySplit());
  updateTabs();
  return true;
}
case R.id.data_usage_menu_show_wifi:
{
mShowWifi=!item.isChecked();
mPrefs.edit().putBoolean(PREF_SHOW_WIFI,mShowWifi).apply();
item.setChecked(mShowWifi);
updateTabs();
return true;
}
case R.id.data_usage_menu_show_ethernet:
{
mShowEthernet=!item.isChecked();
mPrefs.edit().putBoolean(PREF_SHOW_ETHERNET,mShowEthernet).apply();
item.setChecked(mShowEthernet);
updateTabs();
return true;
}
case R.id.data_usage_menu_metered:
{
final SettingsActivity sa=(SettingsActivity)getActivity();
sa.startPreferencePanel(DataUsageMeteredSettings.class.getCanonicalName(),null,R.string.data_usage_metered_title,null,this,0);
return true;
}
case R.id.data_usage_menu_auto_sync:
{
if (ActivityManager.isUserAMonkey()) {
Log.d("SyncState","ignoring monkey's attempt to flip global sync state");
}
 else {
ConfirmAutoSyncChangeFragment.show(this,!item.isChecked());
}
return true;
}
}
return false;
}
