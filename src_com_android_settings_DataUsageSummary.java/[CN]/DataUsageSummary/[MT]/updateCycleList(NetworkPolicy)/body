{
  mCycleAdapter.clear();
  final Context context=mCycleSpinner.getContext();
  long historyStart=Long.MAX_VALUE;
  long historyEnd=Long.MIN_VALUE;
  if (mChartData != null) {
    historyStart=mChartData.network.getStart();
    historyEnd=mChartData.network.getEnd();
  }
  if (historyStart == Long.MAX_VALUE)   historyStart=System.currentTimeMillis();
  if (historyEnd == Long.MIN_VALUE)   historyEnd=System.currentTimeMillis();
  boolean hasCycles=false;
  if (policy != null) {
    long cycleEnd=computeNextCycleBoundary(historyEnd,policy);
    while (cycleEnd > historyStart) {
      final long cycleStart=computeLastCycleBoundary(cycleEnd,policy);
      Log.d(TAG,"generating cs=" + cycleStart + " to ce="+ cycleEnd+ " waiting for hs="+ historyStart);
      mCycleAdapter.add(new CycleItem(context,cycleStart,cycleEnd));
      cycleEnd=cycleStart;
      hasCycles=true;
    }
    mCycleAdapter.setChangePossible(isNetworkPolicyModifiable(policy));
  }
  if (!hasCycles) {
    long cycleEnd=historyEnd;
    while (cycleEnd > historyStart) {
      final long cycleStart=cycleEnd - (DateUtils.WEEK_IN_MILLIS * 4);
      mCycleAdapter.add(new CycleItem(context,cycleStart,cycleEnd));
      cycleEnd=cycleStart;
    }
    mCycleAdapter.setChangePossible(false);
  }
  if (mCycleAdapter.getCount() > 0) {
    mCycleSpinner.setSelection(0);
    mCycleListener.onItemSelected(mCycleSpinner,null,0,0);
  }
 else {
    updateDetailData();
  }
}
