{
  super.onCreate(icicle);
  mWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService("window"));
  mBackupManager=IBackupManager.Stub.asInterface(ServiceManager.getService(Context.BACKUP_SERVICE));
  mWebViewUpdateService=IWebViewUpdateService.Stub.asInterface(ServiceManager.getService("webviewupdate"));
  mDpm=(DevicePolicyManager)getActivity().getSystemService(Context.DEVICE_POLICY_SERVICE);
  mUm=(UserManager)getSystemService(Context.USER_SERVICE);
  mWifiManager=(WifiManager)getSystemService(Context.WIFI_SERVICE);
  setIfOnlyAvailableForAdmins(true);
  if (isUiRestricted() || Settings.Global.getInt(getActivity().getContentResolver(),Settings.Global.DEVICE_PROVISIONED,0) == 0) {
    mUnavailable=true;
    setPreferenceScreen(new PreferenceScreen(getPrefContext(),null));
    return;
  }
  addPreferencesFromResource(R.xml.development_prefs);
  final PreferenceGroup debugDebuggingCategory=(PreferenceGroup)findPreference(DEBUG_DEBUGGING_CATEGORY_KEY);
  mEnableAdb=findAndInitSwitchPref(ENABLE_ADB);
  mClearAdbKeys=findPreference(CLEAR_ADB_KEYS);
  if (!SystemProperties.getBoolean("ro.adb.secure",false)) {
    if (debugDebuggingCategory != null) {
      debugDebuggingCategory.removePreference(mClearAdbKeys);
    }
  }
  mAllPrefs.add(mClearAdbKeys);
  mEnableTerminal=findAndInitSwitchPref(ENABLE_TERMINAL);
  if (!isPackageInstalled(getActivity(),TERMINAL_APP_PACKAGE)) {
    debugDebuggingCategory.removePreference(mEnableTerminal);
    mEnableTerminal=null;
  }
  mBugreport=findPreference(BUGREPORT);
  mBugreportInPower=findAndInitSwitchPref(BUGREPORT_IN_POWER_KEY);
  mKeepScreenOn=findAndInitSwitchPref(KEEP_SCREEN_ON);
  mBtHciSnoopLog=findAndInitSwitchPref(BT_HCI_SNOOP_LOG);
  mEnableOemUnlock=findAndInitSwitchPref(ENABLE_OEM_UNLOCK);
  if (!showEnableOemUnlockPreference()) {
    removePreference(mEnableOemUnlock);
    mEnableOemUnlock=null;
  }
  mDebugViewAttributes=findAndInitSwitchPref(DEBUG_VIEW_ATTRIBUTES);
  mForceAllowOnExternal=findAndInitSwitchPref(FORCE_ALLOW_ON_EXTERNAL_KEY);
  mPassword=(PreferenceScreen)findPreference(LOCAL_BACKUP_PASSWORD);
  mAllPrefs.add(mPassword);
  if (!mUm.isAdminUser()) {
    disableForUser(mEnableAdb);
    disableForUser(mClearAdbKeys);
    disableForUser(mEnableTerminal);
    disableForUser(mPassword);
  }
  mDebugAppPref=findPreference(DEBUG_APP_KEY);
  mAllPrefs.add(mDebugAppPref);
  mWaitForDebugger=findAndInitSwitchPref(WAIT_FOR_DEBUGGER_KEY);
  mMockLocationAppPref=findPreference(MOCK_LOCATION_APP_KEY);
  mAllPrefs.add(mMockLocationAppPref);
  mVerifyAppsOverUsb=findAndInitSwitchPref(VERIFY_APPS_OVER_USB_KEY);
  if (!showVerifierSetting()) {
    if (debugDebuggingCategory != null) {
      debugDebuggingCategory.removePreference(mVerifyAppsOverUsb);
    }
 else {
      mVerifyAppsOverUsb.setEnabled(false);
    }
  }
  mStrictMode=findAndInitSwitchPref(STRICT_MODE_KEY);
  mPointerLocation=findAndInitSwitchPref(POINTER_LOCATION_KEY);
  mShowTouches=findAndInitSwitchPref(SHOW_TOUCHES_KEY);
  mShowScreenUpdates=findAndInitSwitchPref(SHOW_SCREEN_UPDATES_KEY);
  mDisableOverlays=findAndInitSwitchPref(DISABLE_OVERLAYS_KEY);
  mShowCpuUsage=findAndInitSwitchPref(SHOW_CPU_USAGE_KEY);
  mForceHardwareUi=findAndInitSwitchPref(FORCE_HARDWARE_UI_KEY);
  mForceMsaa=findAndInitSwitchPref(FORCE_MSAA_KEY);
  mTrackFrameTime=addListPreference(TRACK_FRAME_TIME_KEY);
  mShowNonRectClip=addListPreference(SHOW_NON_RECTANGULAR_CLIP_KEY);
  mShowHwScreenUpdates=findAndInitSwitchPref(SHOW_HW_SCREEN_UPDATES_KEY);
  mShowHwLayersUpdates=findAndInitSwitchPref(SHOW_HW_LAYERS_UPDATES_KEY);
  mDebugLayout=findAndInitSwitchPref(DEBUG_LAYOUT_KEY);
  mForceRtlLayout=findAndInitSwitchPref(FORCE_RTL_LAYOUT_KEY);
  mDebugHwOverdraw=addListPreference(DEBUG_HW_OVERDRAW_KEY);
  mWifiDisplayCertification=findAndInitSwitchPref(WIFI_DISPLAY_CERTIFICATION_KEY);
  mWifiVerboseLogging=findAndInitSwitchPref(WIFI_VERBOSE_LOGGING_KEY);
  mWifiAggressiveHandover=findAndInitSwitchPref(WIFI_AGGRESSIVE_HANDOVER_KEY);
  mWifiAllowScansWithTraffic=findAndInitSwitchPref(WIFI_ALLOW_SCAN_WITH_TRAFFIC_KEY);
  mMobileDataAlwaysOn=findAndInitSwitchPref(MOBILE_DATA_ALWAYS_ON);
  mLogdSize=addListPreference(SELECT_LOGD_SIZE_KEY);
  mUsbConfiguration=addListPreference(USB_CONFIGURATION_KEY);
  mWebViewProvider=addListPreference(WEBVIEW_PROVIDER_KEY);
  mWebViewMultiprocess=findAndInitSwitchPref(WEBVIEW_MULTIPROCESS_KEY);
  mBluetoothDisableAbsVolume=findAndInitSwitchPref(BLUETOOTH_DISABLE_ABSOLUTE_VOLUME_KEY);
  mWindowAnimationScale=addListPreference(WINDOW_ANIMATION_SCALE_KEY);
  mTransitionAnimationScale=addListPreference(TRANSITION_ANIMATION_SCALE_KEY);
  mAnimatorDurationScale=addListPreference(ANIMATOR_DURATION_SCALE_KEY);
  mOverlayDisplayDevices=addListPreference(OVERLAY_DISPLAY_DEVICES_KEY);
  mOpenGLTraces=addListPreference(OPENGL_TRACES_KEY);
  mSimulateColorSpace=addListPreference(SIMULATE_COLOR_SPACE);
  mUSBAudio=findAndInitSwitchPref(USB_AUDIO_KEY);
  mForceResizable=findAndInitSwitchPref(FORCE_RESIZABLE_KEY);
  mImmediatelyDestroyActivities=(SwitchPreference)findPreference(IMMEDIATELY_DESTROY_ACTIVITIES_KEY);
  mAllPrefs.add(mImmediatelyDestroyActivities);
  mResetSwitchPrefs.add(mImmediatelyDestroyActivities);
  mAppProcessLimit=addListPreference(APP_PROCESS_LIMIT_KEY);
  mShowAllANRs=(SwitchPreference)findPreference(SHOW_ALL_ANRS_KEY);
  mAllPrefs.add(mShowAllANRs);
  mResetSwitchPrefs.add(mShowAllANRs);
  Preference hdcpChecking=findPreference(HDCP_CHECKING_KEY);
  if (hdcpChecking != null) {
    mAllPrefs.add(hdcpChecking);
    removePreferenceForProduction(hdcpChecking);
  }
  PreferenceScreen convertFbePreference=(PreferenceScreen)findPreference(KEY_CONVERT_FBE);
  try {
    IBinder service=ServiceManager.getService("mount");
    IMountService mountService=IMountService.Stub.asInterface(service);
    if (!mountService.isConvertibleToFBE()) {
      removePreference(KEY_CONVERT_FBE);
    }
 else     if ("file".equals(SystemProperties.get("ro.crypto.type","none"))) {
      convertFbePreference.setEnabled(false);
      convertFbePreference.setSummary(getResources().getString(R.string.convert_to_file_encryption_done));
    }
  }
 catch (  RemoteException e) {
    removePreference(KEY_CONVERT_FBE);
  }
  mOtaDisableAutomaticUpdate=findAndInitSwitchPref(OTA_DISABLE_AUTOMATIC_UPDATE_KEY);
  mNightModePreference=(DropDownPreference)findPreference(KEY_NIGHT_MODE);
  final UiModeManager uiManager=(UiModeManager)getSystemService(Context.UI_MODE_SERVICE);
  final int currentNightMode=uiManager.getNightMode();
  mNightModePreference.setValue(String.valueOf(currentNightMode));
  mNightModePreference.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      try {
        final int value=Integer.parseInt((String)newValue);
        final UiModeManager uiManager=(UiModeManager)getSystemService(Context.UI_MODE_SERVICE);
        uiManager.setNightMode(value);
        return true;
      }
 catch (      NumberFormatException e) {
        Log.e(TAG,"could not persist night mode setting",e);
        return false;
      }
    }
  }
);
  mColorModePreference=(ColorModePreference)findPreference(KEY_COLOR_MODE);
  mColorModePreference.updateCurrentAndSupported();
  if (mColorModePreference.getTransformsCount() < 2) {
    removePreference(KEY_COLOR_MODE);
    mColorModePreference=null;
  }
  updateWebViewProviderOptions();
  mColorTemperaturePreference=(SwitchPreference)findPreference(COLOR_TEMPERATURE_KEY);
  if (getResources().getBoolean(R.bool.config_enableColorTemperature)) {
    mAllPrefs.add(mColorTemperaturePreference);
    mResetSwitchPrefs.add(mColorTemperaturePreference);
  }
 else {
    removePreference(COLOR_TEMPERATURE_KEY);
    mColorTemperaturePreference=null;
  }
}
