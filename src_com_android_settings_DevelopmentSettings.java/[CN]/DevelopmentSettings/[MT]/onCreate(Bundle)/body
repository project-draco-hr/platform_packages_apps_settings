{
  super.onCreate(icicle);
  mWindowManager=IWindowManager.Stub.asInterface(ServiceManager.getService("window"));
  mBackupManager=IBackupManager.Stub.asInterface(ServiceManager.getService(Context.BACKUP_SERVICE));
  mDpm=(DevicePolicyManager)getActivity().getSystemService(Context.DEVICE_POLICY_SERVICE);
  addPreferencesFromResource(R.xml.development_prefs);
  final PreferenceGroup debugDebuggingCategory=(PreferenceGroup)findPreference(DEBUG_DEBUGGING_CATEGORY_KEY);
  mEnableAdb=findAndInitCheckboxPref(ENABLE_ADB);
  mClearAdbKeys=findPreference(CLEAR_ADB_KEYS);
  if (!SystemProperties.getBoolean("ro.adb.secure",false)) {
    if (debugDebuggingCategory != null) {
      debugDebuggingCategory.removePreference(mClearAdbKeys);
    }
  }
  mEnableTerminal=findAndInitCheckboxPref(ENABLE_TERMINAL);
  if (!isPackageInstalled(getActivity(),TERMINAL_APP_PACKAGE)) {
    debugDebuggingCategory.removePreference(mEnableTerminal);
    mEnableTerminal=null;
  }
  mBugreport=findPreference(BUGREPORT);
  mBugreportInPower=findAndInitCheckboxPref(BUGREPORT_IN_POWER_KEY);
  mKeepScreenOn=findAndInitCheckboxPref(KEEP_SCREEN_ON);
  mEnforceReadExternal=findAndInitCheckboxPref(ENFORCE_READ_EXTERNAL);
  mAllowMockLocation=findAndInitCheckboxPref(ALLOW_MOCK_LOCATION);
  mPassword=(PreferenceScreen)findPreference(LOCAL_BACKUP_PASSWORD);
  mAllPrefs.add(mPassword);
  if (!android.os.Process.myUserHandle().equals(UserHandle.OWNER)) {
    disableForUser(mEnableAdb);
    disableForUser(mClearAdbKeys);
    disableForUser(mEnableTerminal);
    disableForUser(mPassword);
  }
  mDebugAppPref=findPreference(DEBUG_APP_KEY);
  mAllPrefs.add(mDebugAppPref);
  mWaitForDebugger=findAndInitCheckboxPref(WAIT_FOR_DEBUGGER_KEY);
  mVerifyAppsOverUsb=findAndInitCheckboxPref(VERIFY_APPS_OVER_USB_KEY);
  if (!showVerifierSetting()) {
    if (debugDebuggingCategory != null) {
      debugDebuggingCategory.removePreference(mVerifyAppsOverUsb);
    }
 else {
      mVerifyAppsOverUsb.setEnabled(false);
    }
  }
  mStrictMode=findAndInitCheckboxPref(STRICT_MODE_KEY);
  mPointerLocation=findAndInitCheckboxPref(POINTER_LOCATION_KEY);
  mShowTouches=findAndInitCheckboxPref(SHOW_TOUCHES_KEY);
  mShowScreenUpdates=findAndInitCheckboxPref(SHOW_SCREEN_UPDATES_KEY);
  mDisableOverlays=findAndInitCheckboxPref(DISABLE_OVERLAYS_KEY);
  mShowCpuUsage=findAndInitCheckboxPref(SHOW_CPU_USAGE_KEY);
  mForceHardwareUi=findAndInitCheckboxPref(FORCE_HARDWARE_UI_KEY);
  mForceMsaa=findAndInitCheckboxPref(FORCE_MSAA_KEY);
  mTrackFrameTime=addListPreference(TRACK_FRAME_TIME_KEY);
  mShowNonRectClip=addListPreference(SHOW_NON_RECTANGULAR_CLIP_KEY);
  mShowHwScreenUpdates=findAndInitCheckboxPref(SHOW_HW_SCREEN_UPDATES_KEY);
  mShowHwLayersUpdates=findAndInitCheckboxPref(SHOW_HW_LAYERS_UPDATES_KEY);
  mShowHwOverdraw=findAndInitCheckboxPref(SHOW_HW_OVERDRAW_KEY);
  mDebugLayout=findAndInitCheckboxPref(DEBUG_LAYOUT_KEY);
  mWindowAnimationScale=addListPreference(WINDOW_ANIMATION_SCALE_KEY);
  mTransitionAnimationScale=addListPreference(TRANSITION_ANIMATION_SCALE_KEY);
  mAnimatorDurationScale=addListPreference(ANIMATOR_DURATION_SCALE_KEY);
  mOverlayDisplayDevices=addListPreference(OVERLAY_DISPLAY_DEVICES_KEY);
  mOpenGLTraces=addListPreference(OPENGL_TRACES_KEY);
  mImmediatelyDestroyActivities=(CheckBoxPreference)findPreference(IMMEDIATELY_DESTROY_ACTIVITIES_KEY);
  mAllPrefs.add(mImmediatelyDestroyActivities);
  mResetCbPrefs.add(mImmediatelyDestroyActivities);
  mAppProcessLimit=addListPreference(APP_PROCESS_LIMIT_KEY);
  mShowAllANRs=(CheckBoxPreference)findPreference(SHOW_ALL_ANRS_KEY);
  mAllPrefs.add(mShowAllANRs);
  mResetCbPrefs.add(mShowAllANRs);
  if (WebViewFactory.isExperimentalWebViewAvailable()) {
    mExperimentalWebView=findAndInitCheckboxPref(WEBVIEW_EXPERIMENTAL_KEY);
  }
 else {
    Preference experimentalWebView=findPreference(WEBVIEW_EXPERIMENTAL_KEY);
    PreferenceGroup debugApplicationsCategory=(PreferenceGroup)findPreference(DEBUG_APPLICATIONS_CATEGORY_KEY);
    if (debugApplicationsCategory != null) {
      debugApplicationsCategory.removePreference(experimentalWebView);
    }
  }
  Preference hdcpChecking=findPreference(HDCP_CHECKING_KEY);
  if (hdcpChecking != null) {
    mAllPrefs.add(hdcpChecking);
  }
  removeHdcpOptionsForProduction();
}
