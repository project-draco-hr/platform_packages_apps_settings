{
  if (Utils.isMonkeyRunning()) {
    return false;
  }
  if (preference == mEnableAdb) {
    if (mEnableAdb.isChecked()) {
      mDialogClicked=false;
      if (mAdbDialog != null)       dismissDialogs();
      mAdbDialog=new AlertDialog.Builder(getActivity()).setMessage(getActivity().getResources().getString(R.string.adb_warning_message)).setTitle(R.string.adb_warning_title).setPositiveButton(android.R.string.yes,this).setNegativeButton(android.R.string.no,this).show();
      mAdbDialog.setOnDismissListener(this);
    }
 else {
      Settings.Global.putInt(getActivity().getContentResolver(),Settings.Global.ADB_ENABLED,0);
      mVerifyAppsOverUsb.setEnabled(false);
      mVerifyAppsOverUsb.setChecked(false);
      updateBugreportOptions();
    }
  }
 else   if (preference == mClearAdbKeys) {
    if (mAdbKeysDialog != null)     dismissDialogs();
    mAdbKeysDialog=new AlertDialog.Builder(getActivity()).setMessage(R.string.adb_keys_warning_message).setPositiveButton(android.R.string.ok,this).setNegativeButton(android.R.string.cancel,null).show();
  }
 else   if (preference == mEnableTerminal) {
    final PackageManager pm=getActivity().getPackageManager();
    pm.setApplicationEnabledSetting(TERMINAL_APP_PACKAGE,mEnableTerminal.isChecked() ? PackageManager.COMPONENT_ENABLED_STATE_ENABLED : PackageManager.COMPONENT_ENABLED_STATE_DEFAULT,0);
  }
 else   if (preference == mBugreportInPower) {
    Settings.Secure.putInt(getActivity().getContentResolver(),Settings.Secure.BUGREPORT_IN_POWER_MENU,mBugreportInPower.isChecked() ? 1 : 0);
  }
 else   if (preference == mKeepScreenOn) {
    Settings.Global.putInt(getActivity().getContentResolver(),Settings.Global.STAY_ON_WHILE_PLUGGED_IN,mKeepScreenOn.isChecked() ? (BatteryManager.BATTERY_PLUGGED_AC | BatteryManager.BATTERY_PLUGGED_USB) : 0);
  }
 else   if (preference == mBtHciSnoopLog) {
    writeBtHciSnoopLogOptions();
  }
 else   if (preference == mAllowMockLocation) {
    Settings.Secure.putInt(getActivity().getContentResolver(),Settings.Secure.ALLOW_MOCK_LOCATION,mAllowMockLocation.isChecked() ? 1 : 0);
  }
 else   if (preference == mDebugAppPref) {
    startActivityForResult(new Intent(getActivity(),AppPicker.class),RESULT_DEBUG_APP);
  }
 else   if (preference == mWaitForDebugger) {
    writeDebuggerOptions();
  }
 else   if (preference == mVerifyAppsOverUsb) {
    writeVerifyAppsOverUsbOptions();
  }
 else   if (preference == mStrictMode) {
    writeStrictModeVisualOptions();
  }
 else   if (preference == mPointerLocation) {
    writePointerLocationOptions();
  }
 else   if (preference == mShowTouches) {
    writeShowTouchesOptions();
  }
 else   if (preference == mShowScreenUpdates) {
    writeShowUpdatesOption();
  }
 else   if (preference == mDisableOverlays) {
    writeDisableOverlaysOption();
  }
 else   if (preference == mLowPowerMode) {
    writeLowPowerModeOptions();
  }
 else   if (preference == mShowCpuUsage) {
    writeCpuUsageOptions();
  }
 else   if (preference == mImmediatelyDestroyActivities) {
    writeImmediatelyDestroyActivitiesOptions();
  }
 else   if (preference == mShowAllANRs) {
    writeShowAllANRsOptions();
  }
 else   if (preference == mWebViewDataReductionProxy) {
    writeWebViewDataReductionProxyOptions();
  }
 else   if (preference == mForceHardwareUi) {
    writeHardwareUiOptions();
  }
 else   if (preference == mForceMsaa) {
    writeMsaaOptions();
  }
 else   if (preference == mShowHwScreenUpdates) {
    writeShowHwScreenUpdatesOptions();
  }
 else   if (preference == mShowHwLayersUpdates) {
    writeShowHwLayersUpdatesOptions();
  }
 else   if (preference == mDebugLayout) {
    writeDebugLayoutOptions();
  }
 else   if (preference == mForceRtlLayout) {
    writeForceRtlOptions();
  }
 else   if (preference == mWifiDisplayCertification) {
    writeWifiDisplayCertificationOptions();
  }
 else   if (preference == mWifiVerboseLogging) {
    writeWifiVerboseLoggingOptions();
  }
 else   if (preference == mUseNuplayer) {
    writeUseNuplayerOptions();
  }
 else {
    return super.onPreferenceTreeClick(preferenceScreen,preference);
  }
  return false;
}
