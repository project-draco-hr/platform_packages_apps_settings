{
  super.onCreate(icicle);
  mHandler=new Handler(getMainLooper());
  mDPM=(DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);
  mAppOps=(AppOpsManager)getSystemService(Context.APP_OPS_SERVICE);
  PackageManager packageManager=getPackageManager();
  if ((getIntent().getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0) {
    Log.w(TAG,"Cannot start ADD_DEVICE_ADMIN as a new task");
    finish();
    return;
  }
  String action=getIntent().getAction();
  ComponentName who=(ComponentName)getIntent().getParcelableExtra(DevicePolicyManager.EXTRA_DEVICE_ADMIN);
  if (who == null) {
    Log.w(TAG,"No component specified in " + action);
    finish();
    return;
  }
  if (action != null && action.equals(DevicePolicyManager.ACTION_SET_PROFILE_OWNER)) {
    setResult(RESULT_CANCELED);
    setFinishOnTouchOutside(true);
    mAddingProfileOwner=true;
    mProfileOwnerName=getIntent().getStringExtra(DevicePolicyManager.EXTRA_PROFILE_OWNER_NAME);
    String callingPackage=getCallingPackage();
    if (callingPackage == null || !callingPackage.equals(who.getPackageName())) {
      Log.e(TAG,"Unknown or incorrect caller");
      finish();
      return;
    }
    try {
      PackageInfo packageInfo=packageManager.getPackageInfo(callingPackage,0);
      if ((packageInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) == 0) {
        Log.e(TAG,"Cannot set a non-system app as a profile owner");
        finish();
        return;
      }
    }
 catch (    NameNotFoundException nnfe) {
      Log.e(TAG,"Cannot find the package " + callingPackage);
      finish();
      return;
    }
  }
  ActivityInfo ai;
  try {
    ai=packageManager.getReceiverInfo(who,PackageManager.GET_META_DATA);
  }
 catch (  PackageManager.NameNotFoundException e) {
    Log.w(TAG,"Unable to retrieve device policy " + who,e);
    finish();
    return;
  }
  if (!mDPM.isAdminActive(who)) {
    List<ResolveInfo> avail=packageManager.queryBroadcastReceivers(new Intent(DeviceAdminReceiver.ACTION_DEVICE_ADMIN_ENABLED),PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS);
    int count=avail == null ? 0 : avail.size();
    boolean found=false;
    for (int i=0; i < count; i++) {
      ResolveInfo ri=avail.get(i);
      if (ai.packageName.equals(ri.activityInfo.packageName) && ai.name.equals(ri.activityInfo.name)) {
        try {
          ri.activityInfo=ai;
          DeviceAdminInfo dpi=new DeviceAdminInfo(this,ri);
          found=true;
        }
 catch (        XmlPullParserException e) {
          Log.w(TAG,"Bad " + ri.activityInfo,e);
        }
catch (        IOException e) {
          Log.w(TAG,"Bad " + ri.activityInfo,e);
        }
        break;
      }
    }
    if (!found) {
      Log.w(TAG,"Request to add invalid device admin: " + who);
      finish();
      return;
    }
  }
  ResolveInfo ri=new ResolveInfo();
  ri.activityInfo=ai;
  try {
    mDeviceAdmin=new DeviceAdminInfo(this,ri);
  }
 catch (  XmlPullParserException e) {
    Log.w(TAG,"Unable to retrieve device policy " + who,e);
    finish();
    return;
  }
catch (  IOException e) {
    Log.w(TAG,"Unable to retrieve device policy " + who,e);
    finish();
    return;
  }
  if (DevicePolicyManager.ACTION_ADD_DEVICE_ADMIN.equals(getIntent().getAction())) {
    mRefreshing=false;
    if (mDPM.isAdminActive(who)) {
      ArrayList<DeviceAdminInfo.PolicyInfo> newPolicies=mDeviceAdmin.getUsedPolicies();
      for (int i=0; i < newPolicies.size(); i++) {
        DeviceAdminInfo.PolicyInfo pi=newPolicies.get(i);
        if (!mDPM.hasGrantedPolicy(who,pi.ident)) {
          mRefreshing=true;
          break;
        }
      }
      if (!mRefreshing) {
        setResult(Activity.RESULT_OK);
        finish();
        return;
      }
    }
  }
  if (mAddingProfileOwner && !mDPM.hasUserSetupCompleted()) {
    addAndFinish();
    return;
  }
  mAddMsgText=getIntent().getCharSequenceExtra(DevicePolicyManager.EXTRA_ADD_EXPLANATION);
  setContentView(R.layout.device_admin_add);
  mAdminIcon=(ImageView)findViewById(R.id.admin_icon);
  mAdminName=(TextView)findViewById(R.id.admin_name);
  mAdminDescription=(TextView)findViewById(R.id.admin_description);
  mProfileOwnerWarning=(TextView)findViewById(R.id.profile_owner_warning);
  mAddMsg=(TextView)findViewById(R.id.add_msg);
  mAddMsgExpander=(ImageView)findViewById(R.id.add_msg_expander);
  final View.OnClickListener onClickListener=new View.OnClickListener(){
    @Override public void onClick(    View v){
      toggleMessageEllipsis(mAddMsg);
    }
  }
;
  mAddMsgExpander.setOnClickListener(onClickListener);
  mAddMsg.setOnClickListener(onClickListener);
  mAddMsg.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener(){
    @Override public void onGlobalLayout(){
      final int maxLines=getEllipsizedLines();
      boolean hideMsgExpander=mAddMsg.getLineCount() <= maxLines;
      mAddMsgExpander.setVisibility(hideMsgExpander ? View.GONE : View.VISIBLE);
      if (hideMsgExpander) {
        mAddMsg.setOnClickListener(null);
        ((View)mAddMsgExpander.getParent()).invalidate();
      }
      mAddMsg.getViewTreeObserver().removeOnGlobalLayoutListener(this);
    }
  }
);
  toggleMessageEllipsis(mAddMsg);
  mAdminWarning=(TextView)findViewById(R.id.admin_warning);
  mAdminPolicies=(ViewGroup)findViewById(R.id.admin_policies);
  mCancelButton=(Button)findViewById(R.id.cancel_button);
  mCancelButton.setFilterTouchesWhenObscured(true);
  mCancelButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      EventLog.writeEvent(EventLogTags.EXP_DET_DEVICE_ADMIN_DECLINED_BY_USER,mDeviceAdmin.getActivityInfo().applicationInfo.uid);
      finish();
    }
  }
);
  mActionButton=(Button)findViewById(R.id.action_button);
  mActionButton.setFilterTouchesWhenObscured(true);
  mActionButton.setOnClickListener(new View.OnClickListener(){
    public void onClick(    View v){
      if (mAdding) {
        addAndFinish();
      }
 else       if (!mWaitingForRemoveMsg) {
        try {
          ActivityManagerNative.getDefault().stopAppSwitches();
        }
 catch (        RemoteException e) {
        }
        mWaitingForRemoveMsg=true;
        mDPM.getRemoveWarning(mDeviceAdmin.getComponent(),new RemoteCallback(mHandler){
          @Override protected void onResult(          Bundle bundle){
            CharSequence msg=bundle != null ? bundle.getCharSequence(DeviceAdminReceiver.EXTRA_DISABLE_WARNING) : null;
            continueRemoveAction(msg);
          }
        }
);
        getWindow().getDecorView().getHandler().postDelayed(new Runnable(){
          @Override public void run(){
            continueRemoveAction(null);
          }
        }
,2 * 1000);
      }
    }
  }
);
}
