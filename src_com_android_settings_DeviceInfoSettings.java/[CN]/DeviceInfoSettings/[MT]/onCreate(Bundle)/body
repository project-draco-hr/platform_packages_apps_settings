{
  super.onCreate(icicle);
  addPreferencesFromResource(R.xml.device_info_settings);
  setStringSummary(KEY_FIRMWARE_VERSION,Build.VERSION.RELEASE);
  findPreference(KEY_FIRMWARE_VERSION).setEnabled(true);
  String patch=Build.VERSION.SECURITY_PATCH;
  if (!"".equals(patch)) {
    try {
      SimpleDateFormat template=new SimpleDateFormat("yyyy-MM-dd");
      Date patchDate=template.parse(patch);
      String format=DateFormat.getBestDateTimePattern(Locale.getDefault(),"dMMMMyyyy");
      patch=DateFormat.format(format,patchDate).toString();
    }
 catch (    ParseException e) {
    }
    setStringSummary(KEY_SECURITY_PATCH,patch);
  }
 else {
    getPreferenceScreen().removePreference(findPreference(KEY_SECURITY_PATCH));
  }
  setValueSummary(KEY_BASEBAND_VERSION,"gsm.version.baseband");
  setStringSummary(KEY_DEVICE_MODEL,Build.MODEL + getMsvSuffix());
  setValueSummary(KEY_EQUIPMENT_ID,PROPERTY_EQUIPMENT_ID);
  setStringSummary(KEY_DEVICE_MODEL,Build.MODEL);
  setStringSummary(KEY_BUILD_NUMBER,Build.DISPLAY);
  findPreference(KEY_BUILD_NUMBER).setEnabled(true);
  findPreference(KEY_KERNEL_VERSION).setSummary(getFormattedKernelVersion());
  if (!SELinux.isSELinuxEnabled()) {
    String status=getResources().getString(R.string.selinux_status_disabled);
    setStringSummary(KEY_SELINUX_STATUS,status);
  }
 else   if (!SELinux.isSELinuxEnforced()) {
    String status=getResources().getString(R.string.selinux_status_permissive);
    setStringSummary(KEY_SELINUX_STATUS,status);
  }
  removePreferenceIfPropertyMissing(getPreferenceScreen(),KEY_SELINUX_STATUS,PROPERTY_SELINUX_STATUS);
  removePreferenceIfPropertyMissing(getPreferenceScreen(),KEY_SAFETY_LEGAL,PROPERTY_URL_SAFETYLEGAL);
  removePreferenceIfPropertyMissing(getPreferenceScreen(),KEY_EQUIPMENT_ID,PROPERTY_EQUIPMENT_ID);
  if (Utils.isWifiOnly(getActivity())) {
    getPreferenceScreen().removePreference(findPreference(KEY_BASEBAND_VERSION));
  }
  if (TextUtils.isEmpty(getFeedbackReporterPackage(getActivity()))) {
    getPreferenceScreen().removePreference(findPreference(KEY_DEVICE_FEEDBACK));
  }
  final Activity act=getActivity();
  PreferenceGroup parentPreference=getPreferenceScreen();
  if (UserHandle.myUserId() == UserHandle.USER_OWNER) {
    Utils.updatePreferenceToSpecificActivityOrRemove(act,parentPreference,KEY_SYSTEM_UPDATE_SETTINGS,Utils.UPDATE_PREFERENCE_FLAG_SET_TITLE_TO_MATCHING_ACTIVITY);
  }
 else {
    removePreference(KEY_SYSTEM_UPDATE_SETTINGS);
  }
  removePreferenceIfBoolFalse(KEY_UPDATE_SETTING,R.bool.config_additional_system_update_setting_enable);
  removePreferenceIfBoolFalse(KEY_MANUAL,R.bool.config_show_manual);
  final Intent intent=new Intent(Settings.ACTION_SHOW_REGULATORY_INFO);
  if (getPackageManager().queryIntentActivities(intent,0).isEmpty()) {
    Preference pref=findPreference(KEY_REGULATORY_INFO);
    if (pref != null) {
      getPreferenceScreen().removePreference(pref);
    }
  }
}
