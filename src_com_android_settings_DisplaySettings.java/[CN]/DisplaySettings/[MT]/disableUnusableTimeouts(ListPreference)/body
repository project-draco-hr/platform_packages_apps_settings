{
  final DevicePolicyManager dpm=(DevicePolicyManager)getActivity().getSystemService(Context.DEVICE_POLICY_SERVICE);
  final long maxTimeout=dpm != null ? dpm.getMaximumTimeToLock(null) : 0;
  if (maxTimeout == 0) {
    return;
  }
  final CharSequence[] entries=screenTimeoutPreference.getEntries();
  final CharSequence[] values=screenTimeoutPreference.getEntryValues();
  ArrayList<CharSequence> revisedEntries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> revisedValues=new ArrayList<CharSequence>();
  for (int i=0; i < values.length; i++) {
    long timeout=Long.parseLong(values[i].toString());
    if (timeout <= maxTimeout) {
      revisedEntries.add(entries[i]);
      revisedValues.add(values[i]);
    }
  }
  if (revisedEntries.size() != entries.length || revisedValues.size() != values.length) {
    final int userPreference=Integer.parseInt(screenTimeoutPreference.getValue());
    screenTimeoutPreference.setEntries(revisedEntries.toArray(new CharSequence[revisedEntries.size()]));
    screenTimeoutPreference.setEntryValues(revisedValues.toArray(new CharSequence[revisedValues.size()]));
    if (userPreference <= maxTimeout) {
      screenTimeoutPreference.setValue(String.valueOf(userPreference));
    }
 else     if (revisedValues.size() > 0 && Long.parseLong(revisedValues.get(revisedValues.size() - 1).toString()) == maxTimeout) {
      screenTimeoutPreference.setValue(String.valueOf(maxTimeout));
    }
 else {
    }
  }
  screenTimeoutPreference.setEnabled(revisedEntries.size() > 0);
}
