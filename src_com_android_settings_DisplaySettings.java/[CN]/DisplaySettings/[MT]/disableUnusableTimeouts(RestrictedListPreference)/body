{
  final EnforcedAdmin admin=RestrictedLockUtils.checkIfMaximumTimeToLockIsSet(getActivity());
  if (admin == null) {
    return;
  }
  final DevicePolicyManager dpm=(DevicePolicyManager)getActivity().getSystemService(Context.DEVICE_POLICY_SERVICE);
  if (dpm == null) {
    return;
  }
  final long maxTimeout=dpm.getMaximumTimeToLock(null);
  final CharSequence[] entries=screenTimeoutPreference.getEntries();
  final CharSequence[] values=screenTimeoutPreference.getEntryValues();
  long maxTimeoutSelectable=0;
  int maxTimeoutEntryIndex=-1;
  for (int i=0; i < values.length; i++) {
    long timeout=Long.parseLong(values[i].toString());
    if (timeout > maxTimeout) {
      break;
    }
    maxTimeoutSelectable=timeout;
    maxTimeoutEntryIndex=i;
  }
  if (maxTimeoutSelectable == 0) {
    screenTimeoutPreference.setDisabledByAdmin(admin);
    return;
  }
 else {
    screenTimeoutPreference.setDisabledByAdmin(null);
  }
  screenTimeoutPreference.clearRestrictedItems();
  for (int i=maxTimeoutEntryIndex + 1; i < values.length; i++) {
    screenTimeoutPreference.addRestrictedItem(new RestrictedItem(entries[i],values[i],admin));
  }
  final int userPreference=Integer.parseInt(screenTimeoutPreference.getValue());
  if (userPreference <= maxTimeout) {
    screenTimeoutPreference.setValue(String.valueOf(userPreference));
  }
 else   if (maxTimeoutSelectable == maxTimeout) {
    screenTimeoutPreference.setValue(String.valueOf(maxTimeout));
  }
 else {
  }
}
