{
  super.onCreate(savedInstanceState);
  final Activity activity=getActivity();
  final ContentResolver resolver=activity.getContentResolver();
  addPreferencesFromResource(R.xml.display_settings);
  mScreenSaverPreference=findPreference(KEY_SCREEN_SAVER);
  if (mScreenSaverPreference != null && getResources().getBoolean(com.android.internal.R.bool.config_dreamsSupported) == false) {
    getPreferenceScreen().removePreference(mScreenSaverPreference);
  }
  mScreenTimeoutPreference=(RestrictedListPreference)findPreference(KEY_SCREEN_TIMEOUT);
  mFontSizePref=(DropDownPreference)findPreference(KEY_FONT_SIZE);
  mFontSizePref.setOnPreferenceChangeListener(this);
  if (isAutomaticBrightnessAvailable(getResources())) {
    mAutoBrightnessPreference=(SwitchPreference)findPreference(KEY_AUTO_BRIGHTNESS);
    mAutoBrightnessPreference.setOnPreferenceChangeListener(this);
  }
 else {
    removePreference(KEY_AUTO_BRIGHTNESS);
  }
  if (isLiftToWakeAvailable(activity)) {
    mLiftToWakePreference=(SwitchPreference)findPreference(KEY_LIFT_TO_WAKE);
    mLiftToWakePreference.setOnPreferenceChangeListener(this);
  }
 else {
    removePreference(KEY_LIFT_TO_WAKE);
  }
  if (isDozeAvailable(activity)) {
    mDozePreference=(SwitchPreference)findPreference(KEY_DOZE);
    mDozePreference.setOnPreferenceChangeListener(this);
  }
 else {
    removePreference(KEY_DOZE);
  }
  if (isTapToWakeAvailable(getResources())) {
    mTapToWakePreference=(SwitchPreference)findPreference(KEY_TAP_TO_WAKE);
    mTapToWakePreference.setOnPreferenceChangeListener(this);
  }
 else {
    removePreference(KEY_TAP_TO_WAKE);
  }
  if (isCameraGestureAvailable(getResources())) {
    mCameraGesturePreference=(SwitchPreference)findPreference(KEY_CAMERA_GESTURE);
    mCameraGesturePreference.setOnPreferenceChangeListener(this);
  }
 else {
    removePreference(KEY_CAMERA_GESTURE);
  }
  if (isCameraDoubleTapPowerGestureAvailable(getResources())) {
    mCameraDoubleTapPowerGesturePreference=(SwitchPreference)findPreference(KEY_CAMERA_DOUBLE_TAP_POWER_GESTURE);
    mCameraDoubleTapPowerGesturePreference.setOnPreferenceChangeListener(this);
  }
 else {
    removePreference(KEY_CAMERA_DOUBLE_TAP_POWER_GESTURE);
  }
  if (RotationPolicy.isRotationLockToggleVisible(activity)) {
    DropDownPreference rotatePreference=(DropDownPreference)findPreference(KEY_AUTO_ROTATE);
    int rotateLockedResourceId;
    if (allowAllRotations(activity)) {
      rotateLockedResourceId=R.string.display_auto_rotate_stay_in_current;
    }
 else {
      if (RotationPolicy.getRotationLockOrientation(activity) == Configuration.ORIENTATION_PORTRAIT) {
        rotateLockedResourceId=R.string.display_auto_rotate_stay_in_portrait;
      }
 else {
        rotateLockedResourceId=R.string.display_auto_rotate_stay_in_landscape;
      }
    }
    rotatePreference.setEntries(new CharSequence[]{activity.getString(R.string.display_auto_rotate_rotate),activity.getString(rotateLockedResourceId)});
    rotatePreference.setEntryValues(new CharSequence[]{"0","1"});
    rotatePreference.setValueIndex(RotationPolicy.isRotationLocked(activity) ? 1 : 0);
    rotatePreference.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      Preference preference,      Object newValue){
        final boolean locked=Integer.parseInt((String)newValue) != 0;
        MetricsLogger.action(getActivity(),MetricsLogger.ACTION_ROTATION_LOCK,locked);
        RotationPolicy.setRotationLock(activity,locked);
        return true;
      }
    }
);
  }
 else {
    removePreference(KEY_AUTO_ROTATE);
  }
  mNightModePreference=(ListPreference)findPreference(KEY_NIGHT_MODE);
  if (mNightModePreference != null) {
    final UiModeManager uiManager=(UiModeManager)getSystemService(Context.UI_MODE_SERVICE);
    final int currentNightMode=uiManager.getNightMode();
    mNightModePreference.setValue(String.valueOf(currentNightMode));
    mNightModePreference.setOnPreferenceChangeListener(this);
  }
}
