{
switch (dialogId) {
case ACCESSIBILITY_WARNING_DIALOG:
{
      final int quality=new LockPatternUtils(getActivity()).getKeyguardStoredPasswordQuality(UserHandle.myUserId());
      final int titleId;
      final int messageId;
switch (quality) {
case DevicePolicyManager.PASSWORD_QUALITY_SOMETHING:
        titleId=R.string.encrypt_talkback_dialog_require_pattern;
      messageId=R.string.encrypt_talkback_dialog_message_pattern;
    break;
case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC:
case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC_COMPLEX:
  titleId=R.string.encrypt_talkback_dialog_require_pin;
messageId=R.string.encrypt_talkback_dialog_message_pin;
break;
default :
titleId=R.string.encrypt_talkback_dialog_require_password;
messageId=R.string.encrypt_talkback_dialog_message_password;
break;
}
List<AccessibilityServiceInfo> list=AccessibilityManager.getInstance(getActivity()).getEnabledAccessibilityServiceList(AccessibilityServiceInfo.FEEDBACK_ALL_MASK);
final CharSequence exampleAccessibility;
if (list.isEmpty()) {
exampleAccessibility="";
}
 else {
exampleAccessibility=list.get(0).getResolveInfo().loadLabel(getPackageManager());
}
return new AlertDialog.Builder(getActivity()).setTitle(titleId).setMessage(getString(messageId,exampleAccessibility)).setCancelable(true).setPositiveButton(android.R.string.ok,this).setNegativeButton(android.R.string.cancel,this).create();
}
default :
throw new IllegalArgumentException();
}
}
