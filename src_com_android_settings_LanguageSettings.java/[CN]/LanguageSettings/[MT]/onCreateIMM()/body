{
  InputMethodManager imm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
  mInputMethodProperties=imm.getInputMethodList();
  mLastInputMethodId=Settings.Secure.getString(getContentResolver(),Settings.Secure.DEFAULT_INPUT_METHOD);
  PreferenceGroup keyboardSettingsCategory=(PreferenceGroup)findPreference(KEY_KEYBOARD_SETTINGS_CATEGORY);
  int N=(mInputMethodProperties == null ? 0 : mInputMethodProperties.size());
  for (int i=0; i < N; ++i) {
    InputMethodInfo property=mInputMethodProperties.get(i);
    String prefKey=property.getId();
    CharSequence label=property.loadLabel(getActivity().getPackageManager());
    boolean systemIME=isSystemIme(property);
    if (mHaveHardKeyboard || (N > 1 && !systemIME)) {
      CheckBoxPreference chkbxPref=new CheckBoxPreference(getActivity());
      chkbxPref.setKey(prefKey);
      chkbxPref.setTitle(label);
      keyboardSettingsCategory.addPreference(chkbxPref);
      mCheckboxes.add(chkbxPref);
    }
    if (null != property.getSettingsActivity()) {
      PreferenceScreen prefScreen=new PreferenceScreen(getActivity(),null);
      String settingsActivity=property.getSettingsActivity();
      if (settingsActivity.lastIndexOf("/") < 0) {
        settingsActivity=property.getPackageName() + "/" + settingsActivity;
      }
      prefScreen.setKey(settingsActivity);
      prefScreen.setTitle(label);
      if (N == 1) {
        prefScreen.setSummary(getResources().getString(R.string.onscreen_keyboard_settings_summary));
      }
 else {
        CharSequence settingsLabel=getResources().getString(R.string.input_methods_settings_label_format,label);
        prefScreen.setSummary(settingsLabel);
      }
      keyboardSettingsCategory.addPreference(prefScreen);
    }
  }
}
