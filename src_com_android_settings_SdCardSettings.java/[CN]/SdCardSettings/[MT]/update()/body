{
  try {
    String path=Environment.getExternalStorageDirectory().getPath();
    mMassStorage.setChecked(mMountService.getVolumeShared(Environment.getExternalStorageDirectory().getPath(),"ums"));
  }
 catch (  Exception ex) {
  }
  String status=Environment.getExternalStorageState();
  boolean readOnly=false;
  if (status.equals(Environment.MEDIA_MOUNTED_READ_ONLY)) {
    status=Environment.MEDIA_MOUNTED;
    readOnly=true;
  }
  if (status.equals(Environment.MEDIA_MOUNTED)) {
    try {
      File path=Environment.getExternalStorageDirectory();
      StatFs stat=new StatFs(path.getPath());
      long blockSize=stat.getBlockSize();
      long totalBlocks=stat.getBlockCount();
      long availableBlocks=stat.getAvailableBlocks();
      mTotalSize.setText(formatSize(totalBlocks * blockSize));
      mUsedSize.setText(formatSize((totalBlocks - availableBlocks) * blockSize));
      mAvailableSize.setText(formatSize(availableBlocks * blockSize));
    }
 catch (    IllegalArgumentException e) {
      status=Environment.MEDIA_REMOVED;
    }
    mReadOnlyStatus.setVisibility(readOnly ? View.VISIBLE : View.GONE);
    setLayout(mMountedLayout);
  }
 else   if (status.equals(Environment.MEDIA_UNMOUNTED)) {
    setLayout(mUnmountedLayout);
  }
 else   if (status.equals(Environment.MEDIA_REMOVED)) {
    setLayout(mRemovedLayout);
  }
 else   if (status.equals(Environment.MEDIA_SHARED)) {
    setLayout(mSharedLayout);
  }
 else   if (status.equals(Environment.MEDIA_BAD_REMOVAL)) {
    setLayout(mBadRemovalLayout);
  }
}
