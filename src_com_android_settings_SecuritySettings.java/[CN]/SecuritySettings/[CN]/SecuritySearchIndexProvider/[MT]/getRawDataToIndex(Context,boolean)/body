{
  final List<SearchIndexableRaw> result=new ArrayList<SearchIndexableRaw>();
  final Resources res=context.getResources();
  final String screenTitle=res.getString(R.string.security_settings_title);
  SearchIndexableRaw data=new SearchIndexableRaw(context);
  data.title=screenTitle;
  data.screenTitle=screenTitle;
  result.add(data);
  final UserManager um=UserManager.get(context);
  if (!um.isAdminUser()) {
    int resId=um.isLinkedUser() ? R.string.profile_info_settings_title : R.string.user_info_settings_title;
    data=new SearchIndexableRaw(context);
    data.title=res.getString(resId);
    data.screenTitle=screenTitle;
    result.add(data);
  }
  FingerprintManager fpm=(FingerprintManager)context.getSystemService(Context.FINGERPRINT_SERVICE);
  if (fpm != null && fpm.isHardwareDetected()) {
    data=new SearchIndexableRaw(context);
    data.title=res.getString(R.string.security_settings_fingerprint_preference_title);
    data.screenTitle=screenTitle;
    result.add(data);
    data=new SearchIndexableRaw(context);
    data.title=res.getString(R.string.fingerprint_manage_category_title);
    data.screenTitle=screenTitle;
    result.add(data);
  }
  final LockPatternUtils lockPatternUtils=new LockPatternUtils(context);
  final int profileUserId=Utils.getManagedProfileId(um,MY_USER_ID);
  if (profileUserId != UserHandle.USER_NULL && lockPatternUtils.isSeparateProfileChallengeAllowed(profileUserId)) {
    if (lockPatternUtils.getKeyguardStoredPasswordQuality(profileUserId) >= DevicePolicyManager.PASSWORD_QUALITY_SOMETHING && lockPatternUtils.isSeparateProfileChallengeAllowedToUnify(profileUserId)) {
      data=new SearchIndexableRaw(context);
      data.title=res.getString(R.string.lock_settings_profile_unification_title);
      data.screenTitle=screenTitle;
      result.add(data);
    }
  }
  if (!um.hasUserRestriction(UserManager.DISALLOW_CONFIG_CREDENTIALS)) {
    KeyStore keyStore=KeyStore.getInstance();
    final int storageSummaryRes=keyStore.isHardwareBacked() ? R.string.credential_storage_type_hardware : R.string.credential_storage_type_software;
    data=new SearchIndexableRaw(context);
    data.title=res.getString(storageSummaryRes);
    data.screenTitle=screenTitle;
    result.add(data);
  }
  if (lockPatternUtils.isSecure(MY_USER_ID)) {
    ArrayList<TrustAgentComponentInfo> agents=getActiveTrustAgents(context,lockPatternUtils,context.getSystemService(DevicePolicyManager.class));
    for (int i=0; i < agents.size(); i++) {
      final TrustAgentComponentInfo agent=agents.get(i);
      data=new SearchIndexableRaw(context);
      data.title=agent.title;
      data.screenTitle=screenTitle;
      result.add(data);
    }
  }
  return result;
}
