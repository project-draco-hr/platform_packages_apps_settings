{
  List<SearchIndexableResource> result=new ArrayList<SearchIndexableResource>();
  LockPatternUtils lockPatternUtils=new LockPatternUtils(context);
  int resId=getResIdForLockUnlockScreen(context,lockPatternUtils);
  SearchIndexableResource sir=new SearchIndexableResource(context);
  sir.xmlResId=resId;
  result.add(sir);
  final UserManager um=UserManager.get(context);
  List<UserInfo> profiles=um.getProfiles(UserHandle.myUserId());
  int numProfiles=profiles.size();
  if (numProfiles > 1) {
    int profileUserId=-1;
    for (int i=0; i < numProfiles; ++i) {
      UserInfo profile=profiles.get(i);
      if (profile.id != UserHandle.myUserId()) {
        profileUserId=profile.id;
      }
    }
    if (lockPatternUtils.isSeparateProfileChallengeAllowed(profileUserId)) {
      sir=new SearchIndexableResource(context);
      sir.xmlResId=R.xml.security_settings_profile;
      result.add(sir);
    }
  }
  if (um.isAdminUser()) {
    DevicePolicyManager dpm=(DevicePolicyManager)context.getSystemService(Context.DEVICE_POLICY_SERVICE);
switch (dpm.getStorageEncryptionStatus()) {
case DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE:
      resId=R.xml.security_settings_encrypted;
    break;
case DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE:
  resId=R.xml.security_settings_unencrypted;
break;
}
sir=new SearchIndexableResource(context);
sir.xmlResId=resId;
result.add(sir);
}
sir=new SearchIndexableResource(context);
sir.xmlResId=R.xml.security_settings_misc;
result.add(sir);
return result;
}
