{
  List<SearchIndexableResource> result=new ArrayList<SearchIndexableResource>();
  LockPatternUtils lockPatternUtils=new LockPatternUtils(context);
  int resId=getResIdForLockUnlockScreen(context,lockPatternUtils,MY_USER_ID);
  SearchIndexableResource sir=new SearchIndexableResource(context);
  sir.xmlResId=resId;
  result.add(sir);
  final UserManager um=UserManager.get(context);
  final int profileUserId=Utils.getManagedProfileId(um,MY_USER_ID);
  if (profileUserId != UserHandle.USER_NULL && lockPatternUtils.isSeparateProfileChallengeAllowed(profileUserId)) {
    sir=new SearchIndexableResource(context);
    sir.xmlResId=getResIdForLockUnlockScreen(context,lockPatternUtils,profileUserId);
    result.add(sir);
  }
  if (um.isAdminUser()) {
    DevicePolicyManager dpm=(DevicePolicyManager)context.getSystemService(Context.DEVICE_POLICY_SERVICE);
switch (dpm.getStorageEncryptionStatus()) {
case DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE:
      resId=R.xml.security_settings_encrypted;
    break;
case DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE:
  resId=R.xml.security_settings_unencrypted;
break;
}
sir=new SearchIndexableResource(context);
sir.xmlResId=resId;
result.add(sir);
}
sir=new SearchIndexableResource(context);
sir.xmlResId=SecuritySubSettings.getResIdForLockUnlockSubScreen(context,lockPatternUtils);
sir.className=SecuritySubSettings.class.getName();
result.add(sir);
sir=new SearchIndexableResource(context);
sir.xmlResId=R.xml.security_settings_misc;
result.add(sir);
return result;
}
