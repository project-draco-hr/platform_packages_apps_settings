{
  final List<SearchIndexableResource> index=new ArrayList<SearchIndexableResource>();
  final LockPatternUtils lockPatternUtils=new LockPatternUtils(context);
  final EnforcedAdmin admin=RestrictedLockUtils.checkIfPasswordQualityIsSet(context,MY_USER_ID);
  final DevicePolicyManager dpm=(DevicePolicyManager)context.getSystemService(Context.DEVICE_POLICY_SERVICE);
  final UserManager um=UserManager.get(context);
  if (admin == null || dpm.getPasswordQuality(admin.component) != DevicePolicyManager.PASSWORD_QUALITY_MANAGED) {
    final int resId=getResIdForLockUnlockScreen(context,lockPatternUtils,MY_USER_ID);
    index.add(getSearchResource(context,resId));
  }
  final int profileUserId=Utils.getManagedProfileId(um,MY_USER_ID);
  if (profileUserId != UserHandle.USER_NULL && lockPatternUtils.isSeparateProfileChallengeAllowed(profileUserId)) {
    index.add(getSearchResource(context,getResIdForLockUnlockScreen(context,lockPatternUtils,profileUserId)));
  }
  if (um.isAdminUser()) {
switch (dpm.getStorageEncryptionStatus()) {
case DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE:
      index.add(getSearchResource(context,R.xml.security_settings_encrypted));
    break;
case DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE:
  index.add(getSearchResource(context,R.xml.security_settings_unencrypted));
break;
}
}
final SearchIndexableResource sir=getSearchResource(context,SecuritySubSettings.getResIdForLockUnlockSubScreen(context,lockPatternUtils));
sir.className=SecuritySubSettings.class.getName();
index.add(sir);
index.add(getSearchResource(context,R.xml.security_settings_misc));
return index;
}
