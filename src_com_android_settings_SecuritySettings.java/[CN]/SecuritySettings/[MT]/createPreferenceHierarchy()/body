{
  PreferenceScreen root=getPreferenceScreen();
  if (root != null) {
    root.removeAll();
  }
  addPreferencesFromResource(R.xml.security_settings);
  root=getPreferenceScreen();
  final int resid=getResIdForLockUnlockScreen(getActivity(),mLockPatternUtils);
  addPreferencesFromResource(resid);
  List<UserInfo> profiles=mUm.getProfiles(UserHandle.myUserId());
  int numProfiles=profiles.size();
  if (numProfiles > 1) {
    for (int i=0; i < numProfiles; ++i) {
      UserInfo profile=profiles.get(i);
      if (profile.id != UserHandle.myUserId()) {
        mProfileChallengeUserId=profile.id;
      }
    }
    if (LockPatternUtils.isSeparateWorkChallengeEnabled()) {
      addPreferencesFromResource(R.xml.security_settings_profile);
    }
  }
  mIsAdmin=mUm.isAdminUser();
  mOwnerInfoPref=findPreference(KEY_OWNER_INFO_SETTINGS);
  if (mOwnerInfoPref != null) {
    mOwnerInfoPref.setEnabled(!mLockPatternUtils.isLockScreenDisabled(MY_USER_ID) && !mLockPatternUtils.isDeviceOwnerInfoEnabled());
    if (mOwnerInfoPref.isEnabled()) {
      mOwnerInfoPref.setOnPreferenceClickListener(new OnPreferenceClickListener(){
        @Override public boolean onPreferenceClick(        Preference preference){
          OwnerInfoSettings.show(SecuritySettings.this);
          return true;
        }
      }
);
    }
  }
  if (mIsAdmin) {
    if (LockPatternUtils.isDeviceEncryptionEnabled()) {
      addPreferencesFromResource(R.xml.security_settings_encrypted);
    }
 else {
      addPreferencesFromResource(R.xml.security_settings_unencrypted);
    }
  }
  PreferenceGroup securityCategory=(PreferenceGroup)root.findPreference(KEY_SECURITY_CATEGORY);
  if (securityCategory != null) {
    maybeAddFingerprintPreference(securityCategory);
    addTrustAgentSettings(securityCategory);
  }
  mLockAfter=(ListPreference)root.findPreference(KEY_LOCK_AFTER_TIMEOUT);
  if (mLockAfter != null) {
    setupLockAfterPreference();
    updateLockAfterPreferenceSummary();
  }
  mVisiblePattern=(SwitchPreference)root.findPreference(KEY_VISIBLE_PATTERN);
  mPowerButtonInstantlyLocks=(SwitchPreference)root.findPreference(KEY_POWER_INSTANTLY_LOCKS);
  Preference trustAgentPreference=root.findPreference(KEY_TRUST_AGENT);
  if (mPowerButtonInstantlyLocks != null && trustAgentPreference != null && trustAgentPreference.getTitle().length() > 0) {
    mPowerButtonInstantlyLocks.setSummary(getString(R.string.lockpattern_settings_power_button_instantly_locks_summary,trustAgentPreference.getTitle()));
  }
  addPreferencesFromResource(R.xml.security_settings_misc);
  TelephonyManager tm=TelephonyManager.getDefault();
  CarrierConfigManager cfgMgr=(CarrierConfigManager)getActivity().getSystemService(Context.CARRIER_CONFIG_SERVICE);
  PersistableBundle b=cfgMgr.getConfig();
  if (!mIsAdmin || !isSimIccReady() || b.getBoolean(CarrierConfigManager.KEY_HIDE_SIM_LOCK_SETTINGS_BOOL)) {
    root.removePreference(root.findPreference(KEY_SIM_LOCK));
  }
 else {
    root.findPreference(KEY_SIM_LOCK).setEnabled(isSimReady());
  }
  if (Settings.System.getInt(getContentResolver(),Settings.System.LOCK_TO_APP_ENABLED,0) != 0) {
    root.findPreference(KEY_SCREEN_PINNING).setSummary(getResources().getString(R.string.switch_on_text));
  }
  mShowPassword=(SwitchPreference)root.findPreference(KEY_SHOW_PASSWORD);
  mResetCredentials=root.findPreference(KEY_RESET_CREDENTIALS);
  final UserManager um=(UserManager)getActivity().getSystemService(Context.USER_SERVICE);
  mKeyStore=KeyStore.getInstance();
  if (!um.hasUserRestriction(UserManager.DISALLOW_CONFIG_CREDENTIALS)) {
    Preference credentialStorageType=root.findPreference(KEY_CREDENTIAL_STORAGE_TYPE);
    final int storageSummaryRes=mKeyStore.isHardwareBacked() ? R.string.credential_storage_type_hardware : R.string.credential_storage_type_software;
    credentialStorageType.setSummary(storageSummaryRes);
  }
 else {
    PreferenceGroup credentialsManager=(PreferenceGroup)root.findPreference(KEY_CREDENTIALS_MANAGER);
    credentialsManager.removePreference(root.findPreference(KEY_RESET_CREDENTIALS));
    credentialsManager.removePreference(root.findPreference(KEY_CREDENTIALS_INSTALL));
    credentialsManager.removePreference(root.findPreference(KEY_CREDENTIAL_STORAGE_TYPE));
  }
  PreferenceGroup deviceAdminCategory=(PreferenceGroup)root.findPreference(KEY_DEVICE_ADMIN_CATEGORY);
  mToggleAppInstallation=(RestrictedSwitchPreference)findPreference(KEY_TOGGLE_INSTALL_APPLICATIONS);
  mToggleAppInstallation.setChecked(isNonMarketAppsAllowed());
  mToggleAppInstallation.setEnabled(!um.getUserInfo(MY_USER_ID).isRestricted());
  if (mToggleAppInstallation.isEnabled()) {
    mToggleAppInstallation.checkRestrictionAndSetDisabled(UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES);
    if (!mToggleAppInstallation.isDisabledByAdmin()) {
      mToggleAppInstallation.checkRestrictionAndSetDisabled(UserManager.DISALLOW_INSTALL_APPS);
    }
  }
  PreferenceGroup advancedCategory=(PreferenceGroup)root.findPreference(KEY_ADVANCED_SECURITY);
  if (advancedCategory != null) {
    Preference manageAgents=advancedCategory.findPreference(KEY_MANAGE_TRUST_AGENTS);
    if (manageAgents != null && !mLockPatternUtils.isSecure(MY_USER_ID)) {
      manageAgents.setEnabled(false);
      manageAgents.setSummary(R.string.disabled_because_no_backup_security);
    }
  }
  Index.getInstance(getActivity()).updateFromClassNameResource(SecuritySettings.class.getName(),true,true);
  for (int i=0; i < SWITCH_PREFERENCE_KEYS.length; i++) {
    final Preference pref=findPreference(SWITCH_PREFERENCE_KEYS[i]);
    if (pref != null)     pref.setOnPreferenceChangeListener(this);
  }
  return root;
}
