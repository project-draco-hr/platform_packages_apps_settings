{
  PreferenceScreen root=getPreferenceScreen();
  if (root != null) {
    root.removeAll();
  }
  addPreferencesFromResource(R.xml.security_settings);
  root=getPreferenceScreen();
  final int resid=getResIdForLockUnlockScreen(getActivity(),mLockPatternUtils);
  addPreferencesFromResource(resid);
  mIsPrimary=UserHandle.myUserId() == UserHandle.USER_OWNER;
  if (!mIsPrimary) {
    Preference ownerInfoPref=findPreference(KEY_OWNER_INFO_SETTINGS);
    if (ownerInfoPref != null) {
      if (UserManager.get(getActivity()).isLinkedUser()) {
        ownerInfoPref.setTitle(R.string.profile_info_settings_title);
      }
 else {
        ownerInfoPref.setTitle(R.string.user_info_settings_title);
      }
    }
  }
  if (mIsPrimary) {
    if (LockPatternUtils.isDeviceEncryptionEnabled()) {
      addPreferencesFromResource(R.xml.security_settings_encrypted);
    }
 else {
      addPreferencesFromResource(R.xml.security_settings_unencrypted);
    }
  }
  PreferenceGroup securityCategory=(PreferenceGroup)root.findPreference(KEY_SECURITY_CATEGORY);
  if (securityCategory != null) {
    final boolean hasSecurity=mLockPatternUtils.isSecure();
    ArrayList<TrustAgentComponentInfo> agents=getActiveTrustAgents(getPackageManager(),mLockPatternUtils);
    for (int i=0; i < agents.size(); i++) {
      final TrustAgentComponentInfo agent=agents.get(i);
      Preference trustAgentPreference=new Preference(securityCategory.getContext());
      trustAgentPreference.setKey(KEY_TRUST_AGENT);
      trustAgentPreference.setTitle(agent.title);
      trustAgentPreference.setSummary(agent.summary);
      Intent intent=new Intent();
      intent.setComponent(agent.componentName);
      intent.setAction(Intent.ACTION_MAIN);
      trustAgentPreference.setIntent(intent);
      securityCategory.addPreference(trustAgentPreference);
      if (!hasSecurity) {
        trustAgentPreference.setEnabled(false);
        trustAgentPreference.setSummary(R.string.disabled_because_no_backup_security);
      }
    }
  }
  mLockAfter=(ListPreference)root.findPreference(KEY_LOCK_AFTER_TIMEOUT);
  if (mLockAfter != null) {
    setupLockAfterPreference();
    updateLockAfterPreferenceSummary();
  }
  mBiometricWeakLiveliness=(SwitchPreference)root.findPreference(KEY_BIOMETRIC_WEAK_LIVELINESS);
  mVisiblePattern=(SwitchPreference)root.findPreference(KEY_VISIBLE_PATTERN);
  mPowerButtonInstantlyLocks=(SwitchPreference)root.findPreference(KEY_POWER_INSTANTLY_LOCKS);
  Preference trustAgentPreference=root.findPreference(KEY_TRUST_AGENT);
  if (mPowerButtonInstantlyLocks != null && trustAgentPreference != null && trustAgentPreference.getTitle().length() > 0) {
    mPowerButtonInstantlyLocks.setSummary(getString(R.string.lockpattern_settings_power_button_instantly_locks_summary,trustAgentPreference.getTitle()));
  }
  if (resid == R.xml.security_settings_biometric_weak && mLockPatternUtils.getKeyguardStoredPasswordQuality() != DevicePolicyManager.PASSWORD_QUALITY_SOMETHING) {
    if (securityCategory != null && mVisiblePattern != null) {
      securityCategory.removePreference(root.findPreference(KEY_VISIBLE_PATTERN));
    }
  }
  addPreferencesFromResource(R.xml.security_settings_misc);
  TelephonyManager tm=TelephonyManager.getDefault();
  if (!mIsPrimary || !isSimIccReady()) {
    root.removePreference(root.findPreference(KEY_SIM_LOCK));
  }
 else {
    root.findPreference(KEY_SIM_LOCK).setEnabled(isSimReady());
  }
  if (Settings.System.getInt(getContentResolver(),Settings.System.LOCK_TO_APP_ENABLED,0) != 0) {
    root.findPreference(KEY_SCREEN_PINNING).setSummary(getResources().getString(R.string.switch_on_text));
  }
  mShowPassword=(SwitchPreference)root.findPreference(KEY_SHOW_PASSWORD);
  mResetCredentials=root.findPreference(KEY_RESET_CREDENTIALS);
  final UserManager um=(UserManager)getActivity().getSystemService(Context.USER_SERVICE);
  mKeyStore=KeyStore.getInstance();
  if (!um.hasUserRestriction(UserManager.DISALLOW_CONFIG_CREDENTIALS)) {
    Preference credentialStorageType=root.findPreference(KEY_CREDENTIAL_STORAGE_TYPE);
    final int storageSummaryRes=mKeyStore.isHardwareBacked() ? R.string.credential_storage_type_hardware : R.string.credential_storage_type_software;
    credentialStorageType.setSummary(storageSummaryRes);
  }
 else {
    PreferenceGroup credentialsManager=(PreferenceGroup)root.findPreference(KEY_CREDENTIALS_MANAGER);
    credentialsManager.removePreference(root.findPreference(KEY_RESET_CREDENTIALS));
    credentialsManager.removePreference(root.findPreference(KEY_CREDENTIALS_INSTALL));
    credentialsManager.removePreference(root.findPreference(KEY_CREDENTIAL_STORAGE_TYPE));
  }
  PreferenceGroup deviceAdminCategory=(PreferenceGroup)root.findPreference(KEY_DEVICE_ADMIN_CATEGORY);
  mToggleAppInstallation=(SwitchPreference)findPreference(KEY_TOGGLE_INSTALL_APPLICATIONS);
  mToggleAppInstallation.setChecked(isNonMarketAppsAllowed());
  mToggleAppInstallation.setEnabled(!um.getUserInfo(UserHandle.myUserId()).isRestricted());
  if (um.hasUserRestriction(UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES) || um.hasUserRestriction(UserManager.DISALLOW_INSTALL_APPS)) {
    mToggleAppInstallation.setEnabled(false);
  }
  PreferenceGroup advancedCategory=(PreferenceGroup)root.findPreference(KEY_ADVANCED_SECURITY);
  if (advancedCategory != null) {
    Preference manageAgents=advancedCategory.findPreference(KEY_MANAGE_TRUST_AGENTS);
    if (manageAgents != null && !mLockPatternUtils.isSecure()) {
      manageAgents.setEnabled(false);
      manageAgents.setSummary(R.string.disabled_because_no_backup_security);
    }
  }
  Index.getInstance(getActivity()).updateFromClassNameResource(SecuritySettings.class.getName(),true,true);
  for (int i=0; i < SWITCH_PREFERENCE_KEYS.length; i++) {
    final Preference pref=findPreference(SWITCH_PREFERENCE_KEYS[i]);
    if (pref != null)     pref.setOnPreferenceChangeListener(this);
  }
  return root;
}
