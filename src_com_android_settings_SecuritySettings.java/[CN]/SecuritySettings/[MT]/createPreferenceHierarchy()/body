{
  PreferenceScreen root=this.getPreferenceScreen();
  if (root != null) {
    root.removeAll();
  }
  addPreferencesFromResource(R.xml.security_settings);
  root=this.getPreferenceScreen();
  mNetwork=(CheckBoxPreference)getPreferenceScreen().findPreference(LOCATION_NETWORK);
  mGps=(CheckBoxPreference)getPreferenceScreen().findPreference(LOCATION_GPS);
  mAssistedGps=(CheckBoxPreference)getPreferenceScreen().findPreference(ASSISTED_GPS);
  if (GoogleLocationSettingHelper.isAvailable(getActivity())) {
    PreferenceGroup locationCat=(PreferenceGroup)root.findPreference(LOCATION_CATEGORY);
    CheckBoxPreference useLocation=new CheckBoxPreference(getActivity());
    useLocation.setKey(USE_LOCATION);
    useLocation.setTitle(R.string.use_location_title);
    useLocation.setSummaryOn(R.string.use_location_summary_enabled);
    useLocation.setSummaryOff(R.string.use_location_summary_disabled);
    useLocation.setChecked(GoogleLocationSettingHelper.getUseLocationForServices(getActivity()) == GoogleLocationSettingHelper.USE_LOCATION_FOR_SERVICES_ON);
    useLocation.setPersistent(false);
    useLocation.setOnPreferenceChangeListener(this);
    locationCat.addPreference(useLocation);
    mUseLocation=useLocation;
  }
  PreferenceManager pm=getPreferenceManager();
  if (!mLockPatternUtils.isSecure()) {
    addPreferencesFromResource(R.xml.security_settings_chooser);
  }
 else {
switch (mLockPatternUtils.getKeyguardStoredPasswordQuality()) {
case DevicePolicyManager.PASSWORD_QUALITY_SOMETHING:
      addPreferencesFromResource(R.xml.security_settings_pattern);
    break;
case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC:
  addPreferencesFromResource(R.xml.security_settings_pin);
break;
case DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC:
case DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC:
case DevicePolicyManager.PASSWORD_QUALITY_COMPLEX:
addPreferencesFromResource(R.xml.security_settings_password);
break;
}
}
mLockAfter=setupLockAfterPreference(pm);
mVisiblePattern=(CheckBoxPreference)pm.findPreference(KEY_VISIBLE_PATTERN);
mTactileFeedback=(CheckBoxPreference)pm.findPreference(KEY_TACTILE_FEEDBACK_ENABLED);
int activePhoneType=TelephonyManager.getDefault().getPhoneType();
if (TelephonyManager.PHONE_TYPE_CDMA != activePhoneType) {
PreferenceScreen simLockPreferences=getPreferenceManager().createPreferenceScreen(getActivity());
simLockPreferences.setTitle(R.string.sim_lock_settings_category);
simLockPreferences.setIntent(new Intent().setClassName(PACKAGE,ICC_LOCK_SETTINGS));
PreferenceCategory simLockCat=new PreferenceCategory(getActivity());
simLockCat.setTitle(R.string.sim_lock_settings_title);
root.addPreference(simLockCat);
simLockCat.addPreference(simLockPreferences);
}
PreferenceCategory passwordsCat=new PreferenceCategory(getActivity());
passwordsCat.setTitle(R.string.security_passwords_title);
root.addPreference(passwordsCat);
CheckBoxPreference showPassword=mShowPassword=new CheckBoxPreference(getActivity());
showPassword.setKey("show_password");
showPassword.setTitle(R.string.show_password);
showPassword.setSummary(R.string.show_password_summary);
showPassword.setPersistent(false);
passwordsCat.addPreference(showPassword);
PreferenceCategory devicePoliciesCat=new PreferenceCategory(getActivity());
devicePoliciesCat.setTitle(R.string.device_admin_title);
root.addPreference(devicePoliciesCat);
Preference deviceAdminButton=new Preference(getActivity());
deviceAdminButton.setTitle(R.string.manage_device_admin);
deviceAdminButton.setSummary(R.string.manage_device_admin_summary);
Intent deviceAdminIntent=new Intent();
deviceAdminIntent.setClass(getActivity(),DeviceAdminSettings.class);
deviceAdminButton.setIntent(deviceAdminIntent);
devicePoliciesCat.addPreference(deviceAdminButton);
PreferenceCategory credentialsCat=new PreferenceCategory(getActivity());
credentialsCat.setTitle(R.string.credentials_category);
root.addPreference(credentialsCat);
mCredentialStorage.createPreferences(credentialsCat,CredentialStorage.TYPE_KEYSTORE);
PreferenceCategory encryptedfsCat=new PreferenceCategory(getActivity());
encryptedfsCat.setTitle(R.string.encrypted_fs_category);
mCredentialStorage.createPreferences(encryptedfsCat,CredentialStorage.TYPE_ENCRYPTEDFS);
return root;
}
