{
  PreferenceScreen root=getPreferenceScreen();
  if (root != null) {
    root.removeAll();
  }
  addPreferencesFromResource(R.xml.security_settings);
  root=getPreferenceScreen();
  final int resid=getResIdForLockUnlockScreen(getActivity(),mLockPatternUtils);
  addPreferencesFromResource(resid);
  mIsPrimary=UserHandle.myUserId() == UserHandle.USER_OWNER;
  if (!mIsPrimary) {
    Preference ownerInfoPref=findPreference(KEY_OWNER_INFO_SETTINGS);
    if (ownerInfoPref != null) {
      if (UserManager.get(getActivity()).isLinkedUser()) {
        ownerInfoPref.setTitle(R.string.profile_info_settings_title);
      }
 else {
        ownerInfoPref.setTitle(R.string.user_info_settings_title);
      }
    }
  }
  if (mIsPrimary) {
switch (mDPM.getStorageEncryptionStatus()) {
case DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE:
      addPreferencesFromResource(R.xml.security_settings_encrypted);
    break;
case DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE:
  addPreferencesFromResource(R.xml.security_settings_unencrypted);
break;
}
}
PreferenceGroup securityCategory=(PreferenceGroup)root.findPreference(KEY_SECURITY_CATEGORY);
if (securityCategory != null && mLockPatternUtils.isSecure()) {
ArrayList<TrustAgentComponentInfo> agents=getActiveTrustAgents(getPackageManager(),mLockPatternUtils);
for (int i=0; i < agents.size(); i++) {
final TrustAgentComponentInfo agent=agents.get(i);
Preference trustAgentPreference=new Preference(securityCategory.getContext());
trustAgentPreference.setKey(KEY_TRUST_AGENT);
trustAgentPreference.setTitle(agent.title);
trustAgentPreference.setSummary(agent.summary);
Intent intent=new Intent();
intent.setComponent(agent.componentName);
intent.setAction(Intent.ACTION_MAIN);
trustAgentPreference.setIntent(intent);
securityCategory.addPreference(trustAgentPreference);
}
}
mLockAfter=(ListPreference)root.findPreference(KEY_LOCK_AFTER_TIMEOUT);
if (mLockAfter != null) {
setupLockAfterPreference();
updateLockAfterPreferenceSummary();
}
mBiometricWeakLiveliness=(CheckBoxPreference)root.findPreference(KEY_BIOMETRIC_WEAK_LIVELINESS);
mVisiblePattern=(CheckBoxPreference)root.findPreference(KEY_VISIBLE_PATTERN);
mPowerButtonInstantlyLocks=(CheckBoxPreference)root.findPreference(KEY_POWER_INSTANTLY_LOCKS);
Preference trustAgentPreference=root.findPreference(KEY_TRUST_AGENT);
if (mPowerButtonInstantlyLocks != null && trustAgentPreference != null && trustAgentPreference.getTitle().length() > 0) {
mPowerButtonInstantlyLocks.setSummary(getString(R.string.lockpattern_settings_power_button_instantly_locks_summary,trustAgentPreference.getTitle()));
}
if (resid == R.xml.security_settings_biometric_weak && mLockPatternUtils.getKeyguardStoredPasswordQuality() != DevicePolicyManager.PASSWORD_QUALITY_SOMETHING) {
if (securityCategory != null && mVisiblePattern != null) {
securityCategory.removePreference(root.findPreference(KEY_VISIBLE_PATTERN));
}
}
addPreferencesFromResource(R.xml.security_settings_misc);
TelephonyManager tm=TelephonyManager.getDefault();
if (!mIsPrimary || !tm.hasIccCard()) {
root.removePreference(root.findPreference(KEY_SIM_LOCK));
}
 else {
if ((TelephonyManager.getDefault().getSimState() == TelephonyManager.SIM_STATE_ABSENT) || (TelephonyManager.getDefault().getSimState() == TelephonyManager.SIM_STATE_UNKNOWN)) {
root.findPreference(KEY_SIM_LOCK).setEnabled(false);
}
}
if (Settings.System.getInt(getContentResolver(),Settings.System.LOCK_TO_APP_ENABLED,0) != 0) {
root.findPreference(KEY_SCREEN_PINNING).setSummary(getResources().getString(R.string.switch_on_text));
}
mShowPassword=(CheckBoxPreference)root.findPreference(KEY_SHOW_PASSWORD);
mResetCredentials=root.findPreference(KEY_RESET_CREDENTIALS);
final UserManager um=(UserManager)getActivity().getSystemService(Context.USER_SERVICE);
mKeyStore=KeyStore.getInstance();
if (!um.hasUserRestriction(UserManager.DISALLOW_CONFIG_CREDENTIALS)) {
Preference credentialStorageType=root.findPreference(KEY_CREDENTIAL_STORAGE_TYPE);
final int storageSummaryRes=mKeyStore.isHardwareBacked() ? R.string.credential_storage_type_hardware : R.string.credential_storage_type_software;
credentialStorageType.setSummary(storageSummaryRes);
}
 else {
PreferenceGroup credentialsManager=(PreferenceGroup)root.findPreference(KEY_CREDENTIALS_MANAGER);
credentialsManager.removePreference(root.findPreference(KEY_RESET_CREDENTIALS));
credentialsManager.removePreference(root.findPreference(KEY_CREDENTIALS_INSTALL));
credentialsManager.removePreference(root.findPreference(KEY_CREDENTIAL_STORAGE_TYPE));
}
PreferenceGroup deviceAdminCategory=(PreferenceGroup)root.findPreference(KEY_DEVICE_ADMIN_CATEGORY);
mToggleAppInstallation=(CheckBoxPreference)findPreference(KEY_TOGGLE_INSTALL_APPLICATIONS);
mToggleAppInstallation.setChecked(isNonMarketAppsAllowed());
mToggleAppInstallation.setEnabled(mIsPrimary);
if (um.hasUserRestriction(UserManager.DISALLOW_INSTALL_UNKNOWN_SOURCES) || um.hasUserRestriction(UserManager.DISALLOW_INSTALL_APPS)) {
mToggleAppInstallation.setEnabled(false);
}
PreferenceGroup advancedCategory=(PreferenceGroup)root.findPreference(KEY_ADVANCED_SECURITY);
if (advancedCategory != null && !mLockPatternUtils.isSecure()) {
Preference manageAgents=advancedCategory.findPreference(KEY_MANAGE_TRUST_AGENTS);
if (advancedCategory != null) advancedCategory.removePreference(manageAgents);
}
Index.getInstance(getActivity()).updateFromClassNameResource(SecuritySettings.class.getName(),true,true);
return root;
}
