{
  PreferenceScreen root=getPreferenceScreen();
  if (root != null) {
    root.removeAll();
  }
  addPreferencesFromResource(R.xml.security_settings);
  root=getPreferenceScreen();
  int resid=0;
  if (!mLockPatternUtils.isSecure()) {
    UserManager mUm=(UserManager)getSystemService(Context.USER_SERVICE);
    List<UserInfo> users=mUm.getUsers(true);
    final boolean singleUser=users.size() == 1;
    if (singleUser && mLockPatternUtils.isLockScreenDisabled()) {
      resid=R.xml.security_settings_lockscreen;
    }
 else {
      resid=R.xml.security_settings_chooser;
    }
  }
 else   if (mLockPatternUtils.usingBiometricWeak() && mLockPatternUtils.isBiometricWeakInstalled()) {
    resid=R.xml.security_settings_biometric_weak;
  }
 else {
switch (mLockPatternUtils.getKeyguardStoredPasswordQuality()) {
case DevicePolicyManager.PASSWORD_QUALITY_SOMETHING:
      resid=R.xml.security_settings_pattern;
    break;
case DevicePolicyManager.PASSWORD_QUALITY_NUMERIC:
  resid=R.xml.security_settings_pin;
break;
case DevicePolicyManager.PASSWORD_QUALITY_ALPHABETIC:
case DevicePolicyManager.PASSWORD_QUALITY_ALPHANUMERIC:
case DevicePolicyManager.PASSWORD_QUALITY_COMPLEX:
resid=R.xml.security_settings_password;
break;
}
}
addPreferencesFromResource(resid);
DevicePolicyManager dpm=(DevicePolicyManager)getSystemService(Context.DEVICE_POLICY_SERVICE);
mIsPrimary=UserHandle.myUserId() == UserHandle.USER_OWNER;
if (!mIsPrimary) {
Preference ownerInfoPref=findPreference(KEY_OWNER_INFO_SETTINGS);
if (ownerInfoPref != null) {
if (UserManager.get(getActivity()).isLinkedUser()) {
ownerInfoPref.setTitle(R.string.profile_info_settings_title);
}
 else {
ownerInfoPref.setTitle(R.string.user_info_settings_title);
}
}
}
if (mIsPrimary) {
switch (dpm.getStorageEncryptionStatus()) {
case DevicePolicyManager.ENCRYPTION_STATUS_ACTIVE:
addPreferencesFromResource(R.xml.security_settings_encrypted);
break;
case DevicePolicyManager.ENCRYPTION_STATUS_INACTIVE:
addPreferencesFromResource(R.xml.security_settings_unencrypted);
break;
}
}
mLockAfter=(ListPreference)root.findPreference(KEY_LOCK_AFTER_TIMEOUT);
if (mLockAfter != null) {
setupLockAfterPreference();
updateLockAfterPreferenceSummary();
}
mBiometricWeakLiveliness=(CheckBoxPreference)root.findPreference(KEY_BIOMETRIC_WEAK_LIVELINESS);
mVisiblePattern=(CheckBoxPreference)root.findPreference(KEY_VISIBLE_PATTERN);
mPowerButtonInstantlyLocks=(CheckBoxPreference)root.findPreference(KEY_POWER_INSTANTLY_LOCKS);
if (resid == R.xml.security_settings_biometric_weak && mLockPatternUtils.getKeyguardStoredPasswordQuality() != DevicePolicyManager.PASSWORD_QUALITY_SOMETHING) {
PreferenceGroup securityCategory=(PreferenceGroup)root.findPreference(KEY_SECURITY_CATEGORY);
if (securityCategory != null && mVisiblePattern != null) {
securityCategory.removePreference(root.findPreference(KEY_VISIBLE_PATTERN));
}
}
addPreferencesFromResource(R.xml.security_settings_misc);
TelephonyManager tm=TelephonyManager.getDefault();
if (!mIsPrimary || !tm.hasIccCard()) {
root.removePreference(root.findPreference(KEY_SIM_LOCK));
}
 else {
if ((TelephonyManager.getDefault().getSimState() == TelephonyManager.SIM_STATE_ABSENT) || (TelephonyManager.getDefault().getSimState() == TelephonyManager.SIM_STATE_UNKNOWN)) {
root.findPreference(KEY_SIM_LOCK).setEnabled(false);
}
}
mShowPassword=(CheckBoxPreference)root.findPreference(KEY_SHOW_PASSWORD);
final UserManager um=(UserManager)getActivity().getSystemService(Context.USER_SERVICE);
if (!um.hasUserRestriction(UserManager.DISALLOW_CONFIG_CREDENTIALS)) {
mKeyStore=KeyStore.getInstance();
Preference credentialStorageType=root.findPreference(KEY_CREDENTIAL_STORAGE_TYPE);
final int storageSummaryRes=mKeyStore.isHardwareBacked() ? R.string.credential_storage_type_hardware : R.string.credential_storage_type_software;
credentialStorageType.setSummary(storageSummaryRes);
mResetCredentials=root.findPreference(KEY_RESET_CREDENTIALS);
}
 else {
removePreference(KEY_CREDENTIALS_MANAGER);
}
PreferenceGroup deviceAdminCategory=(PreferenceGroup)root.findPreference(KEY_DEVICE_ADMIN_CATEGORY);
mToggleAppInstallation=(CheckBoxPreference)findPreference(KEY_TOGGLE_INSTALL_APPLICATIONS);
mToggleAppInstallation.setChecked(isNonMarketAppsAllowed());
mToggleAppInstallation.setEnabled(mIsPrimary);
mToggleVerifyApps=(CheckBoxPreference)findPreference(KEY_TOGGLE_VERIFY_APPLICATIONS);
if (mIsPrimary && showVerifierSetting()) {
if (isVerifierInstalled()) {
mToggleVerifyApps.setChecked(isVerifyAppsEnabled());
}
 else {
mToggleVerifyApps.setChecked(false);
mToggleVerifyApps.setEnabled(false);
}
}
 else {
if (deviceAdminCategory != null) {
deviceAdminCategory.removePreference(mToggleVerifyApps);
}
 else {
mToggleVerifyApps.setEnabled(false);
}
}
mNotificationAccess=findPreference(KEY_NOTIFICATION_ACCESS);
if (mNotificationAccess != null) {
final int total=NotificationAccessSettings.getListenersCount(mPM);
if (total == 0) {
if (deviceAdminCategory != null) {
deviceAdminCategory.removePreference(mNotificationAccess);
}
}
 else {
final int n=getNumEnabledNotificationListeners();
if (n == 0) {
mNotificationAccess.setSummary(getResources().getString(R.string.manage_notification_access_summary_zero));
}
 else {
mNotificationAccess.setSummary(String.format(getResources().getQuantityString(R.plurals.manage_notification_access_summary_nonzero,n,n)));
}
}
}
if (shouldBePinProtected(RESTRICTIONS_PIN_SET)) {
protectByRestrictions(mToggleAppInstallation);
protectByRestrictions(mToggleVerifyApps);
}
return root;
}
