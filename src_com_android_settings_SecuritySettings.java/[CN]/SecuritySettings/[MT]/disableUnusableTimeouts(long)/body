{
  final CharSequence[] entries=mLockAfter.getEntries();
  final CharSequence[] values=mLockAfter.getEntryValues();
  ArrayList<CharSequence> revisedEntries=new ArrayList<CharSequence>();
  ArrayList<CharSequence> revisedValues=new ArrayList<CharSequence>();
  for (int i=0; i < values.length; i++) {
    long timeout=Long.valueOf(values[i].toString());
    if (timeout <= maxTimeout) {
      revisedEntries.add(entries[i]);
      revisedValues.add(values[i]);
    }
  }
  if (revisedEntries.size() != entries.length || revisedValues.size() != values.length) {
    mLockAfter.setEntries(revisedEntries.toArray(new CharSequence[revisedEntries.size()]));
    mLockAfter.setEntryValues(revisedValues.toArray(new CharSequence[revisedValues.size()]));
    final int userPreference=Integer.valueOf(mLockAfter.getValue());
    if (userPreference <= maxTimeout) {
      mLockAfter.setValue(String.valueOf(userPreference));
    }
 else {
    }
  }
  mLockAfter.setEnabled(revisedEntries.size() > 0);
}
