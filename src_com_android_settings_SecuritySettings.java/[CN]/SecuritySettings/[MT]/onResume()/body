{
  super.onResume();
  createPreferenceHierarchy();
  updateLocationToggles();
  if (mSettingsObserver == null) {
    mSettingsObserver=new Observer(){
      public void update(      Observable o,      Object arg){
        updateLocationToggles();
      }
    }
;
    mContentQueryMap.addObserver(mSettingsObserver);
  }
  final LockPatternUtils lockPatternUtils=mChooseLockSettingsHelper.utils();
  if (mVisiblePattern != null) {
    mVisiblePattern.setChecked(lockPatternUtils.isVisiblePatternEnabled());
  }
  if (mTactileFeedback != null) {
    mTactileFeedback.setChecked(lockPatternUtils.isTactileFeedbackEnabled());
  }
  mShowPassword.setChecked(Settings.System.getInt(getContentResolver(),Settings.System.TEXT_SHOW_PASSWORD,1) != 0);
  KeyStore.State state=KeyStore.getInstance().state();
  mResetCredentials.setEnabled(state != KeyStore.State.UNINITIALIZED);
}
