{
  XmlResourceParser parser=null;
  try {
    parser=getResources().getXml(resid);
    AttributeSet attrs=Xml.asAttributeSet(parser);
    int type;
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {
    }
    String nodeName=parser.getName();
    if (!"dashboard-categories".equals(nodeName)) {
      throw new RuntimeException("XML document must start with <preference-categories> tag; found" + nodeName + " at "+ parser.getPositionDescription());
    }
    Bundle curBundle=null;
    final int outerDepth=parser.getDepth();
    while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > outerDepth)) {
      if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
        continue;
      }
      nodeName=parser.getName();
      if ("dashboard-category".equals(nodeName)) {
        DashboardCategory category=new DashboardCategory();
        TypedArray sa=obtainStyledAttributes(attrs,com.android.internal.R.styleable.PreferenceHeader);
        category.id=sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_id,(int)DashboardCategory.CAT_ID_UNDEFINED);
        TypedValue tv=sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_title);
        if (tv != null && tv.type == TypedValue.TYPE_STRING) {
          if (tv.resourceId != 0) {
            category.titleRes=tv.resourceId;
          }
 else {
            category.title=tv.string;
          }
        }
        sa.recycle();
        final int innerDepth=parser.getDepth();
        while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > innerDepth)) {
          if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
            continue;
          }
          String innerNodeName=parser.getName();
          if (innerNodeName.equals("dashboard-tile")) {
            DashboardTile tile=new DashboardTile();
            sa=obtainStyledAttributes(attrs,com.android.internal.R.styleable.PreferenceHeader);
            tile.id=sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_id,(int)TILE_ID_UNDEFINED);
            tv=sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_title);
            if (tv != null && tv.type == TypedValue.TYPE_STRING) {
              if (tv.resourceId != 0) {
                tile.titleRes=tv.resourceId;
              }
 else {
                tile.title=tv.string;
              }
            }
            tv=sa.peekValue(com.android.internal.R.styleable.PreferenceHeader_summary);
            if (tv != null && tv.type == TypedValue.TYPE_STRING) {
              if (tv.resourceId != 0) {
                tile.summaryRes=tv.resourceId;
              }
 else {
                tile.summary=tv.string;
              }
            }
            tile.iconRes=sa.getResourceId(com.android.internal.R.styleable.PreferenceHeader_icon,0);
            tile.fragment=sa.getString(com.android.internal.R.styleable.PreferenceHeader_fragment);
            sa.recycle();
            if (curBundle == null) {
              curBundle=new Bundle();
            }
            final int innerDepth2=parser.getDepth();
            while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && (type != XmlPullParser.END_TAG || parser.getDepth() > innerDepth2)) {
              if (type == XmlPullParser.END_TAG || type == XmlPullParser.TEXT) {
                continue;
              }
              String innerNodeName2=parser.getName();
              if (innerNodeName2.equals("extra")) {
                getResources().parseBundleExtra("extra",attrs,curBundle);
                XmlUtils.skipCurrentTag(parser);
              }
 else               if (innerNodeName2.equals("intent")) {
                tile.intent=Intent.parseIntent(getResources(),parser,attrs);
              }
 else {
                XmlUtils.skipCurrentTag(parser);
              }
            }
            if (curBundle.size() > 0) {
              tile.fragmentArguments=curBundle;
              curBundle=null;
            }
            if (tile.id != R.id.sim_settings || Utils.showSimCardTile(this)) {
              category.addTile(tile);
            }
          }
 else {
            XmlUtils.skipCurrentTag(parser);
          }
        }
        target.add(category);
      }
 else {
        XmlUtils.skipCurrentTag(parser);
      }
    }
  }
 catch (  XmlPullParserException e) {
    throw new RuntimeException("Error parsing categories",e);
  }
catch (  IOException e) {
    throw new RuntimeException("Error parsing categories",e);
  }
 finally {
    if (parser != null)     parser.close();
  }
}
