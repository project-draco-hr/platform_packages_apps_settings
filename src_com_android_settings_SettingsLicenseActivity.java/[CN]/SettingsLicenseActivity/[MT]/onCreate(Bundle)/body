{
  super.onCreate(savedInstanceState);
  String fileName=SystemProperties.get(PROPERTY_LICENSE_PATH,DEFAULT_LICENSE_PATH);
  if (TextUtils.isEmpty(fileName)) {
    Log.e(TAG,"The system property for the license file is empty.");
    showErrorAndFinish();
    return;
  }
  FileReader fileReader=null;
  StringBuilder data=null;
  try {
    data=new StringBuilder(2048);
    char tmp[]=new char[2048];
    int numRead;
    fileReader=new FileReader(fileName);
    while ((numRead=fileReader.read(tmp)) >= 0) {
      data.append(tmp,0,numRead);
    }
  }
 catch (  FileNotFoundException e) {
    Log.e(TAG,"License HTML file not found at " + fileName,e);
    showErrorAndFinish();
    return;
  }
catch (  IOException e) {
    Log.e(TAG,"Error reading license HTML file at " + fileName,e);
    showErrorAndFinish();
    return;
  }
 finally {
    try {
      if (fileReader != null) {
        fileReader.close();
      }
    }
 catch (    IOException e) {
    }
  }
  if (TextUtils.isEmpty(data)) {
    Log.e(TAG,"License HTML is empty (from " + fileName + ")");
    showErrorAndFinish();
    return;
  }
  WebView webView=new WebView(this);
  if (LOGV)   Log.v(TAG,"Started encode at " + System.currentTimeMillis());
  String dataStr;
  try {
    byte[] base64Bytes=Base64.encodeBase64(data.toString().getBytes("ISO8859_1"));
    dataStr=new String(base64Bytes);
  }
 catch (  UnsupportedEncodingException e) {
    Log.e(TAG,"Could not convert to base64",e);
    showErrorAndFinish();
    return;
  }
  if (LOGV)   Log.v(TAG,"Ended encode at " + System.currentTimeMillis());
  if (LOGV) {
    Log.v(TAG,"Started test decode at " + System.currentTimeMillis());
    Base64.decodeBase64(dataStr.getBytes());
    Log.v(TAG,"Ended decode at " + System.currentTimeMillis());
  }
  webView.loadData(dataStr,"text/html","base64");
  webView.setWebViewClient(new WebViewClient(){
    @Override public void onPageFinished(    WebView view,    String url){
      mAlert.setTitle(getString(R.string.settings_license_activity_title));
    }
  }
);
  final AlertController.AlertParams p=mAlertParams;
  p.mTitle=getString(R.string.settings_license_activity_loading);
  p.mView=webView;
  p.mForceInverseBackground=true;
  setupAlert();
}
