{
  super.onCreate(savedInstanceState);
  ContentResolver resolver=getContentResolver();
  int activePhoneType=TelephonyManager.getDefault().getCurrentPhoneType();
  mAudioManager=(AudioManager)getSystemService(Context.AUDIO_SERVICE);
  addPreferencesFromResource(R.xml.sound_settings);
  if (TelephonyManager.PHONE_TYPE_CDMA != activePhoneType) {
    getPreferenceScreen().removePreference(findPreference(KEY_EMERGENCY_TONE));
  }
  mSilent=(CheckBoxPreference)findPreference(KEY_SILENT);
  if (!getResources().getBoolean(R.bool.has_silent_mode)) {
    getPreferenceScreen().removePreference(mSilent);
    findPreference(KEY_RING_VOLUME).setDependency(null);
  }
  mVibrate=(ListPreference)findPreference(KEY_VIBRATE);
  mVibrate.setOnPreferenceChangeListener(this);
  mDtmfTone=(CheckBoxPreference)findPreference(KEY_DTMF_TONE);
  mDtmfTone.setPersistent(false);
  mDtmfTone.setChecked(Settings.System.getInt(resolver,Settings.System.DTMF_TONE_WHEN_DIALING,1) != 0);
  mSoundEffects=(CheckBoxPreference)findPreference(KEY_SOUND_EFFECTS);
  mSoundEffects.setPersistent(false);
  mSoundEffects.setChecked(Settings.System.getInt(resolver,Settings.System.SOUND_EFFECTS_ENABLED,0) != 0);
  mHapticFeedback=(CheckBoxPreference)findPreference(KEY_HAPTIC_FEEDBACK);
  mHapticFeedback.setPersistent(false);
  mHapticFeedback.setChecked(Settings.System.getInt(resolver,Settings.System.HAPTIC_FEEDBACK_ENABLED,0) != 0);
  mLockSounds=(CheckBoxPreference)findPreference(KEY_LOCK_SOUNDS);
  mLockSounds.setPersistent(false);
  mLockSounds.setChecked(Settings.System.getInt(resolver,Settings.System.LOCKSCREEN_SOUNDS_ENABLED,1) != 0);
  if (!((Vibrator)getSystemService(Context.VIBRATOR_SERVICE)).hasVibrator()) {
    getPreferenceScreen().removePreference(mVibrate);
    getPreferenceScreen().removePreference(mHapticFeedback);
  }
  if (TelephonyManager.PHONE_TYPE_CDMA == activePhoneType) {
    ListPreference emergencyTonePreference=(ListPreference)findPreference(KEY_EMERGENCY_TONE);
    emergencyTonePreference.setValue(String.valueOf(Settings.System.getInt(resolver,Settings.System.EMERGENCY_TONE,FALLBACK_EMERGENCY_TONE_VALUE)));
    emergencyTonePreference.setOnPreferenceChangeListener(this);
  }
  mSoundSettings=(PreferenceGroup)findPreference(KEY_SOUND_SETTINGS);
  mNotificationPulse=(CheckBoxPreference)mSoundSettings.findPreference(KEY_NOTIFICATION_PULSE);
  if (mNotificationPulse != null && getResources().getBoolean(R.bool.has_intrusive_led) == false) {
    mSoundSettings.removePreference(mNotificationPulse);
  }
 else {
    try {
      mNotificationPulse.setChecked(Settings.System.getInt(resolver,Settings.System.NOTIFICATION_LIGHT_PULSE) == 1);
      mNotificationPulse.setOnPreferenceChangeListener(this);
    }
 catch (    SettingNotFoundException snfe) {
      Log.e(TAG,Settings.System.NOTIFICATION_LIGHT_PULSE + " not found");
    }
  }
  mMusicFx=mSoundSettings.findPreference(KEY_MUSICFX);
  Intent i=new Intent(AudioEffect.ACTION_DISPLAY_AUDIO_EFFECT_CONTROL_PANEL);
  PackageManager p=getPackageManager();
  List<ResolveInfo> ris=p.queryIntentActivities(i,PackageManager.GET_DISABLED_COMPONENTS);
  if (ris.size() <= 2) {
    mSoundSettings.removePreference(mMusicFx);
  }
  if (!Utils.isVoiceCapable(getActivity())) {
    for (    String prefKey : NEED_VOICE_CAPABILITY) {
      Preference pref=findPreference(prefKey);
      if (pref != null) {
        getPreferenceScreen().removePreference(pref);
      }
    }
  }
}
