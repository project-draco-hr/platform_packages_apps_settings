{
  boolean bluetoothErrored=false;
  for (  String s : errored) {
    for (    String regex : mBluetoothRegexs) {
      if (s.matches(regex))       bluetoothErrored=true;
    }
  }
  BluetoothAdapter adapter=BluetoothAdapter.getDefaultAdapter();
  if (adapter == null) {
    return;
  }
  int btState=adapter.getState();
  if (btState == BluetoothAdapter.STATE_TURNING_OFF) {
    mBluetoothTether.setEnabled(false);
    mBluetoothTether.setSummary(R.string.bluetooth_turning_off);
  }
 else   if (btState == BluetoothAdapter.STATE_TURNING_ON) {
    mBluetoothTether.setEnabled(false);
    mBluetoothTether.setSummary(R.string.bluetooth_turning_on);
  }
 else {
    BluetoothPan bluetoothPan=mBluetoothPan.get();
    if (btState == BluetoothAdapter.STATE_ON && bluetoothPan != null && bluetoothPan.isTetheringOn()) {
      mBluetoothTether.setChecked(true);
      mBluetoothTether.setEnabled(true);
      int bluetoothTethered=bluetoothPan.getConnectedDevices().size();
      if (bluetoothTethered > 1) {
        String summary=getString(R.string.bluetooth_tethering_devices_connected_subtext,bluetoothTethered);
        mBluetoothTether.setSummary(summary);
      }
 else       if (bluetoothTethered == 1) {
        mBluetoothTether.setSummary(R.string.bluetooth_tethering_device_connected_subtext);
      }
 else       if (bluetoothErrored) {
        mBluetoothTether.setSummary(R.string.bluetooth_tethering_errored_subtext);
      }
 else {
        mBluetoothTether.setSummary(R.string.bluetooth_tethering_available_subtext);
      }
    }
 else {
      mBluetoothTether.setEnabled(true);
      mBluetoothTether.setChecked(false);
      mBluetoothTether.setSummary(R.string.bluetooth_tethering_off_subtext);
    }
  }
}
