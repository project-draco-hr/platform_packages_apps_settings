{
  SparseArray<List<CertHolder>> certHoldersByProfile=new SparseArray<List<CertHolder>>();
  try {
    List<UserHandle> profiles=mUserManager.getUserProfiles();
    final int n=profiles.size();
    SparseArray<List<ParcelableString>> aliasesByProfileId=new SparseArray<List<ParcelableString>>(n);
    int max=0;
    int progress=0;
    for (int i=0; i < n; ++i) {
      UserHandle profile=profiles.get(i);
      int profileId=profile.getIdentifier();
      if (shouldSkipProfile(profile)) {
        continue;
      }
      KeyChainConnection keyChainConnection=KeyChain.bindAsUser(mContext,profile);
      mKeyChainConnectionByProfileId.put(profileId,keyChainConnection);
      IKeyChainService service=keyChainConnection.getService();
      List<ParcelableString> aliases=mTab.getAliases(service);
      if (isCancelled()) {
        return new SparseArray<List<CertHolder>>();
      }
      max+=aliases.size();
      aliasesByProfileId.put(profileId,aliases);
    }
    for (int i=0; i < n; ++i) {
      UserHandle profile=profiles.get(i);
      int profileId=profile.getIdentifier();
      List<ParcelableString> aliases=aliasesByProfileId.get(profileId);
      if (isCancelled()) {
        return new SparseArray<List<CertHolder>>();
      }
      KeyChainConnection keyChainConnection=mKeyChainConnectionByProfileId.get(profileId);
      if (shouldSkipProfile(profile) || aliases == null || keyChainConnection == null) {
        certHoldersByProfile.put(profileId,new ArrayList<CertHolder>(0));
        continue;
      }
      IKeyChainService service=keyChainConnection.getService();
      List<CertHolder> certHolders=new ArrayList<CertHolder>(max);
      final int aliasMax=aliases.size();
      for (int j=0; j < aliasMax; ++j) {
        String alias=aliases.get(j).string;
        byte[] encodedCertificate=service.getEncodedCaCertificate(alias,true);
        X509Certificate cert=KeyChain.toCertificate(encodedCertificate);
        certHolders.add(new CertHolder(service,mAdapter,mTab,alias,cert,profileId));
        publishProgress(++progress,max);
      }
      Collections.sort(certHolders);
      certHoldersByProfile.put(profileId,certHolders);
    }
    return certHoldersByProfile;
  }
 catch (  RemoteException e) {
    Log.e(TAG,"Remote exception while loading aliases.",e);
    return new SparseArray<List<CertHolder>>();
  }
catch (  InterruptedException e) {
    Log.e(TAG,"InterruptedException while loading aliases.",e);
    return new SparseArray<List<CertHolder>>();
  }
}
