{
  String[] accountTypes=mAuthenticatorHelper.getEnabledAccountTypes();
  List<AccountPreference> accountTypePreferences=new ArrayList<AccountPreference>(accountTypes.length);
  for (  String accountType : accountTypes) {
    CharSequence label=mAuthenticatorHelper.getLabelForType(getActivity(),accountType);
    if (label == null) {
      continue;
    }
    Account[] accounts=AccountManager.get(getActivity()).getAccountsByType(accountType);
    boolean skipToAccount=accounts.length == 1 && !mAuthenticatorHelper.hasAccountPreferences(accountType);
    if (skipToAccount) {
      Bundle fragmentArguments=new Bundle();
      fragmentArguments.putParcelable(AccountSyncSettings.ACCOUNT_KEY,accounts[0]);
      accountTypePreferences.add(new AccountPreference(getActivity(),label,accountType,AccountSyncSettings.class.getName(),fragmentArguments));
    }
 else {
      Bundle fragmentArguments=new Bundle();
      fragmentArguments.putString(ManageAccountsSettings.KEY_ACCOUNT_TYPE,accountType);
      fragmentArguments.putString(ManageAccountsSettings.KEY_ACCOUNT_LABEL,label.toString());
      accountTypePreferences.add(new AccountPreference(getActivity(),label,accountType,ManageAccountsSettings.class.getName(),fragmentArguments));
    }
    mAuthenticatorHelper.preloadDrawableForType(getActivity(),accountType);
  }
  Collections.sort(accountTypePreferences,new Comparator<AccountPreference>(){
    @Override public int compare(    AccountPreference t1,    AccountPreference t2){
      return t1.mTitle.toString().compareTo(t2.mTitle.toString());
    }
  }
);
  return accountTypePreferences;
}
