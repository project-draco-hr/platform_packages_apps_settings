{
  final Context context=getActivity();
  final ProfileData profileData=new ProfileData();
  profileData.userInfo=userInfo;
  if (addCategory) {
    profileData.preferenceGroup=new AccessiblePreferenceCategory(getPrefContext());
    if (userInfo.isManagedProfile()) {
      profileData.preferenceGroup.setLayoutResource(R.layout.work_profile_category);
      profileData.preferenceGroup.setTitle(R.string.category_work);
      String workGroupSummary=getWorkGroupSummary(context,userInfo);
      profileData.preferenceGroup.setSummary(workGroupSummary);
      ((AccessiblePreferenceCategory)profileData.preferenceGroup).setContentDescription(getString(R.string.accessibility_category_work,workGroupSummary));
      profileData.removeWorkProfilePreference=newRemoveWorkProfilePreference(context);
      profileData.managedProfilePreference=newManagedProfileSettings();
    }
 else {
      profileData.preferenceGroup.setTitle(R.string.category_personal);
      ((AccessiblePreferenceCategory)profileData.preferenceGroup).setContentDescription(getString(R.string.accessibility_category_personal));
    }
    parent.addPreference(profileData.preferenceGroup);
  }
 else {
    profileData.preferenceGroup=parent;
  }
  if (userInfo.isEnabled()) {
    profileData.authenticatorHelper=new AuthenticatorHelper(context,userInfo.getUserHandle(),this);
    if (!RestrictedLockUtils.hasBaseUserRestriction(context,UserManager.DISALLOW_MODIFY_ACCOUNTS,userInfo.id)) {
      profileData.addAccountPreference=newAddAccountPreference(context);
      profileData.addAccountPreference.checkRestrictionAndSetDisabled(DISALLOW_MODIFY_ACCOUNTS,userInfo.id);
    }
  }
  mProfiles.put(userInfo.id,profileData);
  Index.getInstance(getActivity()).updateFromClassNameResource(AccountSettings.class.getName(),true,true);
}
