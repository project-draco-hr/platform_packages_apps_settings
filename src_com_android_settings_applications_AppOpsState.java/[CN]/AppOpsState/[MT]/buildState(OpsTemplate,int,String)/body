{
  final Context context=mContext;
  final HashMap<String,AppEntry> appEntries=new HashMap<String,AppEntry>();
  final List<AppOpEntry> entries=new ArrayList<AppOpEntry>();
  final ArrayList<String> perms=new ArrayList<String>();
  final ArrayList<Integer> permOps=new ArrayList<Integer>();
  final boolean[] brief=new boolean[AppOpsManager._NUM_OP];
  for (int i=0; i < tpl.ops.length; i++) {
    brief[tpl.ops[i]]=tpl.showPerms[i];
    if (tpl.showPerms[i]) {
      String perm=AppOpsManager.opToPermission(tpl.ops[i]);
      if (perm != null && !perms.contains(perm)) {
        perms.add(perm);
        permOps.add(tpl.ops[i]);
      }
    }
  }
  List<AppOpsManager.PackageOps> pkgs;
  if (packageName != null) {
    pkgs=mAppOps.getOpsForPackage(uid,packageName,tpl.ops);
  }
 else {
    pkgs=mAppOps.getPackagesForOps(tpl.ops);
  }
  if (pkgs != null) {
    for (int i=0; i < pkgs.size(); i++) {
      AppOpsManager.PackageOps pkgOps=pkgs.get(i);
      AppEntry appEntry=getAppEntry(context,appEntries,pkgOps.getPackageName(),null);
      if (appEntry == null) {
        continue;
      }
      for (int j=0; j < pkgOps.getOps().size(); j++) {
        AppOpsManager.OpEntry opEntry=pkgOps.getOps().get(j);
        addOp(entries,pkgOps,appEntry,opEntry,brief[opEntry.getOp()],packageName == null);
      }
    }
  }
  List<PackageInfo> apps;
  if (packageName != null) {
    apps=new ArrayList<PackageInfo>();
    try {
      PackageInfo pi=mPm.getPackageInfo(packageName,PackageManager.GET_PERMISSIONS);
      apps.add(pi);
    }
 catch (    NameNotFoundException e) {
    }
  }
 else {
    String[] permsArray=new String[perms.size()];
    perms.toArray(permsArray);
    apps=mPm.getPackagesHoldingPermissions(permsArray,0);
  }
  for (int i=0; i < apps.size(); i++) {
    PackageInfo appInfo=apps.get(i);
    AppEntry appEntry=getAppEntry(context,appEntries,appInfo.packageName,appInfo.applicationInfo);
    if (appEntry == null) {
      continue;
    }
    List<AppOpsManager.OpEntry> dummyOps=null;
    AppOpsManager.PackageOps pkgOps=null;
    if (appInfo.requestedPermissions != null) {
      for (int j=0; j < appInfo.requestedPermissions.length; j++) {
        if (appInfo.requestedPermissionsFlags != null) {
          if ((appInfo.requestedPermissionsFlags[j] & PackageInfo.REQUESTED_PERMISSION_GRANTED) == 0) {
            if (DEBUG)             Log.d(TAG,"Pkg " + appInfo.packageName + " perm "+ appInfo.requestedPermissions[j]+ " not granted; skipping");
            break;
          }
        }
        if (DEBUG)         Log.d(TAG,"Pkg " + appInfo.packageName + ": requested perm "+ appInfo.requestedPermissions[j]);
        for (int k=0; k < perms.size(); k++) {
          if (!perms.get(k).equals(appInfo.requestedPermissions[j])) {
            continue;
          }
          if (DEBUG)           Log.d(TAG,"Pkg " + appInfo.packageName + " perm "+ perms.get(k)+ " has op "+ permOps.get(k)+ ": "+ appEntry.hasOp(permOps.get(k)));
          if (appEntry.hasOp(permOps.get(k))) {
            continue;
          }
          if (dummyOps == null) {
            dummyOps=new ArrayList<AppOpsManager.OpEntry>();
            pkgOps=new AppOpsManager.PackageOps(appInfo.packageName,appInfo.applicationInfo.uid,dummyOps);
          }
          AppOpsManager.OpEntry opEntry=new AppOpsManager.OpEntry(permOps.get(k),AppOpsManager.MODE_ALLOWED,0,0,0);
          dummyOps.add(opEntry);
          addOp(entries,pkgOps,appEntry,opEntry,brief[opEntry.getOp()],packageName == null);
        }
      }
    }
  }
  Collections.sort(entries,APP_OP_COMPARATOR);
  return entries;
}
