{
  ArrayList<Session> rebuildingSessions=null;
synchronized (mEntriesMap) {
    if (mRebuildingSessions.size() > 0) {
      rebuildingSessions=new ArrayList<Session>(mRebuildingSessions);
      mRebuildingSessions.clear();
    }
  }
  if (rebuildingSessions != null) {
    for (int i=0; i < rebuildingSessions.size(); i++) {
      rebuildingSessions.get(i).handleRebuildList();
    }
  }
switch (msg.what) {
case MSG_REBUILD_LIST:
{
    }
  break;
case MSG_LOAD_ENTRIES:
{
  int numDone=0;
synchronized (mEntriesMap) {
    if (DEBUG_LOCKING)     Log.v(TAG,"MSG_LOAD_ENTRIES acquired lock");
    for (int i=0; i < mApplications.size() && numDone < 6; i++) {
      if (!mRunning) {
        mRunning=true;
        Message m=mMainHandler.obtainMessage(MainHandler.MSG_RUNNING_STATE_CHANGED,1);
        mMainHandler.sendMessage(m);
      }
      ApplicationInfo info=mApplications.get(i);
      int userId=UserHandle.getUserId(info.uid);
      if (mEntriesMap.get(userId).get(info.packageName) == null) {
        numDone++;
        getEntryLocked(info);
      }
    }
    if (DEBUG_LOCKING)     Log.v(TAG,"MSG_LOAD_ENTRIES releasing lock");
  }
  if (numDone >= 6) {
    sendEmptyMessage(MSG_LOAD_ENTRIES);
  }
 else {
    if (!mMainHandler.hasMessages(MainHandler.MSG_LOAD_ENTRIES_COMPLETE)) {
      mMainHandler.sendEmptyMessage(MainHandler.MSG_LOAD_ENTRIES_COMPLETE);
    }
    sendEmptyMessage(MSG_LOAD_LAUNCHER);
  }
}
break;
case MSG_LOAD_LAUNCHER:
{
Intent launchIntent=new Intent(Intent.ACTION_MAIN,null).addCategory(Intent.CATEGORY_LAUNCHER);
for (int i=0; i < mEntriesMap.size(); i++) {
int userId=mEntriesMap.keyAt(i);
List<ResolveInfo> intents=mPm.queryIntentActivitiesAsUser(launchIntent,PackageManager.GET_DISABLED_COMPONENTS,userId);
synchronized (mEntriesMap) {
  if (DEBUG_LOCKING)   Log.v(TAG,"MSG_LOAD_LAUNCHER acquired lock");
  HashMap<String,AppEntry> userEntries=mEntriesMap.valueAt(i);
  final int N=intents.size();
  for (int j=0; j < N; j++) {
    String packageName=intents.get(j).activityInfo.packageName;
    AppEntry entry=userEntries.get(packageName);
    if (entry != null) {
      entry.hasLauncherEntry=true;
    }
 else {
      Log.w(TAG,"Cannot find pkg: " + packageName + " on user "+ userId);
    }
  }
  if (DEBUG_LOCKING)   Log.v(TAG,"MSG_LOAD_LAUNCHER releasing lock");
}
}
if (!mMainHandler.hasMessages(MainHandler.MSG_LAUNCHER_INFO_CHANGED)) {
mMainHandler.sendEmptyMessage(MainHandler.MSG_LAUNCHER_INFO_CHANGED);
}
sendEmptyMessage(MSG_LOAD_ICONS);
}
break;
case MSG_LOAD_ICONS:
{
int numDone=0;
synchronized (mEntriesMap) {
if (DEBUG_LOCKING) Log.v(TAG,"MSG_LOAD_ICONS acquired lock");
for (int i=0; i < mAppEntries.size() && numDone < 2; i++) {
AppEntry entry=mAppEntries.get(i);
if (entry.icon == null || !entry.mounted) {
synchronized (entry) {
  if (entry.ensureIconLocked(mContext,mPm)) {
    if (!mRunning) {
      mRunning=true;
      Message m=mMainHandler.obtainMessage(MainHandler.MSG_RUNNING_STATE_CHANGED,1);
      mMainHandler.sendMessage(m);
    }
    numDone++;
  }
}
}
}
if (DEBUG_LOCKING) Log.v(TAG,"MSG_LOAD_ICONS releasing lock");
}
if (numDone > 0) {
if (!mMainHandler.hasMessages(MainHandler.MSG_PACKAGE_ICON_CHANGED)) {
mMainHandler.sendEmptyMessage(MainHandler.MSG_PACKAGE_ICON_CHANGED);
}
}
if (numDone >= 2) {
sendEmptyMessage(MSG_LOAD_ICONS);
}
 else {
sendEmptyMessage(MSG_LOAD_SIZES);
}
}
break;
case MSG_LOAD_SIZES:
{
synchronized (mEntriesMap) {
if (DEBUG_LOCKING) Log.v(TAG,"MSG_LOAD_SIZES acquired lock");
if (mCurComputingSizePkg != null) {
if (DEBUG_LOCKING) Log.v(TAG,"MSG_LOAD_SIZES releasing: currently computing");
return;
}
long now=SystemClock.uptimeMillis();
for (int i=0; i < mAppEntries.size(); i++) {
AppEntry entry=mAppEntries.get(i);
if (entry.size == SIZE_UNKNOWN || entry.sizeStale) {
if (entry.sizeLoadStart == 0 || (entry.sizeLoadStart < (now - 20 * 1000))) {
if (!mRunning) {
mRunning=true;
Message m=mMainHandler.obtainMessage(MainHandler.MSG_RUNNING_STATE_CHANGED,1);
mMainHandler.sendMessage(m);
}
entry.sizeLoadStart=now;
mCurComputingSizePkg=entry.info.packageName;
mCurComputingSizeUserId=UserHandle.getUserId(entry.info.uid);
mPm.getPackageSizeInfo(mCurComputingSizePkg,mCurComputingSizeUserId,mStatsObserver);
}
if (DEBUG_LOCKING) Log.v(TAG,"MSG_LOAD_SIZES releasing: now computing");
return;
}
}
if (!mMainHandler.hasMessages(MainHandler.MSG_ALL_SIZES_COMPUTED)) {
mMainHandler.sendEmptyMessage(MainHandler.MSG_ALL_SIZES_COMPUTED);
mRunning=false;
Message m=mMainHandler.obtainMessage(MainHandler.MSG_RUNNING_STATE_CHANGED,0);
mMainHandler.sendMessage(m);
}
if (DEBUG_LOCKING) Log.v(TAG,"MSG_LOAD_SIZES releasing lock");
}
}
break;
}
}
