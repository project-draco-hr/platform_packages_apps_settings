{
  super.onCreate(savedInstanceState);
  if (localLOGV)   Log.i(TAG,"Activity created");
  long sCreate;
  if (DEBUG_TIME) {
    sCreate=SystemClock.elapsedRealtime();
  }
  Intent intent=getIntent();
  String action=intent.getAction();
  String defaultTabTag=TAB_DOWNLOADED;
  if (intent.getComponent().getClassName().equals("com.android.settings.RunningServices")) {
    defaultTabTag=TAB_RUNNING;
  }
  if (action.equals(Intent.ACTION_MANAGE_PACKAGE_STORAGE)) {
    mSortOrder=SORT_ORDER_SIZE;
    mFilterApps=FILTER_APPS_ALL;
    defaultTabTag=TAB_ALL;
    mSizesFirst=true;
  }
  if (savedInstanceState != null) {
    mSortOrder=savedInstanceState.getInt("sortOrder",mSortOrder);
    mFilterApps=savedInstanceState.getInt("filterApps",mFilterApps);
    String tmp=savedInstanceState.getString("defaultTabTag");
    if (tmp != null)     defaultTabTag=tmp;
    mSizesFirst=savedInstanceState.getBoolean("sizesFirst",mSizesFirst);
  }
  mNonConfigInstance=getLastNonConfigurationInstance();
  mPm=getPackageManager();
  requestWindowFeature(Window.FEATURE_RIGHT_ICON);
  requestWindowFeature(Window.FEATURE_INDETERMINATE_PROGRESS);
  mDefaultAppIcon=Resources.getSystem().getDrawable(com.android.internal.R.drawable.sym_def_app_icon);
  mInvalidSizeStr=getText(R.string.invalid_size_value);
  mComputingSizeStr=getText(R.string.computing_size);
  mInflater=(LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
  mRootView=mInflater.inflate(R.layout.compute_sizes,null);
  mReceiver=new PackageIntentReceiver();
  mObserver=new PkgSizeObserver();
  List<ApplicationInfo> appList=getInstalledApps(FILTER_APPS_ALL);
  mAppInfoAdapter=new AppInfoAdapter(this,appList);
  ListView lv=(ListView)mRootView.findViewById(android.R.id.list);
  lv.setOnItemClickListener(this);
  lv.setSaveEnabled(true);
  lv.setItemsCanFocus(true);
  lv.setOnItemClickListener(this);
  lv.setTextFilterEnabled(true);
  mListView=lv;
  mRunningProcessesView=(RunningProcessesView)mRootView.findViewById(R.id.running_processes);
  if (DEBUG_TIME) {
    Log.i(TAG,"Total time in Activity.create:: " + (SystemClock.elapsedRealtime() - sCreate) + " ms");
  }
  long sStart;
  if (DEBUG_TIME) {
    sStart=SystemClock.elapsedRealtime();
  }
  mCache.loadCache();
  if (DEBUG_TIME) {
    Log.i(TAG,"Took " + (SystemClock.elapsedRealtime() - sStart) + " ms to init cache");
  }
  final TabHost tabHost=getTabHost();
  tabHost.addTab(tabHost.newTabSpec(TAB_DOWNLOADED).setIndicator(getString(R.string.filter_apps_third_party),getResources().getDrawable(R.drawable.ic_tab_download)).setContent(this));
  tabHost.addTab(tabHost.newTabSpec(TAB_ALL).setIndicator(getString(R.string.filter_apps_all),getResources().getDrawable(R.drawable.ic_tab_all)).setContent(this));
  tabHost.addTab(tabHost.newTabSpec(TAB_SDCARD).setIndicator(getString(R.string.filter_apps_onsdcard),getResources().getDrawable(R.drawable.ic_tab_sdcard)).setContent(this));
  tabHost.addTab(tabHost.newTabSpec(TAB_RUNNING).setIndicator(getString(R.string.filter_apps_running),getResources().getDrawable(R.drawable.ic_tab_running)).setContent(this));
  tabHost.setCurrentTabByTag(defaultTabTag);
  tabHost.setOnTabChangedListener(this);
  selectView(TAB_RUNNING.equals(defaultTabTag) ? VIEW_RUNNING : VIEW_LIST);
}
