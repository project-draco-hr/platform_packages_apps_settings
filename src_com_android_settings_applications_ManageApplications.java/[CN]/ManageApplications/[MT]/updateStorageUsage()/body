{
  if (mRootView == null)   return;
  if (mCurView == VIEW_RUNNING) {
    return;
  }
  long freeStorage=0;
  long appStorage=0;
  long totalStorage=0;
  CharSequence newLabel=null;
  if (mFilterApps == FILTER_APPS_SDCARD) {
    if (mLastShowedInternalStorage) {
      mLastShowedInternalStorage=false;
    }
    newLabel=getActivity().getText(R.string.sd_card_storage);
    if (mContainerService != null) {
      try {
        final long[] stats=mContainerService.getFileSystemStats(Environment.getExternalStorageDirectory().getPath());
        totalStorage=stats[0];
        freeStorage=stats[1];
      }
 catch (      RemoteException e) {
        Log.w(TAG,"Problem in container service",e);
      }
    }
    final int N=mApplicationsAdapter.getCount();
    for (int i=0; i < N; i++) {
      ApplicationsState.AppEntry ae=mApplicationsAdapter.getAppEntry(i);
      appStorage+=ae.externalCodeSize + ae.externalDataSize;
    }
  }
 else {
    if (!mLastShowedInternalStorage) {
      mLastShowedInternalStorage=true;
    }
    newLabel=getActivity().getText(R.string.internal_storage);
    if (mContainerService != null) {
      try {
        final long[] stats=mContainerService.getFileSystemStats(Environment.getDataDirectory().getPath());
        totalStorage=stats[0];
        freeStorage=stats[1];
      }
 catch (      RemoteException e) {
        Log.w(TAG,"Problem in container service",e);
      }
    }
    final boolean emulatedStorage=Environment.isExternalStorageEmulated();
    final int N=mApplicationsAdapter.getCount();
    for (int i=0; i < N; i++) {
      ApplicationsState.AppEntry ae=mApplicationsAdapter.getAppEntry(i);
      appStorage+=ae.codeSize + ae.dataSize;
      if (emulatedStorage) {
        appStorage+=ae.externalCodeSize + ae.externalDataSize;
      }
    }
    freeStorage+=mApplicationsState.sumCacheSizes();
  }
  if (newLabel != null) {
    mStorageChartLabel.setText(newLabel);
  }
  if (totalStorage > 0) {
    mColorBar.setRatios((totalStorage - freeStorage - appStorage) / (float)totalStorage,appStorage / (float)totalStorage,freeStorage / (float)totalStorage);
    long usedStorage=totalStorage - freeStorage;
    if (mLastUsedStorage != usedStorage) {
      mLastUsedStorage=usedStorage;
      String sizeStr=Formatter.formatShortFileSize(getActivity(),usedStorage);
      mUsedStorageText.setText(getActivity().getResources().getString(R.string.service_foreground_processes,sizeStr));
    }
    if (mLastFreeStorage != freeStorage) {
      mLastFreeStorage=freeStorage;
      String sizeStr=Formatter.formatShortFileSize(getActivity(),freeStorage);
      mFreeStorageText.setText(getActivity().getResources().getString(R.string.service_background_processes,sizeStr));
    }
  }
 else {
    mColorBar.setRatios(0,0,0);
    if (mLastUsedStorage != -1) {
      mLastUsedStorage=-1;
      mUsedStorageText.setText("");
    }
    if (mLastFreeStorage != -1) {
      mLastFreeStorage=-1;
      mFreeStorageText.setText("");
    }
  }
}
