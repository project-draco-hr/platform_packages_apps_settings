{
  final ArrayList<ProcStatsEntry> entries=new ArrayList<>();
  for (int ie=0; ie < mApp.mEntries.size(); ie++) {
    ProcStatsEntry entry=mApp.mEntries.get(ie);
    if (entry.mPackage.equals("os")) {
      entry.mLabel=entry.mName;
    }
 else {
      if (mApp.mEntries.size() > 1) {
        entry.mLabel=getString(R.string.process_format,(ie + 1));
      }
 else {
        entry.mLabel=getString(R.string.process);
      }
    }
    entries.add(entry);
  }
  Collections.sort(entries,sEntryCompare);
  for (int ie=0; ie < entries.size(); ie++) {
    ProcStatsEntry entry=entries.get(ie);
    PreferenceCategory processPref=new PreferenceCategory(getActivity());
    processPref.setLayoutResource(R.layout.process_preference_category);
    processPref.setTitle(entry.mLabel);
    long memoryUse=Math.max((long)(entry.mRunWeight * mWeightToRam),(long)(entry.mBgWeight * mWeightToRam));
    String memoryString=Formatter.formatShortFileSize(getActivity(),memoryUse);
    CharSequence frequency=ProcStatsPackageEntry.getFrequency(entry.mRunDuration / (float)mTotalTime,getActivity());
    processPref.setSummary(getString(R.string.memory_use_running_format,memoryString,frequency));
    getPreferenceScreen().addPreference(processPref);
    fillServicesSection(entry,processPref);
  }
}
