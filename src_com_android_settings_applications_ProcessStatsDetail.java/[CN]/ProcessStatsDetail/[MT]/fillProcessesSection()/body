{
  final ArrayList<ProcStatsEntry> entries=new ArrayList<>();
  for (int ie=0; ie < mApp.mEntries.size(); ie++) {
    ProcStatsEntry entry=mApp.mEntries.get(ie);
    if (entry.mPackage.equals("os")) {
      entry.mLabel=entry.mName;
    }
 else {
      entry.mLabel=getProcessName(mApp.mUiLabel,entry);
    }
    entries.add(entry);
  }
  Collections.sort(entries,sEntryCompare);
  for (int ie=0; ie < entries.size(); ie++) {
    ProcStatsEntry entry=entries.get(ie);
    Preference processPref=new Preference(getActivity());
    processPref.setTitle(entry.mLabel);
    long duration=Math.max(entry.mRunDuration,entry.mBgDuration);
    long memoryUse=Math.max((long)(entry.mRunWeight * mWeightToRam),(long)(entry.mBgWeight * mWeightToRam));
    String memoryString=Formatter.formatShortFileSize(getActivity(),memoryUse);
    CharSequence frequency=ProcStatsPackageEntry.getFrequency(duration / (float)mTotalTime,getActivity());
    processPref.setSummary(getString(R.string.memory_use_running_format,memoryString,frequency));
    getPreferenceScreen().addPreference(processPref);
  }
}
