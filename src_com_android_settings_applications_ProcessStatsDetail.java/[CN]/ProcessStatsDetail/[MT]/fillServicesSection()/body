{
  final HashMap<String,PkgService> pkgServices=new HashMap<>();
  final ArrayList<PkgService> pkgList=new ArrayList<>();
  for (int ie=0; ie < mApp.mEntries.size(); ie++) {
    ProcStatsEntry ent=mApp.mEntries.get(ie);
    for (int ip=0; ip < ent.mServices.size(); ip++) {
      String pkg=ent.mServices.keyAt(ip);
      PkgService psvc=null;
      ArrayList<ProcStatsEntry.Service> services=ent.mServices.valueAt(ip);
      for (int is=services.size() - 1; is >= 0; is--) {
        ProcStatsEntry.Service pent=services.get(is);
        if (pent.mDuration >= mOnePercentTime) {
          if (psvc == null) {
            psvc=pkgServices.get(pkg);
            if (psvc == null) {
              psvc=new PkgService();
              pkgServices.put(pkg,psvc);
              pkgList.add(psvc);
            }
          }
          psvc.mServices.add(pent);
          psvc.mDuration+=pent.mDuration;
        }
      }
    }
  }
  Collections.sort(pkgList,sServicePkgCompare);
  for (int ip=0; ip < pkgList.size(); ip++) {
    ArrayList<ProcStatsEntry.Service> services=pkgList.get(ip).mServices;
    Collections.sort(services,sServiceCompare);
    if (pkgList.size() > 1) {
      addPackageHeaderItem(mServicesParent,services.get(0).mPackage);
    }
    for (int is=0; is < services.size(); is++) {
      ProcStatsEntry.Service service=services.get(is);
      String label=service.mName;
      int tail=label.lastIndexOf('.');
      if (tail >= 0 && tail < (label.length() - 1)) {
        label=label.substring(tail + 1);
      }
      String percentage=Utils.formatPercentage(service.mDuration,mTotalTime);
      addDetailsItem(mServicesParent,label,percentage);
    }
  }
}
