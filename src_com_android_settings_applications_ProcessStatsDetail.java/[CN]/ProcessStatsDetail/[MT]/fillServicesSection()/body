{
  if (mEntry.mServices.size() > 0) {
    boolean addPackageSections=false;
    if (mEntry.mServices.size() > 1 || !mEntry.mServices.valueAt(0).get(0).mPackage.equals(mEntry.mPackage)) {
      addPackageSections=true;
    }
    for (int ip=0; ip < mEntry.mServices.size(); ip++) {
      ArrayList<ProcStatsEntry.Service> services=(ArrayList<ProcStatsEntry.Service>)mEntry.mServices.valueAt(ip).clone();
      Collections.sort(services,sServiceCompare);
      if (addPackageSections) {
        addPackageHeaderItem(mServicesParent,services.get(0).mPackage);
      }
      for (int is=0; is < services.size(); is++) {
        ProcStatsEntry.Service service=services.get(is);
        String label=service.mName;
        int tail=label.lastIndexOf('.');
        if (tail >= 0 && tail < (label.length() - 1)) {
          label=label.substring(tail + 1);
        }
        long duration=service.mDuration;
        final double percentOfTime=(((double)duration) / mTotalTime) * 100;
        addDetailsItem(mServicesParent,label,getActivity().getResources().getString(R.string.percentage,(int)Math.ceil(percentOfTime)));
      }
    }
  }
}
