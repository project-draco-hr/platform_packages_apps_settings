{
  Context context=getContext();
  MemInfo memInfo=mStatsManager.getMemInfo();
  double usedRam=memInfo.realUsedRam;
  double totalRam=memInfo.realTotalRam;
  double freeRam=memInfo.realFreeRam;
  BytesResult usedResult=Formatter.formatBytes(context.getResources(),(long)usedRam,Formatter.FLAG_SHORTER);
  String totalString=Formatter.formatShortFileSize(context,(long)totalRam);
  String freeString=Formatter.formatShortFileSize(context,(long)freeRam);
  CharSequence memString;
  CharSequence[] memStatesStr=getResources().getTextArray(R.array.ram_states);
  int memState=mStatsManager.getMemState();
  if (memState >= 0 && memState < memStatesStr.length - 1) {
    memString=memStatesStr[memState];
  }
 else {
    memString=memStatesStr[memStatesStr.length - 1];
  }
  mSummaryPref.setAmount(usedResult.value);
  mSummaryPref.setUnits(usedResult.units);
  float usedRatio=(float)(usedRam / (freeRam + usedRam));
  mSummaryPref.setRatios(usedRatio,0,1 - usedRatio);
  mPerformance.setSummary(memString);
  mTotalMemory.setSummary(totalString);
  mAverageUsed.setSummary(Utils.formatPercentage((long)usedRam,(long)totalRam));
  mFree.setSummary(freeString);
  String durationString=getString(sDurationLabels[mDurationIndex]);
  int numApps=mStatsManager.getEntries().size();
  mAppListPreference.setSummary(getResources().getQuantityString(R.plurals.memory_usage_apps_summary,numApps,numApps,durationString));
}
