{
  updateMenus();
  if (mStats == null || mLastDuration != mDuration) {
    load();
  }
  int[] stats;
  int statsLabel;
  if (mStatsType == MENU_TYPE_FOREGROUND) {
    stats=FOREGROUND_PROC_STATES;
    statsLabel=R.string.process_stats_type_foreground;
  }
 else   if (mStatsType == MENU_TYPE_CACHED) {
    stats=CACHED_PROC_STATES;
    statsLabel=R.string.process_stats_type_cached;
  }
 else {
    stats=mShowSystem ? BACKGROUND_AND_SYSTEM_PROC_STATES : ProcessStats.BACKGROUND_PROC_STATES;
    statsLabel=R.string.process_stats_type_background;
  }
  mAppListGroup.removeAll();
  mAppListGroup.setOrderingAsAdded(false);
  mMemStatusPref.setOrder(-2);
  mAppListGroup.addPreference(mMemStatusPref);
  String durationString=Utils.formatElapsedTime(getActivity(),mStats.mTimePeriodEndRealtime - mStats.mTimePeriodStartRealtime,false);
  CharSequence memString;
  CharSequence[] memStatesStr=getResources().getTextArray(R.array.ram_states);
  if (mMemState >= 0 && mMemState < memStatesStr.length) {
    memString=memStatesStr[mMemState];
  }
 else {
    memString="?";
  }
  mMemStatusPref.setTitle(getActivity().getString(R.string.process_stats_total_duration,getActivity().getString(statsLabel),durationString));
  mMemStatusPref.setSummary(getActivity().getString(R.string.process_stats_memory_status,memString));
  long now=SystemClock.uptimeMillis();
  final PackageManager pm=getActivity().getPackageManager();
  mTotalTime=ProcessStats.dumpSingleTime(null,null,mStats.mMemFactorDurations,mStats.mMemFactor,mStats.mStartTime,now);
  if (DEBUG)   Log.d(TAG,"Total time of stats: " + makeDuration(mTotalTime));
  for (int i=0; i < mMemTimes.length; i++) {
    mMemTimes[i]=0;
  }
  for (int iscreen=0; iscreen < ProcessStats.ADJ_COUNT; iscreen+=ProcessStats.ADJ_SCREEN_MOD) {
    for (int imem=0; imem < ProcessStats.ADJ_MEM_FACTOR_COUNT; imem++) {
      int state=imem + iscreen;
      mMemTimes[imem]+=mStats.mMemFactorDurations[state];
    }
  }
  long memTotalTime;
  int[] memStates;
  LinearColorPreference colors=new LinearColorPreference(getActivity());
  colors.setOrder(-1);
switch (mMemRegion) {
case LinearColorBar.REGION_RED:
    memTotalTime=mMemTimes[ProcessStats.ADJ_MEM_FACTOR_CRITICAL];
  memStates=RED_MEM_STATES;
break;
case LinearColorBar.REGION_YELLOW:
memTotalTime=mMemTimes[ProcessStats.ADJ_MEM_FACTOR_CRITICAL] + mMemTimes[ProcessStats.ADJ_MEM_FACTOR_LOW] + mMemTimes[ProcessStats.ADJ_MEM_FACTOR_MODERATE];
memStates=YELLOW_MEM_STATES;
break;
default :
memTotalTime=mTotalTime;
memStates=ProcessStats.ALL_MEM_ADJ;
break;
}
colors.setColoredRegions(LinearColorBar.REGION_RED);
int[] badColors=com.android.settings.Utils.BADNESS_COLORS;
long timeGood=mMemTimes[ProcessStats.ADJ_MEM_FACTOR_NORMAL];
timeGood+=(mMemTimes[ProcessStats.ADJ_MEM_FACTOR_MODERATE] * 2) / 3;
timeGood+=mMemTimes[ProcessStats.ADJ_MEM_FACTOR_LOW] / 3;
float memBadness=((float)timeGood) / mTotalTime;
int badnessColor=badColors[1 + Math.round(memBadness * (badColors.length - 2))];
colors.setColors(badnessColor,badnessColor,badnessColor);
ProcessStats.TotalMemoryUseCollection totalMem=new ProcessStats.TotalMemoryUseCollection(ProcessStats.ALL_SCREEN_ADJ,memStates);
mStats.computeTotalMemoryUse(totalMem,now);
double freeWeight=totalMem.sysMemFreeWeight + totalMem.sysMemCachedWeight;
double usedWeight=totalMem.sysMemKernelWeight + totalMem.sysMemNativeWeight + totalMem.sysMemZRamWeight;
double backgroundWeight=0, persBackgroundWeight=0;
mMemCachedWeight=totalMem.sysMemCachedWeight;
mMemFreeWeight=totalMem.sysMemFreeWeight;
mMemZRamWeight=totalMem.sysMemZRamWeight;
mMemKernelWeight=totalMem.sysMemKernelWeight;
mMemNativeWeight=totalMem.sysMemNativeWeight;
for (int i=0; i < ProcessStats.STATE_COUNT; i++) {
if (i == ProcessStats.STATE_SERVICE_RESTARTING) {
mMemStateWeights[i]=0;
}
 else {
mMemStateWeights[i]=totalMem.processStateWeight[i];
if (i >= ProcessStats.STATE_HOME) {
freeWeight+=totalMem.processStateWeight[i];
}
 else {
usedWeight+=totalMem.processStateWeight[i];
}
if (i >= ProcessStats.STATE_IMPORTANT_FOREGROUND) {
backgroundWeight+=totalMem.processStateWeight[i];
persBackgroundWeight+=totalMem.processStateWeight[i];
}
if (i == ProcessStats.STATE_PERSISTENT) {
persBackgroundWeight+=totalMem.processStateWeight[i];
}
}
}
if (DEBUG) {
Log.i(TAG,"Used RAM: " + Formatter.formatShortFileSize(getActivity(),(long)((usedWeight * 1024) / memTotalTime)));
Log.i(TAG,"Free RAM: " + Formatter.formatShortFileSize(getActivity(),(long)((freeWeight * 1024) / memTotalTime)));
Log.i(TAG,"Total RAM: " + Formatter.formatShortFileSize(getActivity(),(long)(((freeWeight + usedWeight) * 1024) / memTotalTime)));
Log.i(TAG,"Background+Cached RAM: " + Formatter.formatShortFileSize(getActivity(),(long)((backgroundWeight * 1024) / memTotalTime)));
}
mMemTotalWeight=freeWeight + usedWeight;
double usedRam=(usedWeight * 1024) / memTotalTime;
double freeRam=(freeWeight * 1024) / memTotalTime;
double totalRam=usedRam + freeRam;
MemInfoReader memReader=new MemInfoReader();
memReader.readMemInfo();
double realTotalRam=memReader.getTotalSize();
double totalScale=realTotalRam / totalRam;
double realUsedRam=usedRam * totalScale;
double realFreeRam=freeRam * totalScale;
if (DEBUG) {
Log.i(TAG,"Scaled Used RAM: " + Formatter.formatShortFileSize(getActivity(),(long)realUsedRam));
Log.i(TAG,"Scaled Free RAM: " + Formatter.formatShortFileSize(getActivity(),(long)realFreeRam));
}
ActivityManager.MemoryInfo memInfo=new ActivityManager.MemoryInfo();
((ActivityManager)getActivity().getSystemService(Context.ACTIVITY_SERVICE)).getMemoryInfo(memInfo);
if (memInfo.hiddenAppThreshold >= realFreeRam) {
realUsedRam=realFreeRam;
realFreeRam=0;
}
 else {
realUsedRam+=memInfo.hiddenAppThreshold;
realFreeRam-=memInfo.hiddenAppThreshold;
}
if (DEBUG) {
Log.i(TAG,"Adj Scaled Used RAM: " + Formatter.formatShortFileSize(getActivity(),(long)realUsedRam));
Log.i(TAG,"Adj Scaled Free RAM: " + Formatter.formatShortFileSize(getActivity(),(long)realFreeRam));
}
float usedRatio=(float)(realUsedRam / (realFreeRam + realUsedRam));
colors.setRatios(usedRatio,0,1 - usedRatio);
if (false) {
colors.setOnRegionTappedListener(this);
switch (mMemRegion) {
case LinearColorBar.REGION_RED:
colors.setColoredRegions(LinearColorBar.REGION_RED);
memTotalTime=mMemTimes[ProcessStats.ADJ_MEM_FACTOR_CRITICAL];
memStates=RED_MEM_STATES;
break;
case LinearColorBar.REGION_YELLOW:
colors.setColoredRegions(LinearColorBar.REGION_RED | LinearColorBar.REGION_YELLOW);
memTotalTime=mMemTimes[ProcessStats.ADJ_MEM_FACTOR_CRITICAL] + mMemTimes[ProcessStats.ADJ_MEM_FACTOR_LOW] + mMemTimes[ProcessStats.ADJ_MEM_FACTOR_MODERATE];
memStates=YELLOW_MEM_STATES;
break;
default :
colors.setColoredRegions(LinearColorBar.REGION_ALL);
memTotalTime=mTotalTime;
memStates=ProcessStats.ALL_MEM_ADJ;
break;
}
colors.setRatios(mMemTimes[ProcessStats.ADJ_MEM_FACTOR_CRITICAL] / (float)mTotalTime,(mMemTimes[ProcessStats.ADJ_MEM_FACTOR_LOW] + mMemTimes[ProcessStats.ADJ_MEM_FACTOR_MODERATE]) / (float)mTotalTime,mMemTimes[ProcessStats.ADJ_MEM_FACTOR_NORMAL] / (float)mTotalTime);
}
mAppListGroup.addPreference(colors);
ProcessStats.ProcessDataCollection totals=new ProcessStats.ProcessDataCollection(ProcessStats.ALL_SCREEN_ADJ,memStates,stats);
ArrayList<ProcStatsEntry> entries=new ArrayList<ProcStatsEntry>();
if (DEBUG) Log.d(TAG,"-------------------- PULLING PROCESSES");
final ProcessMap<ProcStatsEntry> entriesMap=new ProcessMap<ProcStatsEntry>();
for (int ipkg=0, N=mStats.mPackages.getMap().size(); ipkg < N; ipkg++) {
final SparseArray<SparseArray<ProcessStats.PackageState>> pkgUids=mStats.mPackages.getMap().valueAt(ipkg);
for (int iu=0; iu < pkgUids.size(); iu++) {
final SparseArray<ProcessStats.PackageState> vpkgs=pkgUids.valueAt(iu);
for (int iv=0; iv < vpkgs.size(); iv++) {
final ProcessStats.PackageState st=vpkgs.valueAt(iv);
for (int iproc=0; iproc < st.mProcesses.size(); iproc++) {
final ProcessStats.ProcessState pkgProc=st.mProcesses.valueAt(iproc);
final ProcessStats.ProcessState proc=mStats.mProcesses.get(pkgProc.mName,pkgProc.mUid);
if (proc == null) {
Log.w(TAG,"No process found for pkg " + st.mPackageName + "/"+ st.mUid+ " proc name "+ pkgProc.mName);
continue;
}
ProcStatsEntry ent=entriesMap.get(proc.mName,proc.mUid);
if (ent == null) {
ent=new ProcStatsEntry(proc,st.mPackageName,totals,mUseUss,mStatsType == MENU_TYPE_BACKGROUND);
if (ent.mDuration > 0) {
if (DEBUG) Log.d(TAG,"Adding proc " + proc.mName + "/"+ proc.mUid+ ": time="+ makeDuration(ent.mDuration)+ " ("+ ((((double)ent.mDuration) / memTotalTime) * 100)+ "%)"+ " pss="+ ent.mAvgPss);
entriesMap.put(proc.mName,proc.mUid,ent);
entries.add(ent);
}
}
 else {
ent.addPackage(st.mPackageName);
}
}
}
}
}
if (DEBUG) Log.d(TAG,"-------------------- MAPPING SERVICES");
if (mStatsType == MENU_TYPE_BACKGROUND) {
for (int ip=0, N=mStats.mPackages.getMap().size(); ip < N; ip++) {
SparseArray<SparseArray<ProcessStats.PackageState>> uids=mStats.mPackages.getMap().valueAt(ip);
for (int iu=0; iu < uids.size(); iu++) {
SparseArray<ProcessStats.PackageState> vpkgs=uids.valueAt(iu);
for (int iv=0; iv < vpkgs.size(); iv++) {
ProcessStats.PackageState ps=vpkgs.valueAt(iv);
for (int is=0, NS=ps.mServices.size(); is < NS; is++) {
ProcessStats.ServiceState ss=ps.mServices.valueAt(is);
if (ss.mProcessName != null) {
ProcStatsEntry ent=entriesMap.get(ss.mProcessName,uids.keyAt(iu));
if (ent != null) {
if (DEBUG) Log.d(TAG,"Adding service " + ps.mPackageName + "/"+ ss.mName+ "/"+ uids.keyAt(iu)+ " to proc "+ ss.mProcessName);
ent.addService(ss);
}
 else {
Log.w(TAG,"No process " + ss.mProcessName + "/"+ uids.keyAt(iu)+ " for service "+ ss.mName);
}
}
}
}
}
}
}
Collections.sort(entries,sEntryCompare);
long maxWeight=1;
for (int i=0, N=(entries != null ? entries.size() : 0); i < N; i++) {
ProcStatsEntry proc=entries.get(i);
if (maxWeight < proc.mWeight) {
maxWeight=proc.mWeight;
}
}
if (mStatsType == MENU_TYPE_BACKGROUND) {
mMaxWeight=(long)(mShowSystem ? persBackgroundWeight : backgroundWeight);
if (mMaxWeight < maxWeight) {
mMaxWeight=maxWeight;
}
if (DEBUG) {
Log.i(TAG,"Bar max RAM: " + Formatter.formatShortFileSize(getActivity(),(mMaxWeight * 1024) / memTotalTime));
}
}
 else {
mMaxWeight=maxWeight;
}
if (DEBUG) Log.d(TAG,"-------------------- BUILDING UI");
for (int i=0, N=(entries != null ? entries.size() : 0); i < N; i++) {
ProcStatsEntry proc=entries.get(i);
final double percentOfWeight=(((double)proc.mWeight) / mMaxWeight) * 100;
final double percentOfTime=(((double)proc.mDuration) / memTotalTime) * 100;
if (percentOfWeight < 1 && percentOfTime < 33) {
if (DEBUG) Log.d(TAG,"Skipping " + proc.mName + " weight="+ percentOfWeight+ " time="+ percentOfTime);
continue;
}
ProcessStatsPreference pref=new ProcessStatsPreference(getActivity());
pref.init(null,proc);
proc.evaluateTargetPackage(pm,mStats,totals,sEntryCompare,mUseUss,mStatsType == MENU_TYPE_BACKGROUND);
proc.retrieveUiData(pm);
pref.setTitle(proc.mUiLabel);
if (proc.mUiTargetApp != null) {
pref.setIcon(proc.mUiTargetApp.loadIcon(pm));
}
pref.setOrder(i);
pref.setPercent(percentOfWeight,percentOfTime);
mAppListGroup.addPreference(pref);
if (mStatsType == MENU_TYPE_BACKGROUND) {
if (DEBUG) {
Log.i(TAG,"App " + proc.mUiLabel + ": weightedRam="+ Formatter.formatShortFileSize(getActivity(),(proc.mWeight * 1024) / memTotalTime)+ ", avgRam="+ Formatter.formatShortFileSize(getActivity(),(proc.mAvgPss * 1024)));
}
}
if (mAppListGroup.getPreferenceCount() > (MAX_ITEMS_TO_LIST + 1)) {
if (DEBUG) Log.d(TAG,"Done with UI, hit item limit!");
break;
}
}
}
