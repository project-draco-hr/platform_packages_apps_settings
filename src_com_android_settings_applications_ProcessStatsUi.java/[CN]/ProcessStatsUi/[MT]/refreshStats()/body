{
  updateMenus();
  if (mStats == null || mLastDuration != mDuration) {
    load();
  }
  int[] stats;
  int statsLabel;
  if (mStatsType == MENU_TYPE_FOREGROUND) {
    stats=FOREGROUND_PROC_STATES;
    statsLabel=R.string.process_stats_type_foreground;
  }
 else   if (mStatsType == MENU_TYPE_CACHED) {
    stats=CACHED_PROC_STATES;
    statsLabel=R.string.process_stats_type_cached;
  }
 else {
    stats=mShowSystem ? BACKGROUND_AND_SYSTEM_PROC_STATES : ProcessStats.BACKGROUND_PROC_STATES;
    statsLabel=R.string.process_stats_type_background;
  }
  mAppListGroup.removeAll();
  mAppListGroup.setOrderingAsAdded(false);
  mMemStatusPref.setOrder(-2);
  mAppListGroup.addPreference(mMemStatusPref);
  String durationString=Utils.formatElapsedTime(getActivity(),mStats.mTimePeriodEndRealtime - mStats.mTimePeriodStartRealtime,false);
  CharSequence memString;
  CharSequence[] memStates=getResources().getTextArray(R.array.ram_states);
  if (mMemState >= 0 && mMemState < memStates.length) {
    memString=memStates[mMemState];
  }
 else {
    memString="?";
  }
  mMemStatusPref.setTitle(getActivity().getString(R.string.process_stats_total_duration,getActivity().getString(statsLabel),durationString));
  mMemStatusPref.setSummary(getActivity().getString(R.string.process_stats_memory_status,memString));
  ProcessStats.ProcessDataCollection totals=new ProcessStats.ProcessDataCollection(ProcessStats.ALL_SCREEN_ADJ,ProcessStats.ALL_MEM_ADJ,stats);
  long now=SystemClock.uptimeMillis();
  final PackageManager pm=getActivity().getPackageManager();
  mTotalTime=ProcessStats.dumpSingleTime(null,null,mStats.mMemFactorDurations,mStats.mMemFactor,mStats.mStartTime,now);
  if (DEBUG)   Log.d(TAG,"Total time of stats: " + makeDuration(mTotalTime));
  LinearColorPreference colors=new LinearColorPreference(getActivity());
  colors.setOrder(-1);
  mAppListGroup.addPreference(colors);
  long[] memTimes=new long[ProcessStats.ADJ_MEM_FACTOR_COUNT];
  for (int iscreen=0; iscreen < ProcessStats.ADJ_COUNT; iscreen+=ProcessStats.ADJ_SCREEN_MOD) {
    for (int imem=0; imem < ProcessStats.ADJ_MEM_FACTOR_COUNT; imem++) {
      int state=imem + iscreen;
      memTimes[imem]+=mStats.mMemFactorDurations[state];
    }
  }
  colors.setRatios(memTimes[ProcessStats.ADJ_MEM_FACTOR_CRITICAL] / (float)mTotalTime,(memTimes[ProcessStats.ADJ_MEM_FACTOR_LOW] + memTimes[ProcessStats.ADJ_MEM_FACTOR_MODERATE]) / (float)mTotalTime,memTimes[ProcessStats.ADJ_MEM_FACTOR_NORMAL] / (float)mTotalTime);
  ArrayList<ProcStatsEntry> entries=new ArrayList<ProcStatsEntry>();
  if (DEBUG)   Log.d(TAG,"-------------------- PULLING PROCESSES");
  final ProcessMap<ProcStatsEntry> entriesMap=new ProcessMap<ProcStatsEntry>();
  for (int ipkg=0, N=mStats.mPackages.getMap().size(); ipkg < N; ipkg++) {
    final SparseArray<ProcessStats.PackageState> pkgUids=mStats.mPackages.getMap().valueAt(ipkg);
    for (int iu=0; iu < pkgUids.size(); iu++) {
      final ProcessStats.PackageState st=pkgUids.valueAt(iu);
      for (int iproc=0; iproc < st.mProcesses.size(); iproc++) {
        final ProcessStats.ProcessState pkgProc=st.mProcesses.valueAt(iproc);
        final ProcessStats.ProcessState proc=mStats.mProcesses.get(pkgProc.mName,pkgProc.mUid);
        if (proc == null) {
          Log.w(TAG,"No process found for pkg " + st.mPackageName + "/"+ st.mUid+ " proc name "+ pkgProc.mName);
          continue;
        }
        ProcStatsEntry ent=entriesMap.get(proc.mName,proc.mUid);
        if (ent == null) {
          ent=new ProcStatsEntry(proc,st.mPackageName,totals,mUseUss,mStatsType == MENU_TYPE_BACKGROUND);
          if (ent.mDuration > 0) {
            if (DEBUG)             Log.d(TAG,"Adding proc " + proc.mName + "/"+ proc.mUid+ ": time="+ makeDuration(ent.mDuration)+ " ("+ ((((double)ent.mDuration) / mTotalTime) * 100)+ "%)"+ " pss="+ ent.mAvgPss);
            entriesMap.put(proc.mName,proc.mUid,ent);
            entries.add(ent);
          }
        }
 else {
          ent.addPackage(st.mPackageName);
        }
      }
    }
  }
  if (DEBUG)   Log.d(TAG,"-------------------- MAPPING SERVICES");
  if (mStatsType == MENU_TYPE_BACKGROUND) {
    for (int ip=0, N=mStats.mPackages.getMap().size(); ip < N; ip++) {
      SparseArray<ProcessStats.PackageState> uids=mStats.mPackages.getMap().valueAt(ip);
      for (int iu=0; iu < uids.size(); iu++) {
        ProcessStats.PackageState ps=uids.valueAt(iu);
        for (int is=0, NS=ps.mServices.size(); is < NS; is++) {
          ProcessStats.ServiceState ss=ps.mServices.valueAt(is);
          if (ss.mProcessName != null) {
            ProcStatsEntry ent=entriesMap.get(ss.mProcessName,uids.keyAt(iu));
            if (ent != null) {
              if (DEBUG)               Log.d(TAG,"Adding service " + ps.mPackageName + "/"+ ss.mName+ "/"+ uids.keyAt(iu)+ " to proc "+ ss.mProcessName);
              ent.addService(ss);
            }
 else {
              Log.w(TAG,"No process " + ss.mProcessName + "/"+ uids.keyAt(iu)+ " for service "+ ss.mName);
            }
          }
        }
      }
    }
  }
  Collections.sort(entries,sEntryCompare);
  long maxWeight=1;
  for (int i=0, N=(entries != null ? entries.size() : 0); i < N; i++) {
    ProcStatsEntry proc=entries.get(i);
    if (maxWeight < proc.mWeight) {
      maxWeight=proc.mWeight;
    }
  }
  mMaxWeight=maxWeight;
  if (DEBUG)   Log.d(TAG,"-------------------- BUILDING UI");
  for (int i=0, N=(entries != null ? entries.size() : 0); i < N; i++) {
    ProcStatsEntry proc=entries.get(i);
    final double percentOfWeight=(((double)proc.mWeight) / maxWeight) * 100;
    final double percentOfTime=(((double)proc.mDuration) / mTotalTime) * 100;
    if (percentOfWeight < 1 && percentOfTime < 33) {
      if (DEBUG)       Log.d(TAG,"Skipping " + proc.mName + " weight="+ percentOfWeight+ " time="+ percentOfTime);
      continue;
    }
    ProcessStatsPreference pref=new ProcessStatsPreference(getActivity(),null,proc);
    proc.evaluateTargetPackage(pm,mStats,totals,sEntryCompare,mUseUss,mStatsType == MENU_TYPE_BACKGROUND);
    proc.retrieveUiData(pm);
    pref.setTitle(proc.mUiLabel);
    if (proc.mUiTargetApp != null) {
      pref.setIcon(proc.mUiTargetApp.loadIcon(pm));
    }
    pref.setOrder(i);
    pref.setPercent(percentOfWeight,percentOfTime);
    mAppListGroup.addPreference(pref);
    if (mAppListGroup.getPreferenceCount() > (MAX_ITEMS_TO_LIST + 1)) {
      if (DEBUG)       Log.d(TAG,"Done with UI, hit item limit!");
      break;
    }
  }
}
