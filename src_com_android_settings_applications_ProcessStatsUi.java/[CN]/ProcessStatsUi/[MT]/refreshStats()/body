{
  if (mStats == null) {
    load();
  }
  mAppListGroup.removeAll();
  mAppListGroup.setOrderingAsAdded(false);
  mMemStatusPref.setOrder(-2);
  mAppListGroup.addPreference(mMemStatusPref);
  String durationString=Utils.formatElapsedTime(getActivity(),mStats.mTimePeriodEndRealtime - mStats.mTimePeriodStartRealtime);
  CharSequence memString;
  CharSequence[] memStates=getResources().getTextArray(R.array.ram_states);
  if (mMemState >= 0 && mMemState < memStates.length) {
    memString=memStates[mMemState];
  }
 else {
    memString="?";
  }
  mMemStatusPref.setTitle(getActivity().getString(R.string.process_stats_total_duration,durationString));
  mMemStatusPref.setSummary(getActivity().getString(R.string.process_stats_memory_status,memString));
  ProcessStats.ProcessDataCollection totals=new ProcessStats.ProcessDataCollection(ProcessStats.ALL_SCREEN_ADJ,ProcessStats.ALL_MEM_ADJ,ProcessStats.BACKGROUND_PROC_STATES);
  long now=SystemClock.uptimeMillis();
  final PackageManager pm=getActivity().getPackageManager();
  mTotalTime=ProcessStats.dumpSingleTime(null,null,mStats.mMemFactorDurations,mStats.mMemFactor,mStats.mStartTime,now);
  LinearColorPreference colors=new LinearColorPreference(getActivity());
  colors.setOrder(-1);
  mAppListGroup.addPreference(colors);
  long[] memTimes=new long[ProcessStats.ADJ_MEM_FACTOR_COUNT];
  for (int iscreen=0; iscreen < ProcessStats.ADJ_COUNT; iscreen+=ProcessStats.ADJ_SCREEN_MOD) {
    for (int imem=0; imem < ProcessStats.ADJ_MEM_FACTOR_COUNT; imem++) {
      int state=imem + iscreen;
      memTimes[imem]+=mStats.mMemFactorDurations[state];
    }
  }
  colors.setRatios(memTimes[ProcessStats.ADJ_MEM_FACTOR_CRITICAL] / (float)mTotalTime,(memTimes[ProcessStats.ADJ_MEM_FACTOR_LOW] + memTimes[ProcessStats.ADJ_MEM_FACTOR_MODERATE]) / (float)mTotalTime,memTimes[ProcessStats.ADJ_MEM_FACTOR_NORMAL] / (float)mTotalTime);
  ArrayList<ProcStatsEntry> procs=new ArrayList<ProcStatsEntry>();
  ArrayMap<String,ProcStatsEntry> processes=new ArrayMap<String,ProcStatsEntry>(mStats.mProcesses.getMap().size());
  for (int ip=0, N=mStats.mProcesses.getMap().size(); ip < N; ip++) {
    SparseArray<ProcessStats.ProcessState> uids=mStats.mProcesses.getMap().valueAt(ip);
    for (int iu=0; iu < uids.size(); iu++) {
      ProcStatsEntry ent=new ProcStatsEntry(uids.valueAt(iu),totals);
      procs.add(ent);
      processes.put(ent.mName,ent);
    }
  }
  Collections.sort(procs,sEntryCompare);
  while (procs.size() > MAX_ITEMS_TO_LIST) {
    procs.remove(procs.size() - 1);
  }
  long maxWeight=0;
  for (int i=0, N=(procs != null ? procs.size() : 0); i < N; i++) {
    ProcStatsEntry proc=procs.get(i);
    if (maxWeight < proc.mWeight) {
      maxWeight=proc.mWeight;
    }
  }
  mMaxWeight=maxWeight;
  for (int i=0, N=(procs != null ? procs.size() : 0); i < N; i++) {
    ProcStatsEntry proc=procs.get(i);
    final double percentOfWeight=(((double)proc.mWeight) / maxWeight) * 100;
    final double percentOfTime=(((double)proc.mDuration) / mTotalTime) * 100;
    if (percentOfWeight < 1)     continue;
    ProcessStatsPreference pref=new ProcessStatsPreference(getActivity(),null,proc);
    proc.evaluateTargetPackage(mStats,totals,sEntryCompare);
    proc.retrieveUiData(pm);
    pref.setTitle(proc.mUiLabel);
    if (proc.mUiTargetApp != null) {
      pref.setIcon(proc.mUiTargetApp.loadIcon(pm));
    }
    pref.setOrder(i);
    pref.setPercent(percentOfWeight,percentOfTime);
    mAppListGroup.addPreference(pref);
    if (mAppListGroup.getPreferenceCount() > (MAX_ITEMS_TO_LIST + 1))     break;
  }
  for (int ip=0, N=mStats.mPackages.getMap().size(); ip < N; ip++) {
    SparseArray<ProcessStats.PackageState> uids=mStats.mPackages.getMap().valueAt(ip);
    for (int iu=0; iu < uids.size(); iu++) {
      ProcessStats.PackageState ps=uids.valueAt(iu);
      for (int is=0, NS=ps.mServices.size(); is < NS; is++) {
        ProcessStats.ServiceState ss=ps.mServices.valueAt(is);
        if (ss.mProcessName != null) {
          ProcStatsEntry ent=processes.get(ss.mProcessName);
          ent.addService(ss);
        }
      }
    }
  }
}
