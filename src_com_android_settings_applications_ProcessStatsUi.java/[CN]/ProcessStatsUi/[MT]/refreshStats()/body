{
  if (mStats == null) {
    load();
  }
  mAppListGroup.removeAll();
  mAppListGroup.setOrderingAsAdded(false);
  mMemStatusPref.setOrder(-2);
  mAppListGroup.addPreference(mMemStatusPref);
  String durationString=Utils.formatElapsedTime(getActivity(),mStats.mTimePeriodEndRealtime - mStats.mTimePeriodStartRealtime);
  CharSequence memString;
  CharSequence[] memStates=getResources().getTextArray(R.array.ram_states);
  if (mMemState >= 0 && mMemState < memStates.length) {
    memString=memStates[mMemState];
  }
 else {
    memString="?";
  }
  mMemStatusPref.setTitle(getActivity().getString(R.string.process_stats_total_duration,durationString));
  mMemStatusPref.setSummary(getActivity().getString(R.string.process_stats_memory_status,memString));
  ProcessStats.ProcessDataCollection totals=new ProcessStats.ProcessDataCollection(ProcessStats.ALL_SCREEN_ADJ,ProcessStats.ALL_MEM_ADJ,ProcessStats.BACKGROUND_PROC_STATES);
  long now=SystemClock.uptimeMillis();
  final PackageManager pm=getActivity().getPackageManager();
  mTotalTime=ProcessStats.dumpSingleTime(null,null,mStats.mMemFactorDurations,mStats.mMemFactor,mStats.mStartTime,now);
  LinearColorPreference colors=new LinearColorPreference(getActivity());
  colors.setOrder(-1);
  mAppListGroup.addPreference(colors);
  long[] memTimes=new long[ProcessStats.ADJ_MEM_FACTOR_COUNT];
  for (int iscreen=0; iscreen < ProcessStats.ADJ_COUNT; iscreen+=ProcessStats.ADJ_SCREEN_MOD) {
    for (int imem=0; imem < ProcessStats.ADJ_MEM_FACTOR_COUNT; imem++) {
      int state=imem + iscreen;
      memTimes[imem]+=mStats.mMemFactorDurations[state];
    }
  }
  colors.setRatios(memTimes[ProcessStats.ADJ_MEM_FACTOR_CRITICAL] / (float)mTotalTime,(memTimes[ProcessStats.ADJ_MEM_FACTOR_LOW] + memTimes[ProcessStats.ADJ_MEM_FACTOR_MODERATE]) / (float)mTotalTime,memTimes[ProcessStats.ADJ_MEM_FACTOR_NORMAL] / (float)mTotalTime);
  ArrayList<ProcStatsEntry> procs=new ArrayList<ProcStatsEntry>();
  for (int ip=0, N=mStats.mProcesses.getMap().size(); ip < N; ip++) {
    SparseArray<ProcessStats.ProcessState> uids=mStats.mProcesses.getMap().valueAt(ip);
    for (int iu=0; iu < uids.size(); iu++) {
      procs.add(new ProcStatsEntry(uids.valueAt(iu),totals));
    }
  }
  Collections.sort(procs,sEntryCompare);
  while (procs.size() > MAX_ITEMS_TO_LIST) {
    procs.remove(procs.size() - 1);
  }
  long maxWeight=0;
  for (int i=0, N=(procs != null ? procs.size() : 0); i < N; i++) {
    ProcStatsEntry proc=procs.get(i);
    if (maxWeight < proc.mWeight) {
      maxWeight=proc.mWeight;
    }
  }
  for (int i=0, N=(procs != null ? procs.size() : 0); i < N; i++) {
    ProcStatsEntry proc=procs.get(i);
    final double percentOfWeight=(((double)proc.mWeight) / maxWeight) * 100;
    final double percentOfTime=(((double)proc.mDuration) / mTotalTime) * 100;
    if (percentOfWeight < 1)     continue;
    ProcessStatsPreference pref=new ProcessStatsPreference(getActivity(),null);
    ApplicationInfo targetApp=null;
    String label=proc.mName;
    String pkgName=null;
    if (proc.mUnique) {
      pkgName=proc.mPackage;
      proc.addServices(mStats.getPackageStateLocked(proc.mPackage,proc.mUid));
    }
 else {
      ArrayList<ProcStatsEntry> subProcs=new ArrayList<ProcStatsEntry>();
      for (int ipkg=0, NPKG=mStats.mPackages.getMap().size(); ipkg < NPKG; ipkg++) {
        SparseArray<ProcessStats.PackageState> uids=mStats.mPackages.getMap().valueAt(ipkg);
        for (int iu=0, NU=uids.size(); iu < NU; iu++) {
          if (uids.keyAt(iu) != proc.mUid) {
            continue;
          }
          ProcessStats.PackageState pkgState=uids.valueAt(iu);
          boolean match=false;
          for (int iproc=0, NPROC=pkgState.mProcesses.size(); iproc < NPROC; iproc++) {
            ProcessStats.ProcessState subProc=pkgState.mProcesses.valueAt(iproc);
            if (subProc.mName.equals(proc.mName)) {
              match=true;
              subProcs.add(new ProcStatsEntry(subProc,totals));
            }
          }
          if (match) {
            proc.addServices(mStats.getPackageStateLocked(proc.mPackage,proc.mUid));
          }
        }
      }
      if (subProcs.size() > 1) {
        Collections.sort(subProcs,sEntryCompare);
        if (subProcs.get(0).mWeight > (subProcs.get(1).mWeight * 3)) {
          pkgName=subProcs.get(0).mPackage;
        }
      }
    }
    if (pkgName != null) {
      try {
        targetApp=pm.getApplicationInfo(pkgName,PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES);
        String name=targetApp.loadLabel(pm).toString();
        if (proc.mName.equals(pkgName)) {
          label=name;
        }
 else {
          if (proc.mName.startsWith(pkgName)) {
            int off=pkgName.length();
            if (proc.mName.length() > off) {
              off++;
            }
            label=name + " (" + proc.mName.substring(off)+ ")";
          }
 else {
            label=name + " (" + proc.mName+ ")";
          }
        }
      }
 catch (      PackageManager.NameNotFoundException e) {
      }
    }
    if (targetApp == null) {
      String[] packages=pm.getPackagesForUid(proc.mUid);
      if (packages != null) {
        for (        String curPkg : packages) {
          try {
            final PackageInfo pi=pm.getPackageInfo(curPkg,PackageManager.GET_DISABLED_COMPONENTS | PackageManager.GET_DISABLED_UNTIL_USED_COMPONENTS | PackageManager.GET_UNINSTALLED_PACKAGES);
            if (pi.sharedUserLabel != 0) {
              targetApp=pi.applicationInfo;
              final CharSequence nm=pm.getText(curPkg,pi.sharedUserLabel,pi.applicationInfo);
              if (nm != null) {
                label=nm.toString() + " (" + proc.mName+ ")";
              }
 else {
                label=targetApp.loadLabel(pm).toString() + " (" + proc.mName+ ")";
              }
              break;
            }
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
      }
 else {
        Log.i(TAG,"No package for uid " + proc.mUid);
      }
    }
    pref.setTitle(label);
    if (targetApp != null) {
      pref.setIcon(targetApp.loadIcon(pm));
    }
    pref.setOrder(i);
    pref.setPercent(percentOfWeight,percentOfTime);
    mAppListGroup.addPreference(pref);
    if (mAppListGroup.getPreferenceCount() > (MAX_ITEMS_TO_LIST + 1))     break;
  }
}
