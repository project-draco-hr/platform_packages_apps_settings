{
  if (v == mReportButton) {
    ApplicationErrorReport report=new ApplicationErrorReport();
    report.type=ApplicationErrorReport.TYPE_RUNNING_SERVICE;
    report.packageName=mServiceItem.mServiceInfo.packageName;
    report.installerPackageName=mInstaller.getPackageName();
    report.processName=mServiceItem.mRunningService.process;
    report.time=System.currentTimeMillis();
    report.systemApp=(mServiceItem.mServiceInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0;
    ApplicationErrorReport.RunningServiceInfo info=new ApplicationErrorReport.RunningServiceInfo();
    if (mActiveItem.mFirstRunTime >= 0) {
      info.durationMillis=SystemClock.elapsedRealtime() - mActiveItem.mFirstRunTime;
    }
 else {
      info.durationMillis=-1;
    }
    ComponentName comp=new ComponentName(mServiceItem.mServiceInfo.packageName,mServiceItem.mServiceInfo.name);
    File filename=getFileStreamPath("service_dump.txt");
    FileOutputStream output=null;
    try {
      output=new FileOutputStream(filename);
      Debug.dumpService("activity",output.getFD(),new String[]{"-a","service",comp.flattenToString()});
    }
 catch (    IOException e) {
      Log.w(TAG,"Can't dump service: " + comp,e);
    }
 finally {
      if (output != null)       try {
        output.close();
      }
 catch (      IOException e) {
      }
    }
    FileInputStream input=null;
    try {
      input=new FileInputStream(filename);
      byte[] buffer=new byte[(int)filename.length()];
      input.read(buffer);
      info.serviceDetails=new String(buffer);
    }
 catch (    IOException e) {
      Log.w(TAG,"Can't read service dump: " + comp,e);
    }
 finally {
      if (input != null)       try {
        input.close();
      }
 catch (      IOException e) {
      }
    }
    filename.delete();
    Log.i(TAG,"Details: " + info.serviceDetails);
    report.runningServiceInfo=info;
    Intent result=new Intent(Intent.ACTION_APP_ERROR);
    result.setComponent(mInstaller);
    result.putExtra(Intent.EXTRA_BUG_REPORT,report);
    result.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    startActivity(result);
    return;
  }
  if (mManageIntent != null) {
    try {
      startIntentSender(mManageIntent.getIntentSender(),null,Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET,Intent.FLAG_ACTIVITY_CLEAR_WHEN_TASK_RESET,0);
    }
 catch (    IntentSender.SendIntentException e) {
      Log.w(TAG,e);
    }
catch (    IllegalArgumentException e) {
      Log.w(TAG,e);
    }
catch (    ActivityNotFoundException e) {
      Log.w(TAG,e);
    }
  }
 else   if (mActiveItem.mItem instanceof RunningState.ServiceItem) {
    RunningState.ServiceItem si=(RunningState.ServiceItem)mActiveItem.mItem;
    stopService(new Intent().setComponent(si.mRunningService.service));
    if (mMergedItem == null || mMergedItem.mServices.size() <= 1) {
      finish();
    }
 else {
      mState.updateNow();
    }
  }
 else {
    mAm.forceStopPackage(mActiveItem.mItem.mPackageInfo.packageName);
    finish();
  }
}
