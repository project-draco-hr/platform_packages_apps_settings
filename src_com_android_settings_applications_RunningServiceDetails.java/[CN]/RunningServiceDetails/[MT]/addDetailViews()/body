{
  for (int i=mActiveDetails.size() - 1; i >= 0; i--) {
    mAllDetails.removeView(mActiveDetails.get(i).mRootView);
  }
  mActiveDetails.clear();
  if (mServicesHeader != null) {
    mAllDetails.removeView(mServicesHeader);
    mServicesHeader=null;
  }
  if (mProcessesHeader != null) {
    mAllDetails.removeView(mProcessesHeader);
    mProcessesHeader=null;
  }
  if (mMergedItem != null) {
    for (int i=0; i < mMergedItem.mServices.size(); i++) {
      if (i == 0) {
        mServicesHeader=(TextView)mInflater.inflate(R.layout.separator_label,mAllDetails,false);
        mServicesHeader.setText(R.string.runningservicedetails_services_title);
        mAllDetails.addView(mServicesHeader);
      }
      RunningState.ServiceItem si=mMergedItem.mServices.get(i);
      ActiveDetail detail=new ActiveDetail();
      View root=mInflater.inflate(R.layout.running_service_details_service,mAllDetails,false);
      mAllDetails.addView(root);
      detail.mRootView=root;
      detail.mViewHolder=new RunningProcessesView.ViewHolder(root);
      detail.mActiveItem=detail.mViewHolder.bind(mState,si,mBuilder);
      if (si.mRunningService.clientLabel != 0) {
        detail.mManageIntent=mAm.getRunningServiceControlPanel(si.mRunningService.service);
      }
      TextView description=(TextView)root.findViewById(R.id.comp_description);
      if (si.mServiceInfo.descriptionRes != 0) {
        description.setText(getPackageManager().getText(si.mServiceInfo.packageName,si.mServiceInfo.descriptionRes,si.mServiceInfo.applicationInfo));
      }
 else {
        if (detail.mManageIntent != null) {
          try {
            Resources clientr=getPackageManager().getResourcesForApplication(si.mRunningService.clientPackage);
            String label=clientr.getString(si.mRunningService.clientLabel);
            description.setText(getString(R.string.service_manage_description,label));
          }
 catch (          PackageManager.NameNotFoundException e) {
          }
        }
 else {
          description.setText(getText(R.string.service_stop_description));
        }
      }
      View button=root.findViewById(R.id.right_button);
      button.setOnClickListener(detail);
      ((TextView)button).setText(getText(detail.mManageIntent != null ? R.string.service_manage : R.string.service_stop));
      root.findViewById(R.id.left_button).setVisibility(View.INVISIBLE);
      mActiveDetails.add(detail);
    }
    boolean didProcess=false;
    for (int i=-1; i < mMergedItem.mOtherProcesses.size(); i++) {
      RunningState.ProcessItem pi=i < 0 ? mMergedItem.mProcess : mMergedItem.mOtherProcesses.get(i);
      if (pi.mPid <= 0) {
        continue;
      }
      if (!didProcess) {
        mProcessesHeader=(TextView)mInflater.inflate(R.layout.separator_label,mAllDetails,false);
        mProcessesHeader.setText(R.string.runningservicedetails_processes_title);
        mAllDetails.addView(mProcessesHeader);
        didProcess=true;
      }
      ActiveDetail detail=new ActiveDetail();
      View root=mInflater.inflate(R.layout.running_service_details_process,mAllDetails,false);
      mAllDetails.addView(root);
      detail.mRootView=root;
      detail.mViewHolder=new RunningProcessesView.ViewHolder(root);
      detail.mActiveItem=detail.mViewHolder.bind(mState,pi,mBuilder);
      TextView description=(TextView)root.findViewById(R.id.comp_description);
      if (i < 0) {
        description.setText(R.string.main_running_process_description);
      }
 else {
        int textid=0;
        CharSequence label=null;
        ActivityManager.RunningAppProcessInfo rpi=pi.mRunningProcessInfo;
        final ComponentName comp=rpi.importanceReasonComponent;
switch (rpi.importanceReasonCode) {
case ActivityManager.RunningAppProcessInfo.REASON_PROVIDER_IN_USE:
          textid=R.string.process_provider_in_use_description;
        List<ProviderInfo> providers=null;
      if (comp != null) {
        providers=getPackageManager().queryContentProviders(comp.getPackageName(),rpi.uid,0);
      }
    if (providers != null) {
      for (int j=0; j < providers.size(); j++) {
        ProviderInfo prov=providers.get(i);
        if (comp.getClassName().equals(prov.name)) {
          label=RunningState.makeLabel(getPackageManager(),prov.name,prov);
          break;
        }
      }
    }
  break;
case ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE:
textid=R.string.process_service_in_use_description;
if (rpi.importanceReasonComponent != null) {
try {
  ServiceInfo serv=getPackageManager().getServiceInfo(rpi.importanceReasonComponent,0);
  label=RunningState.makeLabel(getPackageManager(),serv.name,serv);
}
 catch (NameNotFoundException e) {
}
}
break;
}
if (textid != 0 && label != null) {
description.setText(getString(textid,label));
}
}
mActiveDetails.add(detail);
}
}
}
