{
  addProcessesHeader();
  ActiveDetail detail=new ActiveDetail();
  View root=mInflater.inflate(R.layout.running_service_details_process,mAllDetails,false);
  mAllDetails.addView(root);
  detail.mRootView=root;
  detail.mViewHolder=new RunningProcessesView.ViewHolder(root);
  detail.mActiveItem=detail.mViewHolder.bind(mState,pi,mBuilder);
  TextView description=(TextView)root.findViewById(R.id.comp_description);
  if (pi.mUserId != UserHandle.myUserId()) {
    description.setVisibility(View.GONE);
  }
 else   if (isMain) {
    description.setText(R.string.main_running_process_description);
  }
 else {
    int textid=0;
    CharSequence label=null;
    ActivityManager.RunningAppProcessInfo rpi=pi.mRunningProcessInfo;
    final ComponentName comp=rpi.importanceReasonComponent;
switch (rpi.importanceReasonCode) {
case ActivityManager.RunningAppProcessInfo.REASON_PROVIDER_IN_USE:
      textid=R.string.process_provider_in_use_description;
    if (rpi.importanceReasonComponent != null) {
      try {
        ProviderInfo prov=getActivity().getPackageManager().getProviderInfo(rpi.importanceReasonComponent,0);
        label=RunningState.makeLabel(getActivity().getPackageManager(),prov.name,prov);
      }
 catch (      NameNotFoundException e) {
      }
    }
  break;
case ActivityManager.RunningAppProcessInfo.REASON_SERVICE_IN_USE:
textid=R.string.process_service_in_use_description;
if (rpi.importanceReasonComponent != null) {
try {
  ServiceInfo serv=getActivity().getPackageManager().getServiceInfo(rpi.importanceReasonComponent,0);
  label=RunningState.makeLabel(getActivity().getPackageManager(),serv.name,serv);
}
 catch (NameNotFoundException e) {
}
}
break;
}
if (textid != 0 && label != null) {
description.setText(getActivity().getString(textid,label));
}
}
mActiveDetails.add(detail);
}
