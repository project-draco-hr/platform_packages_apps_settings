{
  final PackageManager pm=context.getPackageManager();
  mSequence++;
  boolean changed=false;
  List<ActivityManager.RunningServiceInfo> services=am.getRunningServices(MAX_SERVICES);
  final int NS=services != null ? services.size() : 0;
  for (int i=0; i < NS; i++) {
    ActivityManager.RunningServiceInfo si=services.get(i);
    if (!si.started && si.clientLabel == 0) {
      continue;
    }
    if ((si.flags & ActivityManager.RunningServiceInfo.FLAG_PERSISTENT_PROCESS) != 0) {
      continue;
    }
    HashMap<String,ProcessItem> procs=mServiceProcessesByName.get(si.uid);
    if (procs == null) {
      procs=new HashMap<String,ProcessItem>();
      mServiceProcessesByName.put(si.uid,procs);
    }
    ProcessItem proc=procs.get(si.process);
    if (proc == null) {
      changed=true;
      proc=new ProcessItem(context,si.uid,si.process);
      procs.put(si.process,proc);
    }
    if (proc.mCurSeq != mSequence) {
      int pid=si.restarting == 0 ? si.pid : 0;
      if (pid != proc.mPid) {
        changed=true;
        if (proc.mPid != pid) {
          if (proc.mPid != 0) {
            mServiceProcessesByPid.remove(proc.mPid);
          }
          if (pid != 0) {
            mServiceProcessesByPid.put(pid,proc);
          }
          proc.mPid=pid;
        }
      }
      proc.mDependentProcesses.clear();
      proc.mCurSeq=mSequence;
    }
    changed|=proc.updateService(context,si);
  }
  List<ActivityManager.RunningAppProcessInfo> processes=am.getRunningAppProcesses();
  final int NP=processes != null ? processes.size() : 0;
  for (int i=0; i < NP; i++) {
    ActivityManager.RunningAppProcessInfo pi=processes.get(i);
    ProcessItem proc=mServiceProcessesByPid.get(pi.pid);
    if (proc == null) {
      proc=mRunningProcesses.get(pi.pid);
      if (proc == null) {
        changed=true;
        proc=new ProcessItem(context,pi.uid,pi.processName);
        proc.mPid=pi.pid;
        mRunningProcesses.put(pi.pid,proc);
      }
      proc.mDependentProcesses.clear();
    }
    if (isInterestingProcess(pi)) {
      if (!mInterestingProcesses.contains(proc)) {
        changed=true;
        mInterestingProcesses.add(proc);
      }
      proc.mCurSeq=mSequence;
      proc.ensureLabel(pm);
    }
    proc.mRunningSeq=mSequence;
    proc.mRunningProcessInfo=pi;
  }
  int NRP=mRunningProcesses.size();
  for (int i=0; i < NRP; i++) {
    ProcessItem proc=mRunningProcesses.valueAt(i);
    if (proc.mRunningSeq == mSequence) {
      int clientPid=proc.mRunningProcessInfo.importanceReasonPid;
      if (clientPid != 0) {
        ProcessItem client=mServiceProcessesByPid.get(clientPid);
        if (client == null) {
          client=mRunningProcesses.get(clientPid);
        }
        if (client != null) {
          client.mDependentProcesses.put(proc.mPid,proc);
        }
      }
 else {
        proc.mClient=null;
      }
    }
 else {
      changed=true;
      mRunningProcesses.remove(mRunningProcesses.keyAt(i));
    }
  }
  int NHP=mInterestingProcesses.size();
  for (int i=0; i < NHP; i++) {
    ProcessItem proc=mInterestingProcesses.get(i);
    if (mRunningProcesses.get(proc.mPid) == null) {
      changed=true;
      mInterestingProcesses.remove(i);
      i--;
      NHP--;
    }
  }
  final int NAP=mServiceProcessesByPid.size();
  for (int i=0; i < NAP; i++) {
    ProcessItem proc=mServiceProcessesByPid.valueAt(i);
    if (proc.mCurSeq == mSequence) {
      changed|=proc.buildDependencyChain(context,pm,mSequence);
    }
  }
  ArrayList<Integer> uidToDelete=null;
  for (int i=0; i < mServiceProcessesByName.size(); i++) {
    HashMap<String,ProcessItem> procs=mServiceProcessesByName.valueAt(i);
    Iterator<ProcessItem> pit=procs.values().iterator();
    while (pit.hasNext()) {
      ProcessItem pi=pit.next();
      if (pi.mCurSeq == mSequence) {
        pi.ensureLabel(pm);
        if (pi.mPid == 0) {
          pi.mDependentProcesses.clear();
        }
      }
 else {
        changed=true;
        pit.remove();
        if (procs.size() == 0) {
          if (uidToDelete == null) {
            uidToDelete=new ArrayList<Integer>();
          }
          uidToDelete.add(mServiceProcessesByName.keyAt(i));
        }
        if (pi.mPid != 0) {
          mServiceProcessesByPid.remove(pi.mPid);
        }
        continue;
      }
      Iterator<ServiceItem> sit=pi.mServices.values().iterator();
      while (sit.hasNext()) {
        ServiceItem si=sit.next();
        if (si.mCurSeq != mSequence) {
          changed=true;
          sit.remove();
        }
      }
    }
  }
  if (uidToDelete != null) {
    for (int i=0; i < uidToDelete.size(); i++) {
      int uid=uidToDelete.get(i);
      mServiceProcessesByName.remove(uid);
    }
  }
  if (changed) {
    ArrayList<ProcessItem> sortedProcesses=new ArrayList<ProcessItem>();
    for (int i=0; i < mServiceProcessesByName.size(); i++) {
      for (      ProcessItem pi : mServiceProcessesByName.valueAt(i).values()) {
        pi.mIsSystem=false;
        pi.mIsStarted=true;
        pi.mActiveSince=Long.MAX_VALUE;
        for (        ServiceItem si : pi.mServices.values()) {
          if (si.mServiceInfo != null && (si.mServiceInfo.applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0) {
            pi.mIsSystem=true;
          }
          if (si.mRunningService != null && si.mRunningService.clientLabel != 0) {
            pi.mIsStarted=false;
            if (pi.mActiveSince > si.mRunningService.activeSince) {
              pi.mActiveSince=si.mRunningService.activeSince;
            }
          }
        }
        sortedProcesses.add(pi);
      }
    }
    Collections.sort(sortedProcesses,mServiceProcessComparator);
    ArrayList<BaseItem> newItems=new ArrayList<BaseItem>();
    ArrayList<MergedItem> newMergedItems=new ArrayList<MergedItem>();
    mProcessItems.clear();
    for (int i=0; i < sortedProcesses.size(); i++) {
      ProcessItem pi=sortedProcesses.get(i);
      pi.mNeedDivider=false;
      int firstProc=mProcessItems.size();
      pi.addDependentProcesses(newItems,mProcessItems);
      newItems.add(pi);
      if (pi.mPid > 0) {
        mProcessItems.add(pi);
      }
      MergedItem mergedItem=null;
      boolean haveAllMerged=false;
      boolean needDivider=false;
      for (      ServiceItem si : pi.mServices.values()) {
        si.mNeedDivider=needDivider;
        needDivider=true;
        newItems.add(si);
        if (si.mMergedItem != null) {
          if (mergedItem != null && mergedItem != si.mMergedItem) {
            haveAllMerged=false;
          }
          mergedItem=si.mMergedItem;
        }
 else {
          haveAllMerged=false;
        }
      }
      if (!haveAllMerged || mergedItem == null || mergedItem.mServices.size() != pi.mServices.size()) {
        mergedItem=new MergedItem();
        for (        ServiceItem si : pi.mServices.values()) {
          mergedItem.mServices.add(si);
          si.mMergedItem=mergedItem;
        }
        mergedItem.mProcess=pi;
        mergedItem.mOtherProcesses.clear();
        for (int mpi=firstProc; mpi < (mProcessItems.size() - 1); mpi++) {
          mergedItem.mOtherProcesses.add(mProcessItems.get(mpi));
        }
      }
      mergedItem.update(context,false);
      newMergedItems.add(mergedItem);
    }
    NHP=mInterestingProcesses.size();
    for (int i=0; i < NHP; i++) {
      ProcessItem proc=mInterestingProcesses.get(i);
      if (proc.mClient == null && proc.mServices.size() <= 0) {
        if (proc.mMergedItem == null) {
          proc.mMergedItem=new MergedItem();
          proc.mMergedItem.mProcess=proc;
        }
        proc.mMergedItem.update(context,false);
        newMergedItems.add(0,proc.mMergedItem);
        mProcessItems.add(proc);
      }
    }
synchronized (mLock) {
      mItems=newItems;
      mMergedItems=newMergedItems;
    }
  }
  mAllProcessItems.clear();
  mAllProcessItems.addAll(mProcessItems);
  int numBackgroundProcesses=0;
  int numForegroundProcesses=0;
  int numServiceProcesses=0;
  NRP=mRunningProcesses.size();
  for (int i=0; i < NRP; i++) {
    ProcessItem proc=mRunningProcesses.valueAt(i);
    if (proc.mCurSeq != mSequence) {
      if (proc.mRunningProcessInfo.importance >= ActivityManager.RunningAppProcessInfo.IMPORTANCE_BACKGROUND) {
        numBackgroundProcesses++;
        mAllProcessItems.add(proc);
      }
 else       if (proc.mRunningProcessInfo.importance <= ActivityManager.RunningAppProcessInfo.IMPORTANCE_VISIBLE) {
        numForegroundProcesses++;
        mAllProcessItems.add(proc);
      }
 else {
        Log.i("RunningState","Unknown non-service process: " + proc.mProcessName + " #"+ proc.mPid);
      }
    }
 else {
      numServiceProcesses++;
    }
  }
  long backgroundProcessMemory=0;
  long foregroundProcessMemory=0;
  long serviceProcessMemory=0;
  ArrayList<MergedItem> newBackgroundItems=null;
  try {
    final int numProc=mAllProcessItems.size();
    int[] pids=new int[numProc];
    for (int i=0; i < numProc; i++) {
      pids[i]=mAllProcessItems.get(i).mPid;
    }
    Debug.MemoryInfo[] mem=ActivityManagerNative.getDefault().getProcessMemoryInfo(pids);
    int bgIndex=0;
    for (int i=0; i < pids.length; i++) {
      ProcessItem proc=mAllProcessItems.get(i);
      changed|=proc.updateSize(context,mem[i],mSequence);
      if (proc.mCurSeq == mSequence) {
        serviceProcessMemory+=proc.mSize;
      }
 else       if (proc.mRunningProcessInfo.importance >= ActivityManager.RunningAppProcessInfo.IMPORTANCE_BACKGROUND) {
        backgroundProcessMemory+=proc.mSize;
        MergedItem mergedItem;
        if (newBackgroundItems != null) {
          mergedItem=proc.mMergedItem=new MergedItem();
          proc.mMergedItem.mProcess=proc;
          newBackgroundItems.add(mergedItem);
        }
 else {
          if (bgIndex >= mBackgroundItems.size() || mBackgroundItems.get(bgIndex).mProcess != proc) {
            newBackgroundItems=new ArrayList<MergedItem>(numBackgroundProcesses);
            for (int bgi=0; bgi < bgIndex; bgi++) {
              newBackgroundItems.add(mBackgroundItems.get(bgi));
            }
            mergedItem=proc.mMergedItem=new MergedItem();
            proc.mMergedItem.mProcess=proc;
            newBackgroundItems.add(mergedItem);
          }
 else {
            mergedItem=mBackgroundItems.get(bgIndex);
          }
        }
        mergedItem.update(context,true);
        mergedItem.updateSize(context);
        bgIndex++;
      }
 else       if (proc.mRunningProcessInfo.importance <= ActivityManager.RunningAppProcessInfo.IMPORTANCE_VISIBLE) {
        foregroundProcessMemory+=proc.mSize;
      }
    }
  }
 catch (  RemoteException e) {
  }
  if (newBackgroundItems == null) {
    if (mBackgroundItems.size() > numBackgroundProcesses) {
      newBackgroundItems=new ArrayList<MergedItem>(numBackgroundProcesses);
      for (int bgi=0; bgi < numBackgroundProcesses; bgi++) {
        newBackgroundItems.add(mBackgroundItems.get(bgi));
      }
    }
  }
  for (int i=0; i < mMergedItems.size(); i++) {
    mMergedItems.get(i).updateSize(context);
  }
synchronized (mLock) {
    mNumBackgroundProcesses=numBackgroundProcesses;
    mNumForegroundProcesses=numForegroundProcesses;
    mNumServiceProcesses=numServiceProcesses;
    mBackgroundProcessMemory=backgroundProcessMemory;
    mForegroundProcessMemory=foregroundProcessMemory;
    mServiceProcessMemory=serviceProcessMemory;
    if (newBackgroundItems != null) {
      mBackgroundItems=newBackgroundItems;
      if (mWatchingBackgroundItems) {
        changed=true;
      }
    }
    if (!mHaveData) {
      mHaveData=true;
      mLock.notifyAll();
    }
  }
  return changed;
}
