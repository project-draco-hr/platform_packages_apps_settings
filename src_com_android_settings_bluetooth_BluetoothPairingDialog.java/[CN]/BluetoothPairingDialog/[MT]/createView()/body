{
  View view=getLayoutInflater().inflate(R.layout.bluetooth_pin_confirm,null);
  TextView pairingViewCaption=(TextView)view.findViewById(R.id.pairing_caption);
  TextView pairingViewContent=(TextView)view.findViewById(R.id.pairing_subhead);
  TextView messagePairing=(TextView)view.findViewById(R.id.pairing_code_message);
  CheckBox contactSharing=(CheckBox)view.findViewById(R.id.phonebook_sharing_message_confirm_pin);
  contactSharing.setText(getString(R.string.bluetooth_pairing_shares_phonebook,mCachedDeviceManager.getName(mDevice)));
  if (mPbapClientProfile != null && mPbapClientProfile.isProfileReady()) {
    contactSharing.setVisibility(View.GONE);
  }
  if (mDevice.getPhonebookAccessPermission() == BluetoothDevice.ACCESS_ALLOWED) {
    contactSharing.setChecked(true);
  }
 else   if (mDevice.getPhonebookAccessPermission() == BluetoothDevice.ACCESS_REJECTED) {
    contactSharing.setChecked(false);
  }
 else {
    if (mDevice.getBluetoothClass().getDeviceClass() == BluetoothClass.Device.AUDIO_VIDEO_HANDSFREE) {
      contactSharing.setChecked(true);
      mDevice.setPhonebookAccessPermission(BluetoothDevice.ACCESS_ALLOWED);
    }
 else {
      contactSharing.setChecked(false);
      mDevice.setPhonebookAccessPermission(BluetoothDevice.ACCESS_REJECTED);
    }
  }
  contactSharing.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
    @Override public void onCheckedChanged(    CompoundButton compoundButton,    boolean isChecked){
      if (isChecked) {
        mDevice.setPhonebookAccessPermission(BluetoothDevice.ACCESS_ALLOWED);
      }
 else {
        mDevice.setPhonebookAccessPermission(BluetoothDevice.ACCESS_REJECTED);
      }
    }
  }
);
  String messageCaption=null;
  String pairingContent=null;
switch (mType) {
case BluetoothDevice.PAIRING_VARIANT_DISPLAY_PASSKEY:
case BluetoothDevice.PAIRING_VARIANT_DISPLAY_PIN:
    messagePairing.setVisibility(View.VISIBLE);
case BluetoothDevice.PAIRING_VARIANT_PASSKEY_CONFIRMATION:
  pairingContent=mPairingKey;
break;
case BluetoothDevice.PAIRING_VARIANT_CONSENT:
case BluetoothDevice.PAIRING_VARIANT_OOB_CONSENT:
messagePairing.setVisibility(View.VISIBLE);
break;
default :
Log.e(TAG,"Incorrect pairing type received, not creating view");
return null;
}
if (pairingContent != null) {
pairingViewCaption.setVisibility(View.VISIBLE);
pairingViewContent.setVisibility(View.VISIBLE);
pairingViewContent.setText(pairingContent);
}
return view;
}
