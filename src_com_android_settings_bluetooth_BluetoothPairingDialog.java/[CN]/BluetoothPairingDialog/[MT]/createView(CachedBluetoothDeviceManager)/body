{
  View view=getLayoutInflater().inflate(R.layout.bluetooth_pin_confirm,null);
  String name=Html.escapeHtml(deviceManager.getName(mDevice));
  TextView messageViewCaption=(TextView)view.findViewById(R.id.message_caption);
  TextView messageViewContent=(TextView)view.findViewById(R.id.message_subhead);
  TextView pairingViewCaption=(TextView)view.findViewById(R.id.pairing_caption);
  TextView pairingViewContent=(TextView)view.findViewById(R.id.pairing_subhead);
  TextView messagePairing=(TextView)view.findViewById(R.id.pairing_code_message);
  String messageCaption=null;
  String pairingContent=null;
switch (mType) {
case BluetoothDevice.PAIRING_VARIANT_DISPLAY_PASSKEY:
case BluetoothDevice.PAIRING_VARIANT_DISPLAY_PIN:
case BluetoothDevice.PAIRING_VARIANT_PASSKEY_CONFIRMATION:
    messageCaption=getString(R.string.bluetooth_enter_pin_msg);
  pairingContent=mPairingKey;
break;
case BluetoothDevice.PAIRING_VARIANT_CONSENT:
case BluetoothDevice.PAIRING_VARIANT_OOB_CONSENT:
messageCaption=getString(R.string.bluetooth_enter_pin_msg);
break;
default :
Log.e(TAG,"Incorrect pairing type received, not creating view");
return null;
}
if (messageViewCaption != null) {
messageViewCaption.setText(messageCaption);
messageViewContent.setText(name);
}
if (pairingContent != null) {
pairingViewCaption.setVisibility(View.VISIBLE);
pairingViewContent.setVisibility(View.VISIBLE);
pairingViewContent.setText(pairingContent);
messagePairing.setVisibility(View.VISIBLE);
}
return view;
}
