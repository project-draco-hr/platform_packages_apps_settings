{
  super.onCreate(savedInstanceState);
  Intent intent=getIntent();
  if (!intent.getAction().equals(BluetoothDevice.ACTION_PAIRING_REQUEST)) {
    Log.e(TAG,"Error: this activity may be started only with intent " + BluetoothDevice.ACTION_PAIRING_REQUEST);
    finish();
  }
  mLocalManager=LocalBluetoothManager.getInstance(this);
  mDevice=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
  mType=intent.getIntExtra(BluetoothDevice.EXTRA_PAIRING_VARIANT,BluetoothDevice.ERROR);
  if (mType == BluetoothDevice.PAIRING_VARIANT_PIN) {
    createUserEntryDialog();
  }
 else   if (mType == BluetoothDevice.PAIRING_VARIANT_PASSKEY) {
    createUserEntryDialog();
  }
 else   if (mType == BluetoothDevice.PAIRING_VARIANT_PASSKEY_CONFIRMATION) {
    int passkey=intent.getIntExtra(BluetoothDevice.EXTRA_PASSKEY,BluetoothDevice.ERROR);
    if (passkey == BluetoothDevice.ERROR) {
      Log.e(TAG,"Invalid ConfirmationPasskey received, not showing any dialog");
      return;
    }
    mPasskey=String.format("%06d",passkey);
    createConfirmationDialog();
  }
 else   if (mType == BluetoothDevice.PAIRING_VARIANT_CONSENT) {
    createConsentDialog();
  }
 else   if (mType == BluetoothDevice.PAIRING_VARIANT_DISPLAY_PASSKEY) {
    int passkey=intent.getIntExtra(BluetoothDevice.EXTRA_PASSKEY,BluetoothDevice.ERROR);
    if (passkey == BluetoothDevice.ERROR) {
      Log.e(TAG,"Invalid ConfirmationPasskey received, not showing any dialog");
      return;
    }
    mPasskey=String.format("%06d",passkey);
    createDisplayPasskeyDialog();
  }
 else   if (mType == BluetoothDevice.PAIRING_VARIANT_OOB_CONSENT) {
    createConsentDialog();
  }
 else {
    Log.e(TAG,"Incorrect pairing type received, not showing any dialog");
  }
  registerReceiver(mReceiver,new IntentFilter(BluetoothDevice.ACTION_PAIRING_CANCEL));
  registerReceiver(mReceiver,new IntentFilter(BluetoothDevice.ACTION_BOND_STATE_CHANGED));
}
