{
  if (DEBUG)   Log.d(TAG,"onStartCommand startId:" + startId + " flags: "+ flags);
  if (intent == null) {
    if (DEBUG)     Log.d(TAG,"START_NOT_STICKY - intent is null.");
    DockEventReceiver.finishStartingService(this,startId);
    return START_NOT_STICKY;
  }
  if (BluetoothAdapter.ACTION_STATE_CHANGED.equals(intent.getAction())) {
    handleBtStateChange(intent,startId);
    return START_NOT_STICKY;
  }
  if (BluetoothHeadset.ACTION_STATE_CHANGED.equals(intent.getAction())) {
    BluetoothDevice disconnectedDevice=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
    int retryCount=getSettingInt(SHARED_PREFERENCES_KEY_CONNECT_RETRY_COUNT,0);
    if (retryCount < MAX_CONNECT_RETRY) {
      setSettingInt(SHARED_PREFERENCES_KEY_CONNECT_RETRY_COUNT,retryCount + 1);
      handleUnexpectedDisconnect(disconnectedDevice,Profile.HEADSET,startId);
    }
    return START_NOT_STICKY;
  }
 else   if (BluetoothA2dp.ACTION_SINK_STATE_CHANGED.equals(intent.getAction())) {
    BluetoothDevice disconnectedDevice=intent.getParcelableExtra(BluetoothDevice.EXTRA_DEVICE);
    int retryCount=getSettingInt(SHARED_PREFERENCES_KEY_CONNECT_RETRY_COUNT,0);
    if (retryCount < MAX_CONNECT_RETRY) {
      setSettingInt(SHARED_PREFERENCES_KEY_CONNECT_RETRY_COUNT,retryCount + 1);
      handleUnexpectedDisconnect(disconnectedDevice,Profile.A2DP,startId);
    }
    return START_NOT_STICKY;
  }
  Message msg=parseIntent(intent);
  if (msg == null) {
    if (DEBUG)     Log.d(TAG,"START_NOT_STICKY - Bad intent.");
    DockEventReceiver.finishStartingService(this,startId);
    return START_NOT_STICKY;
  }
  if (msg.what == MSG_TYPE_DOCKED) {
    removeSetting(SHARED_PREFERENCES_KEY_CONNECT_RETRY_COUNT);
  }
  msg.arg2=startId;
  processMessage(msg);
  return START_NOT_STICKY;
}
