{
  final CycleAdapter.CycleItem previousItem=(CycleAdapter.CycleItem)mSpinner.getSelectedItem();
  clear();
  final Context context=mSpinner.getContext();
  NetworkStatsHistory.Entry entry=null;
  long historyStart=Long.MAX_VALUE;
  long historyEnd=Long.MIN_VALUE;
  if (chartData != null) {
    historyStart=chartData.network.getStart();
    historyEnd=chartData.network.getEnd();
  }
  final long now=System.currentTimeMillis();
  if (historyStart == Long.MAX_VALUE)   historyStart=now;
  if (historyEnd == Long.MIN_VALUE)   historyEnd=now + 1;
  boolean hasCycles=false;
  if (policy != null) {
    long cycleEnd=computeNextCycleBoundary(historyEnd,policy);
    while (cycleEnd > historyStart) {
      final long cycleStart=computeLastCycleBoundary(cycleEnd,policy);
      final boolean includeCycle;
      if (chartData != null) {
        entry=chartData.network.getValues(cycleStart,cycleEnd,entry);
        includeCycle=(entry.rxBytes + entry.txBytes) > 0;
      }
 else {
        includeCycle=true;
      }
      if (includeCycle) {
        add(new CycleAdapter.CycleItem(context,cycleStart,cycleEnd));
        hasCycles=true;
      }
      cycleEnd=cycleStart;
    }
  }
  if (!hasCycles) {
    long cycleEnd=historyEnd;
    while (cycleEnd > historyStart) {
      final long cycleStart=cycleEnd - (DateUtils.WEEK_IN_MILLIS * 4);
      final boolean includeCycle;
      if (chartData != null) {
        entry=chartData.network.getValues(cycleStart,cycleEnd,entry);
        includeCycle=(entry.rxBytes + entry.txBytes) > 0;
      }
 else {
        includeCycle=true;
      }
      if (includeCycle) {
        add(new CycleAdapter.CycleItem(context,cycleStart,cycleEnd));
      }
      cycleEnd=cycleStart;
    }
  }
  if (getCount() > 0) {
    final int position=findNearestPosition(previousItem);
    mSpinner.setSelection(position);
    final CycleAdapter.CycleItem selectedItem=getItem(position);
    if (!Objects.equal(selectedItem,previousItem)) {
      mListener.onItemSelected(mSpinner,null,position,0);
      return false;
    }
  }
  return true;
}
