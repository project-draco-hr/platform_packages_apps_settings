{
  ArrayList<AppItem> items=new ArrayList<>();
  long largest=0;
  final int currentUserId=ActivityManager.getCurrentUser();
  UserManager userManager=UserManager.get(getContext());
  final List<UserHandle> profiles=userManager.getUserProfiles();
  final SparseArray<AppItem> knownItems=new SparseArray<AppItem>();
  NetworkStats.Entry entry=null;
  final int size=stats != null ? stats.size() : 0;
  for (int i=0; i < size; i++) {
    entry=stats.getValues(i,entry);
    final int uid=entry.uid;
    final int collapseKey;
    final int category;
    final int userId=UserHandle.getUserId(uid);
    if (UserHandle.isApp(uid)) {
      if (profiles.contains(new UserHandle(userId))) {
        if (userId != currentUserId) {
          final int managedKey=UidDetailProvider.buildKeyForUser(userId);
          largest=accumulate(managedKey,knownItems,entry,AppItem.CATEGORY_USER,items,largest);
        }
        collapseKey=uid;
        category=AppItem.CATEGORY_APP;
      }
 else {
        final UserInfo info=userManager.getUserInfo(userId);
        if (info == null) {
          collapseKey=UID_REMOVED;
          category=AppItem.CATEGORY_APP;
        }
 else {
          collapseKey=UidDetailProvider.buildKeyForUser(userId);
          category=AppItem.CATEGORY_USER;
        }
      }
    }
 else     if (uid == UID_REMOVED || uid == UID_TETHERING) {
      collapseKey=uid;
      category=AppItem.CATEGORY_APP;
    }
 else {
      collapseKey=android.os.Process.SYSTEM_UID;
      category=AppItem.CATEGORY_APP;
    }
    largest=accumulate(collapseKey,knownItems,entry,category,items,largest);
  }
  final int restrictedUidsMax=restrictedUids.length;
  for (int i=0; i < restrictedUidsMax; ++i) {
    final int uid=restrictedUids[i];
    if (!profiles.contains(new UserHandle(UserHandle.getUserId(uid)))) {
      continue;
    }
    AppItem item=knownItems.get(uid);
    if (item == null) {
      item=new AppItem(uid);
      item.total=-1;
      items.add(item);
      knownItems.put(item.key,item);
    }
    item.restricted=true;
  }
  Collections.sort(items);
  mApps.removeAll();
  for (int i=0; i < items.size(); i++) {
    final int percentTotal=largest != 0 ? (int)(items.get(i).total * 100 / largest) : 0;
    AppDataUsagePreference preference=new AppDataUsagePreference(getContext(),items.get(i),percentTotal,mUidDetailProvider);
    preference.setOnPreferenceClickListener(new Preference.OnPreferenceClickListener(){
      @Override public boolean onPreferenceClick(      Preference preference){
        AppDataUsagePreference pref=(AppDataUsagePreference)preference;
        AppItem item=pref.getItem();
        startAppDataUsage(item);
        return true;
      }
    }
);
    mApps.addPreference(preference);
  }
}
