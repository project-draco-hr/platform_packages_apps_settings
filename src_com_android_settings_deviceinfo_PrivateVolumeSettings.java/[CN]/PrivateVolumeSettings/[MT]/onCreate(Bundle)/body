{
  super.onCreate(icicle);
  final Context context=getActivity();
  mUserManager=context.getSystemService(UserManager.class);
  mStorageManager=context.getSystemService(StorageManager.class);
  mVolumeId=getArguments().getString(VolumeInfo.EXTRA_VOLUME_ID);
  mVolume=mStorageManager.findVolumeById(mVolumeId);
  Preconditions.checkNotNull(mVolume);
  Preconditions.checkState(mVolume.type == VolumeInfo.TYPE_PRIVATE);
  addPreferencesFromResource(R.xml.device_info_storage_volume);
  mSharedVolume=mStorageManager.findVolumeById(mVolume.id.replace("private","emulated"));
  mMeasure=new StorageMeasurement(context,mVolume,mSharedVolume);
  mMeasure.setReceiver(mReceiver);
  mGraph=buildGraph();
  mTotal=buildItem(R.string.memory_size,0);
  mAvailable=buildItem(R.string.memory_available,R.color.memory_avail);
  mApps=buildItem(R.string.memory_apps_usage,R.color.memory_apps_usage);
  mDcim=buildItem(R.string.memory_dcim_usage,R.color.memory_dcim);
  mMusic=buildItem(R.string.memory_music_usage,R.color.memory_music);
  mDownloads=buildItem(R.string.memory_downloads_usage,R.color.memory_downloads);
  mCache=buildItem(R.string.memory_media_cache_usage,R.color.memory_cache);
  mMisc=buildItem(R.string.memory_media_misc_usage,R.color.memory_misc);
  mCurrentUser=mUserManager.getUserInfo(UserHandle.myUserId());
  final List<UserInfo> otherUsers=getUsersExcluding(mCurrentUser);
  for (int i=0; i < otherUsers.size(); i++) {
    final UserInfo user=otherUsers.get(i);
    final int colorRes=i % 2 == 0 ? R.color.memory_user_light : R.color.memory_user_dark;
    final StorageItemPreference userPref=new StorageItemPreference(context,user.name,colorRes,user.id);
    mUsers.add(userPref);
  }
  setHasOptionsMenu(true);
}
