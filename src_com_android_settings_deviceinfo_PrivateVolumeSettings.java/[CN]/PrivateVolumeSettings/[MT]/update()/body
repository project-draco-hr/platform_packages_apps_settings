{
  if (!isVolumeValid()) {
    getActivity().finish();
    return;
  }
  setTitle();
  getFragmentManager().invalidateOptionsMenu();
  final Context context=getActivity();
  final PreferenceScreen screen=getPreferenceScreen();
  screen.removeAll();
  addPreference(screen,mSummary);
  List<UserInfo> allUsers=mUserManager.getUsers();
  final int userCount=allUsers.size();
  final boolean showHeaders=userCount > 1;
  final boolean showShared=(mSharedVolume != null) && mSharedVolume.isMountedReadable();
  mItemPoolIndex=0;
  mHeaderPoolIndex=0;
  int addedUserCount=0;
  for (int userIndex=0; userIndex < userCount; ++userIndex) {
    final UserInfo userInfo=allUsers.get(userIndex);
    if (isProfileOf(mCurrentUser,userInfo)) {
      final PreferenceGroup details=showHeaders ? addCategory(screen,userInfo.name) : screen;
      addDetailItems(details,showShared,userInfo.id);
      ++addedUserCount;
    }
  }
  if (userCount - addedUserCount > 0) {
    PreferenceGroup otherUsers=addCategory(screen,getText(R.string.storage_other_users));
    for (int userIndex=0; userIndex < userCount; ++userIndex) {
      final UserInfo userInfo=allUsers.get(userIndex);
      if (!isProfileOf(mCurrentUser,userInfo)) {
        addItem(otherUsers,0,userInfo.name,userInfo.id);
      }
    }
  }
  addItem(screen,R.string.storage_detail_cached,null,UserHandle.USER_NULL);
  if (showShared) {
    addPreference(screen,mExplore);
  }
  final File file=mVolume.getPath();
  final long totalBytes=file.getTotalSpace();
  final long freeBytes=file.getFreeSpace();
  final long usedBytes=totalBytes - freeBytes;
  final BytesResult result=Formatter.formatBytes(getResources(),usedBytes,0);
  mSummary.setTitle(TextUtils.expandTemplate(getText(R.string.storage_size_large),result.value,result.units));
  mSummary.setSummary(getString(R.string.storage_volume_used,Formatter.formatFileSize(context,totalBytes)));
  mSummary.setPercent((int)((usedBytes * 100) / totalBytes));
  mMeasure.forceMeasure();
  mNeedsUpdate=false;
}
