{
  super.onCreate(icicle);
  mHandler=new MyHandler(this);
  mCM=(ConnectivityManager)getSystemService(CONNECTIVITY_SERVICE);
  mTelephonyManager=(TelephonyManager)getSystemService(TELEPHONY_SERVICE);
  mWifiManager=(WifiManager)getSystemService(WIFI_SERVICE);
  addPreferencesFromResource(R.xml.device_info_status);
  mBatteryLevel=findPreference(KEY_BATTERY_LEVEL);
  mBatteryStatus=findPreference(KEY_BATTERY_STATUS);
  mBtAddress=findPreference(KEY_BT_ADDRESS);
  mWifiMacAddress=findPreference(KEY_WIFI_MAC_ADDRESS);
  mWimaxMacAddress=findPreference(KEY_WIMAX_MAC_ADDRESS);
  mIpAddress=findPreference(KEY_IP_ADDRESS);
  mRes=getResources();
  mUnknown=mRes.getString(R.string.device_info_default);
  mUnavailable=mRes.getString(R.string.status_unavailable);
  if (UserHandle.myUserId() == UserHandle.USER_OWNER) {
    mPhone=PhoneFactory.getDefaultPhone();
  }
  mSignalStrength=findPreference(KEY_SIGNAL_STRENGTH);
  mUptime=findPreference("up_time");
  if (mPhone == null || Utils.isWifiOnly(getApplicationContext())) {
    for (    String key : PHONE_RELATED_ENTRIES) {
      removePreferenceFromScreen(key);
    }
  }
 else {
    if (mPhone.getPhoneName().equals("CDMA")) {
      setSummaryText(KEY_MEID_NUMBER,mPhone.getMeid());
      setSummaryText(KEY_MIN_NUMBER,mPhone.getCdmaMin());
      if (getResources().getBoolean(R.bool.config_msid_enable)) {
        findPreference(KEY_MIN_NUMBER).setTitle(R.string.status_msid_number);
      }
      setSummaryText(KEY_PRL_VERSION,mPhone.getCdmaPrlVersion());
      removePreferenceFromScreen(KEY_IMEI_SV);
      if (mPhone.getLteOnCdmaMode() == PhoneConstants.LTE_ON_CDMA_TRUE) {
        setSummaryText(KEY_ICC_ID,mPhone.getIccSerialNumber());
        setSummaryText(KEY_IMEI,mPhone.getImei());
      }
 else {
        removePreferenceFromScreen(KEY_IMEI);
        removePreferenceFromScreen(KEY_ICC_ID);
      }
    }
 else {
      setSummaryText(KEY_IMEI,mPhone.getDeviceId());
      setSummaryText(KEY_IMEI_SV,((TelephonyManager)getSystemService(TELEPHONY_SERVICE)).getDeviceSoftwareVersion());
      removePreferenceFromScreen(KEY_PRL_VERSION);
      removePreferenceFromScreen(KEY_MEID_NUMBER);
      removePreferenceFromScreen(KEY_MIN_NUMBER);
      removePreferenceFromScreen(KEY_ICC_ID);
      if ("br".equals(mTelephonyManager.getSimCountryIso())) {
        mShowLatestAreaInfo=true;
      }
    }
    String rawNumber=mPhone.getLine1Number();
    String formattedNumber=null;
    if (!TextUtils.isEmpty(rawNumber)) {
      formattedNumber=PhoneNumberUtils.formatNumber(rawNumber);
    }
    setSummaryText(KEY_PHONE_NUMBER,formattedNumber);
    mPhoneStateReceiver=new PhoneStateIntentReceiver(this,mHandler);
    mPhoneStateReceiver.notifySignalStrength(EVENT_SIGNAL_STRENGTH_CHANGED);
    mPhoneStateReceiver.notifyServiceState(EVENT_SERVICE_STATE_CHANGED);
    if (!mShowLatestAreaInfo) {
      removePreferenceFromScreen(KEY_LATEST_AREA_INFO);
    }
  }
  if (!hasBluetooth()) {
    getPreferenceScreen().removePreference(mBtAddress);
    mBtAddress=null;
  }
  if (!hasWimax()) {
    getPreferenceScreen().removePreference(mWimaxMacAddress);
    mWimaxMacAddress=null;
  }
  updateConnectivity();
  String serial=Build.SERIAL;
  if (serial != null && !serial.equals("")) {
    setSummaryText(KEY_SERIAL_NUMBER,serial);
  }
 else {
    removePreferenceFromScreen(KEY_SERIAL_NUMBER);
  }
  getListView().setOnItemLongClickListener(new AdapterView.OnItemLongClickListener(){
    @Override public boolean onItemLongClick(    AdapterView<?> parent,    View view,    int position,    long id){
      ListAdapter listAdapter=(ListAdapter)parent.getAdapter();
      Preference pref=(Preference)listAdapter.getItem(position);
      ClipboardManager cm=(ClipboardManager)getSystemService(Context.CLIPBOARD_SERVICE);
      cm.setText(pref.getSummary());
      Toast.makeText(Status.this,com.android.internal.R.string.text_copied,Toast.LENGTH_SHORT).show();
      return true;
    }
  }
);
}
