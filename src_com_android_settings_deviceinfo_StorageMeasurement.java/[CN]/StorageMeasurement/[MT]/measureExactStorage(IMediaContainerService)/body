{
  final UserManager userManager=mContext.getSystemService(UserManager.class);
  final PackageManager packageManager=mContext.getPackageManager();
  final List<UserInfo> users=userManager.getUsers();
  final int currentUser=ActivityManager.getCurrentUser();
  final MeasurementDetails details=new MeasurementDetails();
  final Message finished=mMeasurementHandler.obtainMessage(MeasurementHandler.MSG_COMPLETED,details);
  if (mSharedVolume != null && mSharedVolume.isMountedReadable()) {
    final File basePath=mSharedVolume.getPathForUser(currentUser);
    for (    String type : sMeasureMediaTypes) {
      final File path=new File(basePath,type);
      final long size=getDirectorySize(imcs,path);
      details.mediaSize.put(type,size);
    }
    details.miscSize=measureMisc(imcs,basePath);
    if (mSharedVolume.getType() == VolumeInfo.TYPE_EMULATED) {
      for (      UserInfo user : users) {
        final File userPath=mSharedVolume.getPathForUser(user.id);
        final long size=getDirectorySize(imcs,userPath);
        addValue(details.usersSize,user.id,size);
      }
    }
  }
  if (mVolume.getType() == VolumeInfo.TYPE_PRIVATE) {
    final List<ApplicationInfo> apps=packageManager.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
    final List<ApplicationInfo> volumeApps=new ArrayList<>();
    for (    ApplicationInfo app : apps) {
      if (Objects.equals(app.volumeUuid,mVolume.getFsUuid())) {
        volumeApps.add(app);
      }
    }
    final int count=users.size() * volumeApps.size();
    if (count == 0) {
      finished.sendToTarget();
      return;
    }
    final StatsObserver observer=new StatsObserver(true,details,currentUser,finished,count);
    for (    UserInfo user : users) {
      for (      ApplicationInfo app : volumeApps) {
        packageManager.getPackageSizeInfo(app.packageName,user.id,observer);
      }
    }
  }
 else {
    finished.sendToTarget();
    return;
  }
}
