{
  final Context context=getPrefContext();
  getPreferenceScreen().removeAll();
  mInternalCategory.removeAll();
  mExternalCategory.removeAll();
  mInternalCategory.addPreference(mInternalSummary);
  int privateCount=0;
  long privateUsedBytes=0;
  long privateTotalBytes=0;
  final List<VolumeInfo> volumes=mStorageManager.getVolumes();
  Collections.sort(volumes,VolumeInfo.getDescriptionComparator());
  for (  VolumeInfo vol : volumes) {
    if (vol.getType() == VolumeInfo.TYPE_PRIVATE) {
      final int color=COLOR_PRIVATE[privateCount++ % COLOR_PRIVATE.length];
      mInternalCategory.addPreference(new StorageVolumePreference(context,vol,color));
      if (vol.isMountedReadable()) {
        final File path=vol.getPath();
        privateUsedBytes+=path.getTotalSpace() - path.getFreeSpace();
        privateTotalBytes+=path.getTotalSpace();
      }
    }
 else     if (vol.getType() == VolumeInfo.TYPE_PUBLIC) {
      mExternalCategory.addPreference(new StorageVolumePreference(context,vol,COLOR_PUBLIC));
    }
  }
  final List<VolumeRecord> recs=mStorageManager.getVolumeRecords();
  for (  VolumeRecord rec : recs) {
    if (rec.getType() == VolumeInfo.TYPE_PRIVATE && mStorageManager.findVolumeByUuid(rec.getFsUuid()) == null) {
      final Drawable icon=context.getDrawable(R.drawable.ic_sim_sd);
      icon.mutate();
      icon.setTint(COLOR_PUBLIC);
      final Preference pref=new Preference(context);
      pref.setKey(rec.getFsUuid());
      pref.setTitle(rec.getNickname());
      pref.setSummary(com.android.internal.R.string.ext_media_status_missing);
      pref.setIcon(icon);
      mInternalCategory.addPreference(pref);
    }
  }
  final List<DiskInfo> disks=mStorageManager.getDisks();
  for (  DiskInfo disk : disks) {
    if (disk.volumeCount == 0 && disk.size > 0) {
      final Preference pref=new Preference(context);
      pref.setKey(disk.getId());
      pref.setTitle(disk.getDescription());
      pref.setSummary(com.android.internal.R.string.ext_media_status_unsupported);
      pref.setIcon(R.drawable.ic_sim_sd);
      mExternalCategory.addPreference(pref);
    }
  }
  final BytesResult result=Formatter.formatBytes(getResources(),privateUsedBytes,0);
  mInternalSummary.setTitle(TextUtils.expandTemplate(getText(R.string.storage_size_large),result.value,result.units));
  mInternalSummary.setSummary(getString(R.string.storage_volume_used_total,Formatter.formatFileSize(context,privateTotalBytes)));
  if (mInternalCategory.getPreferenceCount() > 0) {
    getPreferenceScreen().addPreference(mInternalCategory);
  }
  if (mExternalCategory.getPreferenceCount() > 0) {
    getPreferenceScreen().addPreference(mExternalCategory);
  }
  if (mInternalCategory.getPreferenceCount() == 2 && mExternalCategory.getPreferenceCount() == 0) {
    final Bundle args=new Bundle();
    args.putString(VolumeInfo.EXTRA_VOLUME_ID,VolumeInfo.ID_PRIVATE_INTERNAL);
    Intent intent=Utils.onBuildStartFragmentIntent(getActivity(),PrivateVolumeSettings.class.getName(),args,null,R.string.apps_storage,null,false);
    intent.putExtra(SettingsDrawerActivity.EXTRA_SHOW_MENU,true);
    getActivity().startActivity(intent);
    finish();
  }
}
