{
  super(context);
  mStorageManager=context.getSystemService(StorageManager.class);
  mVolume=volume;
  mColor=color;
  setLayoutResource(R.layout.storage_volume);
  setKey(volume.getId());
  setTitle(mStorageManager.getBestVolumeDescription(volume));
  Drawable icon;
  if (VolumeInfo.ID_PRIVATE_INTERNAL.equals(volume.getId())) {
    icon=context.getDrawable(R.drawable.ic_settings_storage);
  }
 else {
    icon=context.getDrawable(R.drawable.ic_sim_sd);
  }
  if (volume.isMountedReadable()) {
    final File path=volume.getPath();
    final long freeBytes=path.getFreeSpace();
    final long totalBytes=path.getTotalSpace();
    final long usedBytes=totalBytes - freeBytes;
    final String used=Formatter.formatFileSize(context,usedBytes);
    final String total=Formatter.formatFileSize(context,totalBytes);
    setSummary(context.getString(R.string.storage_volume_summary,used,total));
    mUsedPercent=(int)((usedBytes * 100) / totalBytes);
    if (freeBytes < mStorageManager.getStorageLowBytes(path)) {
      mColor=StorageSettings.COLOR_WARNING;
      icon=context.getDrawable(R.drawable.ic_warning_24dp);
    }
  }
 else {
    setSummary(volume.getStateDescription());
    mUsedPercent=-1;
  }
  icon.mutate();
  icon.setTint(mColor);
  setIcon(icon);
  if (volume.getType() == VolumeInfo.TYPE_PUBLIC && volume.isMountedReadable()) {
    setWidgetLayoutResource(R.layout.preference_storage_action);
  }
}
