{
  final Context context=getContext();
  final UserInfo currentUser;
  try {
    currentUser=ActivityManagerNative.getDefault().getCurrentUser();
  }
 catch (  RemoteException e) {
    throw new RuntimeException("Failed to get current user");
  }
  final List<UserInfo> otherUsers=getUsersExcluding(currentUser);
  final boolean showUsers=mVolume == null && otherUsers.size() > 0;
  mUsageBarPreference=new UsageBarPreference(context);
  mUsageBarPreference.setOrder(ORDER_USAGE_BAR);
  addPreference(mUsageBarPreference);
  mItemTotal=buildItem(R.string.memory_size,0);
  mItemAvailable=buildItem(R.string.memory_available,R.color.memory_avail);
  addPreference(mItemTotal);
  addPreference(mItemAvailable);
  mItemApps=buildItem(R.string.memory_apps_usage,R.color.memory_apps_usage);
  mItemDcim=buildItem(R.string.memory_dcim_usage,R.color.memory_dcim);
  mItemMusic=buildItem(R.string.memory_music_usage,R.color.memory_music);
  mItemDownloads=buildItem(R.string.memory_downloads_usage,R.color.memory_downloads);
  mItemCache=buildItem(R.string.memory_media_cache_usage,R.color.memory_cache);
  mItemMisc=buildItem(R.string.memory_media_misc_usage,R.color.memory_misc);
  mItemCache.setKey(KEY_CACHE);
  final boolean showDetails=mVolume == null || mVolume.isPrimary();
  if (showDetails) {
    if (showUsers) {
      addPreference(new PreferenceHeader(context,currentUser.name));
    }
    addPreference(mItemApps);
    addPreference(mItemDcim);
    addPreference(mItemMusic);
    addPreference(mItemDownloads);
    addPreference(mItemCache);
    addPreference(mItemMisc);
    if (showUsers) {
      addPreference(new PreferenceHeader(context,R.string.storage_other_users));
      int count=0;
      for (      UserInfo info : otherUsers) {
        final int colorRes=count++ % 2 == 0 ? R.color.memory_user_light : R.color.memory_user_dark;
        final StorageItemPreference userPref=new StorageItemPreference(getContext(),info.name,colorRes,info.id);
        mItemUsers.add(userPref);
        addPreference(userPref);
      }
    }
  }
  final boolean isRemovable=mVolume != null ? mVolume.isRemovable() : false;
  mMountTogglePreference=new Preference(context);
  if (isRemovable) {
    mMountTogglePreference.setTitle(R.string.sd_eject);
    mMountTogglePreference.setSummary(R.string.sd_eject_summary);
    addPreference(mMountTogglePreference);
  }
  final boolean allowFormat=mVolume != null ? mVolume.isPrimary() : false;
  if (allowFormat) {
    mFormatPreference=new Preference(context);
    mFormatPreference.setTitle(R.string.sd_format);
    mFormatPreference.setSummary(R.string.sd_format_summary);
    addPreference(mFormatPreference);
  }
  final IPackageManager pm=ActivityThread.getPackageManager();
  try {
    if (pm.isStorageLow()) {
      mStorageLow=new Preference(context);
      mStorageLow.setOrder(ORDER_STORAGE_LOW);
      mStorageLow.setTitle(R.string.storage_low_title);
      mStorageLow.setSummary(R.string.storage_low_summary);
      addPreference(mStorageLow);
    }
 else     if (mStorageLow != null) {
      removePreference(mStorageLow);
      mStorageLow=null;
    }
  }
 catch (  RemoteException e) {
  }
}
