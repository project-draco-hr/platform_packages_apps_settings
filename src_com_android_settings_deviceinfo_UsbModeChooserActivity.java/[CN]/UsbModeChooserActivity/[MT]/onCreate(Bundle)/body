{
  Intent i=getBaseContext().registerReceiver(null,new IntentFilter(UsbManager.ACTION_USB_STATE));
  mIsUnlocked=i.getBooleanExtra(UsbManager.USB_DATA_UNLOCKED,false);
  super.onCreate(savedInstanceState);
  mUsbManager=(UsbManager)getSystemService(Context.USB_SERVICE);
  boolean isFileTransferRestricted=((UserManager)getSystemService(Context.USER_SERVICE)).hasUserRestriction(UserManager.DISALLOW_USB_FILE_TRANSFER);
  CharSequence[] items;
  if (isFileTransferRestricted) {
    items=new CharSequence[]{getText(R.string.usb_use_charging_only),getText(R.string.usb_use_MIDI)};
    mFunctions=new String[]{null,UsbManager.USB_FUNCTION_MIDI};
  }
 else {
    items=new CharSequence[]{getText(R.string.usb_use_charging_only),getText(R.string.usb_use_file_transfers),getText(R.string.usb_use_photo_transfers),getText(R.string.usb_use_MIDI)};
    mFunctions=new String[]{null,UsbManager.USB_FUNCTION_MTP,UsbManager.USB_FUNCTION_PTP,UsbManager.USB_FUNCTION_MIDI};
  }
  final AlertDialog levelDialog;
  AlertDialog.Builder builder=new AlertDialog.Builder(this);
  builder.setTitle(R.string.usb_use);
  builder.setSingleChoiceItems(items,getCurrentFunction(),new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      if (!ActivityManager.isUserAMonkey()) {
        setCurrentFunction(which);
      }
      dialog.dismiss();
      UsbModeChooserActivity.this.finish();
    }
  }
);
  builder.setOnDismissListener(new DialogInterface.OnDismissListener(){
    @Override public void onDismiss(    DialogInterface dialog){
      UsbModeChooserActivity.this.finish();
    }
  }
);
  builder.setNegativeButton(R.string.cancel,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      UsbModeChooserActivity.this.finish();
    }
  }
);
  levelDialog=builder.create();
  levelDialog.show();
}
