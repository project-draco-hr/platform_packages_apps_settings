{
  super.onDraw(canvas);
  final int width=getWidth();
  final int height=getHeight();
  final boolean layoutRtl=isLayoutRtl();
  final int textStartX=layoutRtl ? width : 0;
  final int textEndX=layoutRtl ? 0 : width;
  final Paint.Align textAlignLeft=layoutRtl ? Paint.Align.RIGHT : Paint.Align.LEFT;
  final Paint.Align textAlignRight=layoutRtl ? Paint.Align.LEFT : Paint.Align.RIGHT;
  mTextPaint.setTextAlign(textAlignLeft);
  canvas.drawPath(mBatLevelPath,mBatteryBackgroundPaint);
  int durationHalfWidth=mDurationStringWidth / 2;
  if (layoutRtl)   durationHalfWidth=-durationHalfWidth;
  if (mLargeMode) {
    canvas.drawText(mDurationString,(width / 2) - durationHalfWidth,mLevelBottom - mTextAscent + mThinLineWidth,mTextPaint);
  }
 else {
    canvas.drawText(mDurationString,(width / 2) - durationHalfWidth,mLevelTop + ((height - mLevelTop) / 2) - ((mTextDescent - mTextAscent) / 2) - mTextAscent,mTextPaint);
  }
  int headerTop=mLevelTop / 2 + (mHeaderTextDescent - mHeaderTextAscent) / 2;
  mHeaderTextPaint.setTextAlign(textAlignLeft);
  canvas.drawText(mChargeLabelString,textStartX,headerTop,mHeaderTextPaint);
  durationHalfWidth=mChargeDurationStringWidth / 2;
  if (layoutRtl)   durationHalfWidth=-durationHalfWidth;
  int headerCenter=((width - mChargeDurationStringWidth - mDrainStringWidth) / 2) + (layoutRtl ? mDrainStringWidth : mChargeLabelStringWidth);
  canvas.drawText(mChargeDurationString,headerCenter - durationHalfWidth,headerTop,mHeaderTextPaint);
  mHeaderTextPaint.setTextAlign(textAlignRight);
  canvas.drawText(mDrainString,textEndX,headerTop,mHeaderTextPaint);
  if (!mBatGoodPath.isEmpty()) {
    canvas.drawPath(mBatGoodPath,mBatteryGoodPaint);
  }
  if (!mBatWarnPath.isEmpty()) {
    canvas.drawPath(mBatWarnPath,mBatteryWarnPaint);
  }
  if (!mBatCriticalPath.isEmpty()) {
    canvas.drawPath(mBatCriticalPath,mBatteryCriticalPaint);
  }
  if (mHavePhoneSignal) {
    int top=height - mPhoneSignalOffset - (mLineWidth / 2);
    mPhoneSignalChart.draw(canvas,top,mLineWidth);
  }
  if (!mScreenOnPath.isEmpty()) {
    canvas.drawPath(mScreenOnPath,mScreenOnPaint);
  }
  if (!mChargingPath.isEmpty()) {
    canvas.drawPath(mChargingPath,mChargingPaint);
  }
  if (mHaveGps) {
    if (!mGpsOnPath.isEmpty()) {
      canvas.drawPath(mGpsOnPath,mGpsOnPaint);
    }
  }
  if (mHaveWifi) {
    if (!mWifiRunningPath.isEmpty()) {
      canvas.drawPath(mWifiRunningPath,mWifiRunningPaint);
    }
  }
  if (!mCpuRunningPath.isEmpty()) {
    canvas.drawPath(mCpuRunningPath,mCpuRunningPaint);
  }
  if (mLargeMode) {
    if (mHavePhoneSignal) {
      canvas.drawText(mPhoneSignalLabel,textStartX,height - mPhoneSignalOffset - mTextDescent,mTextPaint);
    }
    if (mHaveGps) {
      canvas.drawText(mGpsOnLabel,textStartX,height - mGpsOnOffset - mTextDescent,mTextPaint);
    }
    if (mHaveWifi) {
      canvas.drawText(mWifiRunningLabel,textStartX,height - mWifiRunningOffset - mTextDescent,mTextPaint);
    }
    canvas.drawText(mCpuRunningLabel,textStartX,height - mCpuRunningOffset - mTextDescent,mTextPaint);
    canvas.drawText(mChargingLabel,textStartX,height - mChargingOffset - mTextDescent,mTextPaint);
    canvas.drawText(mScreenOnLabel,textStartX,height - mScreenOnOffset - mTextDescent,mTextPaint);
    canvas.drawLine(0,mLevelBottom + (mThinLineWidth / 2),width,mLevelBottom + (mThinLineWidth / 2),mTextPaint);
    canvas.drawLine(0,mLevelTop,0,mLevelBottom + (mThinLineWidth / 2),mTextPaint);
    for (int i=0; i < 10; i++) {
      int y=mLevelTop + ((mLevelBottom - mLevelTop) * i) / 10;
      canvas.drawLine(0,y,mThinLineWidth * 2,y,mTextPaint);
    }
  }
}
