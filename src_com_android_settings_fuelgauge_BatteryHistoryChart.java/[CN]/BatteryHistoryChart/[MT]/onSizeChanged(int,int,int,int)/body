{
  super.onSizeChanged(w,h,oldw,oldh);
  mBatLevelPath.reset();
  mBatGoodPath.reset();
  mBatWarnPath.reset();
  mBatCriticalPath.reset();
  mScreenOnPath.reset();
  mChargingPath.reset();
  final long timeStart=mHistStart;
  final long timeChange=mHistEnd - mHistStart;
  final int batLow=mBatLow;
  final int batChange=mBatHigh - mBatLow;
  final int levelh=h - mLevelOffset;
  BatteryStats.HistoryItem rec=mHistFirst;
  int x=0, y=0, startX=0, lastX=-1, lastY=-1, lastBatX=-1;
  int i=0;
  Path curLevelPath=null;
  Path lastLinePath=null;
  boolean lastCharging=false, lastScreenOn=false;
  final int N=mNumHist;
  while (rec != null && i < N) {
    if (rec.cmd == BatteryStats.HistoryItem.CMD_UPDATE) {
      x=(int)(((rec.time - timeStart) * w) / timeChange);
      y=levelh - ((rec.batteryLevel - batLow) * (levelh - 1)) / batChange;
      if (lastX != x) {
        if (lastY == y) {
          lastBatX=x;
        }
 else {
          Path path;
          byte value=rec.batteryLevel;
          if (value <= BATTERY_CRITICAL)           path=mBatCriticalPath;
 else           if (value <= BATTERY_WARN)           path=mBatWarnPath;
 else           path=mBatGoodPath;
          if (path != lastLinePath) {
            if (lastLinePath != null) {
              lastLinePath.lineTo(x,y);
            }
            path.moveTo(x,y);
            lastLinePath=path;
          }
 else {
            path.lineTo(x,y);
          }
          if (curLevelPath == null) {
            curLevelPath=mBatLevelPath;
            curLevelPath.moveTo(x,y);
            startX=x;
          }
 else {
            curLevelPath.lineTo(x,y);
          }
          lastX=x;
          lastY=y;
          lastBatX=-1;
          final boolean charging=(rec.states & HistoryItem.STATE_BATTERY_PLUGGED_FLAG) != 0;
          if (charging != lastCharging) {
            if (charging) {
              mChargingPath.moveTo(x,h - mChargingOffset);
            }
 else {
              mChargingPath.lineTo(x,h - mChargingOffset);
            }
            lastCharging=charging;
          }
          final boolean screenOn=(rec.states & HistoryItem.STATE_SCREEN_ON_FLAG) != 0;
          if (screenOn != lastScreenOn) {
            if (screenOn) {
              mScreenOnPath.moveTo(x,h - mScreenOnOffset);
            }
 else {
              mScreenOnPath.lineTo(x,h - mScreenOnOffset);
            }
            lastScreenOn=screenOn;
          }
        }
      }
    }
 else     if (curLevelPath != null) {
      finishPaths(x + 1,h,levelh,startX,lastY,curLevelPath,lastBatX,lastCharging,lastScreenOn,lastLinePath);
      lastX=lastY=lastBatX=-1;
      curLevelPath=null;
      lastLinePath=null;
      lastCharging=lastScreenOn=false;
    }
    rec=rec.next;
    i++;
  }
  finishPaths(w,h,levelh,startX,lastY,curLevelPath,lastBatX,lastCharging,lastScreenOn,lastLinePath);
}
