{
  super.onSizeChanged(w,h,oldw,oldh);
  if (DEBUG)   Log.d(TAG,"onSizeChanged: " + oldw + "x"+ oldh+ " to "+ w+ "x"+ h);
  if (mLastWidth == w && mLastHeight == h) {
    return;
  }
  if (mLastWidth == 0 || mLastHeight == 0) {
    return;
  }
  if (DEBUG)   Log.d(TAG,"Rebuilding chart for: " + w + "x"+ h);
  mLastWidth=w;
  mLastHeight=h;
  mBitmap=null;
  mCanvas=null;
  int textHeight=mTextDescent - mTextAscent;
  if (h > ((textHeight * 10) + mChartMinHeight)) {
    mLargeMode=true;
    if (h > (textHeight * 15)) {
      mLineWidth=textHeight / 2;
    }
 else {
      mLineWidth=textHeight / 3;
    }
  }
 else {
    mLargeMode=false;
    mLineWidth=mThinLineWidth;
  }
  if (mLineWidth <= 0)   mLineWidth=1;
  mLevelTop=mHeaderHeight;
  mLevelLeft=mMaxPercentLabelStringWidth + mThinLineWidth * 3;
  mLevelRight=w;
  int levelWidth=mLevelRight - mLevelLeft;
  mTextPaint.setStrokeWidth(mThinLineWidth);
  mBatteryGoodPaint.setStrokeWidth(mThinLineWidth);
  mBatteryWarnPaint.setStrokeWidth(mThinLineWidth);
  mBatteryCriticalPaint.setStrokeWidth(mThinLineWidth);
  mChargingPaint.setStrokeWidth(mLineWidth);
  mScreenOnPaint.setStrokeWidth(mLineWidth);
  mGpsOnPaint.setStrokeWidth(mLineWidth);
  mWifiRunningPaint.setStrokeWidth(mLineWidth);
  mCpuRunningPaint.setStrokeWidth(mLineWidth);
  mDebugRectPaint.setStrokeWidth(1);
  int fullBarOffset=textHeight + mLineWidth;
  if (mLargeMode) {
    mChargingOffset=mLineWidth;
    mScreenOnOffset=mChargingOffset + fullBarOffset;
    mCpuRunningOffset=mScreenOnOffset + fullBarOffset;
    mWifiRunningOffset=mCpuRunningOffset + fullBarOffset;
    mGpsOnOffset=mWifiRunningOffset + (mHaveWifi ? fullBarOffset : 0);
    mPhoneSignalOffset=mGpsOnOffset + (mHaveGps ? fullBarOffset : 0);
    mLevelOffset=mPhoneSignalOffset + (mHavePhoneSignal ? fullBarOffset : 0) + mLineWidth * 2 + mLineWidth / 2;
    if (mHavePhoneSignal) {
      mPhoneSignalChart.init(w);
    }
  }
 else {
    mScreenOnOffset=mGpsOnOffset=mWifiRunningOffset=mCpuRunningOffset=mChargingOffset=mPhoneSignalOffset=0;
    mLevelOffset=fullBarOffset + mThinLineWidth * 4;
    if (mHavePhoneSignal) {
      mPhoneSignalChart.init(0);
    }
  }
  mBatLevelPath.reset();
  mBatGoodPath.reset();
  mBatWarnPath.reset();
  mTimeRemainPath.reset();
  mBatCriticalPath.reset();
  mScreenOnPath.reset();
  mGpsOnPath.reset();
  mWifiRunningPath.reset();
  mCpuRunningPath.reset();
  mChargingPath.reset();
  mTimeLabels.clear();
  mDateLabels.clear();
  final long walltimeStart=mStartWallTime;
  final long walltimeChange=mEndWallTime > walltimeStart ? (mEndWallTime - walltimeStart) : 1;
  long curWalltime=0;
  long lastRealtime=0;
  final int batLow=mBatLow;
  final int batChange=mBatHigh - mBatLow;
  final int levelh=h - mLevelOffset - mLevelTop;
  mLevelBottom=mLevelTop + levelh;
  int x=mLevelLeft, y=0, startX=mLevelLeft, lastX=-1, lastY=-1;
  int i=0;
  Path curLevelPath=null;
  Path lastLinePath=null;
  boolean lastCharging=false, lastScreenOn=false, lastGpsOn=false;
  boolean lastWifiRunning=false, lastWifiSupplRunning=false, lastCpuRunning=false;
  int lastWifiSupplState=BatteryStats.WIFI_SUPPL_STATE_INVALID;
  final int N=mNumHist;
  if (mStats.startIteratingHistoryLocked()) {
    final HistoryItem rec=new HistoryItem();
    while (mStats.getNextHistoryLocked(rec) && i < N) {
      if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET) {
        curWalltime=rec.currentTime;
        lastRealtime=rec.time;
      }
 else       if (curWalltime != 0) {
        curWalltime+=rec.time - lastRealtime;
        lastRealtime=rec.time;
      }
      if (curWalltime != 0 && rec.isDeltaData()) {
        x=mLevelLeft + (int)(((curWalltime - walltimeStart) * levelWidth) / walltimeChange);
        if (x < 0) {
          x=0;
        }
        if (false) {
          StringBuilder sb=new StringBuilder(128);
          sb.append("walloff=");
          TimeUtils.formatDuration(curWalltime - walltimeStart,sb);
          sb.append(" wallchange=");
          TimeUtils.formatDuration(walltimeChange,sb);
          sb.append(" x=");
          sb.append(x);
          Log.d("foo",sb.toString());
        }
        y=mLevelTop + levelh - ((rec.batteryLevel - batLow) * (levelh - 1)) / batChange;
        if (lastX != x) {
          if (lastY != y) {
            Path path;
            byte value=rec.batteryLevel;
            if (value <= mBatteryCriticalLevel)             path=mBatCriticalPath;
 else             if (value <= mBatteryWarnLevel)             path=mBatWarnPath;
 else             path=null;
            if (path != lastLinePath) {
              if (lastLinePath != null) {
                lastLinePath.lineTo(x,y);
              }
              if (path != null) {
                path.moveTo(x,y);
              }
              lastLinePath=path;
            }
 else             if (path != null) {
              path.lineTo(x,y);
            }
            if (curLevelPath == null) {
              curLevelPath=mBatLevelPath;
              curLevelPath.moveTo(x,y);
              startX=x;
            }
 else {
              curLevelPath.lineTo(x,y);
            }
            lastX=x;
            lastY=y;
          }
        }
        if (mLargeMode) {
          final boolean charging=(rec.states & HistoryItem.STATE_BATTERY_PLUGGED_FLAG) != 0;
          if (charging != lastCharging) {
            if (charging) {
              mChargingPath.moveTo(x,h - mChargingOffset);
            }
 else {
              mChargingPath.lineTo(x,h - mChargingOffset);
            }
            lastCharging=charging;
          }
          final boolean screenOn=(rec.states & HistoryItem.STATE_SCREEN_ON_FLAG) != 0;
          if (screenOn != lastScreenOn) {
            if (screenOn) {
              mScreenOnPath.moveTo(x,h - mScreenOnOffset);
            }
 else {
              mScreenOnPath.lineTo(x,h - mScreenOnOffset);
            }
            lastScreenOn=screenOn;
          }
          final boolean gpsOn=(rec.states & HistoryItem.STATE_GPS_ON_FLAG) != 0;
          if (gpsOn != lastGpsOn) {
            if (gpsOn) {
              mGpsOnPath.moveTo(x,h - mGpsOnOffset);
            }
 else {
              mGpsOnPath.lineTo(x,h - mGpsOnOffset);
            }
            lastGpsOn=gpsOn;
          }
          final int wifiSupplState=((rec.states2 & HistoryItem.STATE2_WIFI_SUPPL_STATE_MASK) >> HistoryItem.STATE2_WIFI_SUPPL_STATE_SHIFT);
          boolean wifiRunning;
          if (lastWifiSupplState != wifiSupplState) {
            lastWifiSupplState=wifiSupplState;
switch (wifiSupplState) {
case BatteryStats.WIFI_SUPPL_STATE_DISCONNECTED:
case BatteryStats.WIFI_SUPPL_STATE_DORMANT:
case BatteryStats.WIFI_SUPPL_STATE_INACTIVE:
case BatteryStats.WIFI_SUPPL_STATE_INTERFACE_DISABLED:
case BatteryStats.WIFI_SUPPL_STATE_INVALID:
case BatteryStats.WIFI_SUPPL_STATE_UNINITIALIZED:
              wifiRunning=lastWifiSupplRunning=false;
            break;
default :
          wifiRunning=lastWifiSupplRunning=true;
        break;
    }
  }
 else {
    wifiRunning=lastWifiSupplRunning;
  }
  if ((rec.states & (HistoryItem.STATE_WIFI_FULL_LOCK_FLAG | HistoryItem.STATE_WIFI_MULTICAST_ON_FLAG | HistoryItem.STATE_WIFI_SCAN_FLAG)) != 0) {
    wifiRunning=true;
  }
  if (wifiRunning != lastWifiRunning) {
    if (wifiRunning) {
      mWifiRunningPath.moveTo(x,h - mWifiRunningOffset);
    }
 else {
      mWifiRunningPath.lineTo(x,h - mWifiRunningOffset);
    }
    lastWifiRunning=wifiRunning;
  }
  final boolean cpuRunning=(rec.states & HistoryItem.STATE_CPU_RUNNING_FLAG) != 0;
  if (cpuRunning != lastCpuRunning) {
    if (cpuRunning) {
      mCpuRunningPath.moveTo(x,h - mCpuRunningOffset);
    }
 else {
      mCpuRunningPath.lineTo(x,h - mCpuRunningOffset);
    }
    lastCpuRunning=cpuRunning;
  }
  if (mLargeMode && mHavePhoneSignal) {
    int bin;
    if (((rec.states & HistoryItem.STATE_PHONE_STATE_MASK) >> HistoryItem.STATE_PHONE_STATE_SHIFT) == ServiceState.STATE_POWER_OFF) {
      bin=0;
    }
 else     if ((rec.states & HistoryItem.STATE_PHONE_SCANNING_FLAG) != 0) {
      bin=1;
    }
 else {
      bin=(rec.states & HistoryItem.STATE_PHONE_SIGNAL_STRENGTH_MASK) >> HistoryItem.STATE_PHONE_SIGNAL_STRENGTH_SHIFT;
      bin+=2;
    }
    mPhoneSignalChart.addTick(x,bin);
  }
}
}
 else if (rec.cmd != HistoryItem.CMD_OVERFLOW && rec.cmd != HistoryItem.CMD_CURRENT_TIME) {
if (curLevelPath != null) {
  finishPaths(x + 1,h,levelh,startX,lastY,curLevelPath,lastX,lastCharging,lastScreenOn,lastGpsOn,lastWifiRunning,lastCpuRunning,lastLinePath);
  lastX=lastY=-1;
  curLevelPath=null;
  lastLinePath=null;
  lastCharging=lastScreenOn=lastGpsOn=lastCpuRunning=false;
}
}
i++;
}
}
if (lastY < 0 || lastX < 0) {
x=lastX=mLevelLeft;
y=lastY=mLevelTop + levelh - ((mBatteryLevel - batLow) * (levelh - 1)) / batChange;
Path path;
byte value=(byte)mBatteryLevel;
if (value <= mBatteryCriticalLevel) path=mBatCriticalPath;
 else if (value <= mBatteryWarnLevel) path=mBatWarnPath;
 else path=null;
if (path != null) {
path.moveTo(x,y);
lastLinePath=path;
}
mBatLevelPath.moveTo(x,y);
curLevelPath=mBatLevelPath;
x=w;
}
 else {
x=mLevelLeft + (int)(((mEndDataWallTime - walltimeStart) * levelWidth) / walltimeChange);
if (x < 0) {
x=0;
}
}
finishPaths(x,h,levelh,startX,lastY,curLevelPath,lastX,lastCharging,lastScreenOn,lastGpsOn,lastWifiRunning,lastCpuRunning,lastLinePath);
if (x < w) {
mTimeRemainPath.moveTo(x,lastY);
int fullY=mLevelTop + levelh - ((100 - batLow) * (levelh - 1)) / batChange;
int emptyY=mLevelTop + levelh - ((0 - batLow) * (levelh - 1)) / batChange;
if (mDischarging) {
mTimeRemainPath.lineTo(mLevelRight,emptyY);
}
 else {
mTimeRemainPath.lineTo(mLevelRight,fullY);
mTimeRemainPath.lineTo(mLevelRight,emptyY);
}
mTimeRemainPath.lineTo(x,emptyY);
mTimeRemainPath.close();
}
if (mStartWallTime > 0) {
boolean is24hr=is24Hour();
Calendar calStart=Calendar.getInstance();
calStart.setTimeInMillis(mStartWallTime);
calStart.set(Calendar.MILLISECOND,0);
calStart.set(Calendar.SECOND,0);
calStart.set(Calendar.MINUTE,0);
long startRoundTime=calStart.getTimeInMillis();
if (startRoundTime < mStartWallTime) {
calStart.set(Calendar.HOUR_OF_DAY,calStart.get(Calendar.HOUR_OF_DAY) + 1);
startRoundTime=calStart.getTimeInMillis();
}
Calendar calEnd=Calendar.getInstance();
calEnd.setTimeInMillis(mEndWallTime);
calEnd.set(Calendar.MILLISECOND,0);
calEnd.set(Calendar.SECOND,0);
calEnd.set(Calendar.MINUTE,0);
long endRoundTime=calEnd.getTimeInMillis();
if (startRoundTime < endRoundTime) {
addTimeLabel(calStart,mLevelLeft,mLevelRight,is24hr);
Calendar calMid=Calendar.getInstance();
calMid.setTimeInMillis(mStartWallTime + ((mEndWallTime - mStartWallTime) / 2));
calMid.set(Calendar.MILLISECOND,0);
calMid.set(Calendar.SECOND,0);
calMid.set(Calendar.MINUTE,0);
long calMidMillis=calMid.getTimeInMillis();
if (calMidMillis > startRoundTime && calMidMillis < endRoundTime) {
addTimeLabel(calMid,mLevelLeft,mLevelRight,is24hr);
}
addTimeLabel(calEnd,mLevelLeft,mLevelRight,is24hr);
}
if (calStart.get(Calendar.DAY_OF_YEAR) != calEnd.get(Calendar.DAY_OF_YEAR) || calStart.get(Calendar.YEAR) != calEnd.get(Calendar.YEAR)) {
boolean isDayFirst=isDayFirst();
calStart.set(Calendar.HOUR_OF_DAY,0);
startRoundTime=calStart.getTimeInMillis();
if (startRoundTime < mStartWallTime) {
calStart.set(Calendar.DAY_OF_YEAR,calStart.get(Calendar.DAY_OF_YEAR) + 1);
startRoundTime=calStart.getTimeInMillis();
}
calEnd.set(Calendar.HOUR_OF_DAY,0);
endRoundTime=calEnd.getTimeInMillis();
if (startRoundTime < endRoundTime) {
addDateLabel(calStart,mLevelLeft,mLevelRight,isDayFirst);
Calendar calMid=Calendar.getInstance();
calMid.setTimeInMillis(startRoundTime + ((endRoundTime - startRoundTime) / 2));
calMid.set(Calendar.HOUR_OF_DAY,0);
long calMidMillis=calMid.getTimeInMillis();
if (calMidMillis > startRoundTime && calMidMillis < endRoundTime) {
  addDateLabel(calMid,mLevelLeft,mLevelRight,isDayFirst);
}
}
addDateLabel(calEnd,mLevelLeft,mLevelRight,isDayFirst);
}
}
if (mTimeLabels.size() < 2) {
mDurationString=Formatter.formatShortElapsedTime(getContext(),mEndWallTime - mStartWallTime);
mDurationStringWidth=(int)mTextPaint.measureText(mDurationString);
}
 else {
mDurationString=null;
mDurationStringWidth=0;
}
}
