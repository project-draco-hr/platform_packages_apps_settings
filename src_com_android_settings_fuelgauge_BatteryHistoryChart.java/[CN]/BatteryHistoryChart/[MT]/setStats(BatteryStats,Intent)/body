{
  mStats=stats;
  mBatteryBroadcast=broadcast;
  if (DEBUG)   Log.d(TAG,"Setting stats...");
  final long elapsedRealtimeUs=SystemClock.elapsedRealtime() * 1000;
  long uSecTime=mStats.computeBatteryRealtime(elapsedRealtimeUs,BatteryStats.STATS_SINCE_CHARGED);
  mStatsPeriod=uSecTime;
  mChargingLabel=getContext().getString(R.string.battery_stats_charging_label);
  mScreenOnLabel=getContext().getString(R.string.battery_stats_screen_on_label);
  mGpsOnLabel=getContext().getString(R.string.battery_stats_gps_on_label);
  mWifiRunningLabel=getContext().getString(R.string.battery_stats_wifi_running_label);
  mCpuRunningLabel=getContext().getString(R.string.battery_stats_wake_lock_label);
  mPhoneSignalLabel=getContext().getString(R.string.battery_stats_phone_signal_label);
  mMaxPercentLabelString=getContext().getResources().getString(R.string.percentage,100);
  mMinPercentLabelString=getContext().getResources().getString(R.string.percentage,0);
  mBatteryLevel=com.android.settings.Utils.getBatteryLevel(mBatteryBroadcast);
  long remainingTimeUs=0;
  mDischarging=true;
  if (mBatteryBroadcast.getIntExtra(BatteryManager.EXTRA_PLUGGED,0) == 0) {
    final long drainTime=mStats.computeBatteryTimeRemaining(elapsedRealtimeUs);
    if (drainTime > 0) {
      remainingTimeUs=drainTime;
      String timeString=Formatter.formatShortElapsedTime(getContext(),drainTime / 1000);
      mChargeLabelString=getContext().getResources().getString(R.string.power_discharging_duration,mBatteryLevel,timeString);
    }
 else {
      mChargeLabelString=getContext().getResources().getString(R.string.power_discharging,mBatteryLevel);
    }
  }
 else {
    final long chargeTime=mStats.computeChargeTimeRemaining(elapsedRealtimeUs);
    final String statusLabel=com.android.settings.Utils.getBatteryStatus(getResources(),mBatteryBroadcast);
    final int status=mBatteryBroadcast.getIntExtra(BatteryManager.EXTRA_STATUS,BatteryManager.BATTERY_STATUS_UNKNOWN);
    if (chargeTime > 0 && status != BatteryManager.BATTERY_STATUS_FULL) {
      mDischarging=false;
      remainingTimeUs=chargeTime;
      String timeString=Formatter.formatShortElapsedTime(getContext(),chargeTime / 1000);
      int plugType=mBatteryBroadcast.getIntExtra(BatteryManager.EXTRA_PLUGGED,0);
      int resId;
      if (plugType == BatteryManager.BATTERY_PLUGGED_AC) {
        resId=R.string.power_charging_duration_ac;
      }
 else       if (plugType == BatteryManager.BATTERY_PLUGGED_USB) {
        resId=R.string.power_charging_duration_usb;
      }
 else       if (plugType == BatteryManager.BATTERY_PLUGGED_WIRELESS) {
        resId=R.string.power_charging_duration_wireless;
      }
 else {
        resId=R.string.power_charging_duration;
      }
      mChargeLabelString=getContext().getResources().getString(resId,mBatteryLevel,timeString);
    }
 else {
      mChargeLabelString=getContext().getResources().getString(R.string.power_charging,mBatteryLevel,statusLabel);
    }
  }
  mDrainString="";
  mChargeDurationString="";
  int pos=0;
  int lastInteresting=0;
  byte lastLevel=-1;
  mBatLow=0;
  mBatHigh=100;
  mStartWallTime=0;
  mEndDataWallTime=0;
  mEndWallTime=0;
  mHistStart=0;
  mHistEnd=0;
  long lastWallTime=0;
  long lastRealtime=0;
  int aggrStates=0;
  int aggrStates2=0;
  boolean first=true;
  if (stats.startIteratingHistoryLocked()) {
    final HistoryItem rec=new HistoryItem();
    while (stats.getNextHistoryLocked(rec)) {
      pos++;
      if (first) {
        first=false;
        mHistStart=rec.time;
      }
      if (rec.cmd == HistoryItem.CMD_CURRENT_TIME || rec.cmd == HistoryItem.CMD_RESET) {
        lastWallTime=rec.currentTime;
        lastRealtime=rec.time;
        if (mStartWallTime == 0) {
          mStartWallTime=lastWallTime;
        }
      }
      if (rec.isDeltaData()) {
        if (rec.batteryLevel != lastLevel || pos == 1) {
          lastLevel=rec.batteryLevel;
        }
        lastInteresting=pos;
        mHistDataEnd=rec.time;
        aggrStates|=rec.states;
        aggrStates2|=rec.states2;
      }
    }
  }
  mHistEnd=mHistDataEnd + (remainingTimeUs / 1000);
  mEndDataWallTime=lastWallTime + mHistDataEnd - lastRealtime;
  mEndWallTime=mEndDataWallTime + (remainingTimeUs / 1000);
  mNumHist=lastInteresting;
  mHaveGps=(aggrStates & HistoryItem.STATE_GPS_ON_FLAG) != 0;
  mHaveWifi=(aggrStates2 & HistoryItem.STATE2_WIFI_RUNNING_FLAG) != 0 || (aggrStates & (HistoryItem.STATE_WIFI_FULL_LOCK_FLAG | HistoryItem.STATE_WIFI_MULTICAST_ON_FLAG | HistoryItem.STATE_WIFI_SCAN_FLAG)) != 0;
  if (!com.android.settings.Utils.isWifiOnly(getContext())) {
    mHavePhoneSignal=true;
  }
  if (mHistEnd <= mHistStart)   mHistEnd=mHistStart + 1;
}
