{
  final SparseArray<BatterySipper> uidList=new SparseArray<>();
  final ArrayList<BatterySipper> results=new ArrayList<>();
  final int numSippers=sippers.size();
  for (int i=0; i < numSippers; i++) {
    BatterySipper sipper=sippers.get(i);
    if (sipper.getUid() > 0) {
      int realUid=sipper.getUid();
      if (isSharedGid(sipper.getUid())) {
        realUid=UserHandle.getUid(UserHandle.USER_OWNER,UserHandle.getAppIdFromSharedAppGid(sipper.getUid()));
      }
      if (isSystemUid(realUid) && !"mediaserver".equals(sipper.packageWithHighestDrain)) {
        realUid=Process.SYSTEM_UID;
      }
      if (realUid != sipper.getUid()) {
        BatterySipper newSipper=new BatterySipper(sipper.drainType,new FakeUid(realUid),0.0);
        newSipper.add(sipper);
        newSipper.packageWithHighestDrain=sipper.packageWithHighestDrain;
        newSipper.mPackages=sipper.mPackages;
        sipper=newSipper;
      }
      int index=uidList.indexOfKey(realUid);
      if (index < 0) {
        uidList.put(realUid,sipper);
      }
 else {
        final BatterySipper existingSipper=uidList.valueAt(index);
        existingSipper.add(sipper);
        if (existingSipper.packageWithHighestDrain == null && sipper.packageWithHighestDrain != null) {
          existingSipper.packageWithHighestDrain=sipper.packageWithHighestDrain;
        }
        final int existingPackageLen=existingSipper.mPackages != null ? existingSipper.mPackages.length : 0;
        final int newPackageLen=sipper.mPackages != null ? sipper.mPackages.length : 0;
        if (newPackageLen > 0) {
          String[] newPackages=new String[existingPackageLen + newPackageLen];
          if (existingPackageLen > 0) {
            System.arraycopy(existingSipper.mPackages,0,newPackages,0,existingPackageLen);
          }
          System.arraycopy(sipper.mPackages,0,newPackages,existingPackageLen,newPackageLen);
          existingSipper.mPackages=newPackages;
        }
      }
    }
 else {
      results.add(sipper);
    }
  }
  final int numUidSippers=uidList.size();
  for (int i=0; i < numUidSippers; i++) {
    results.add(uidList.valueAt(i));
  }
  Collections.sort(results,new Comparator<BatterySipper>(){
    @Override public int compare(    BatterySipper a,    BatterySipper b){
      return Double.compare(b.totalPowerMah,a.totalPowerMah);
    }
  }
);
  return results;
}
