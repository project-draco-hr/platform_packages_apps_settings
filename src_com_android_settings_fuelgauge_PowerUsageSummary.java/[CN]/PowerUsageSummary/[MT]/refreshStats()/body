{
  mAppListGroup.removeAll();
  mAppListGroup.setOrderingAsAdded(false);
  mStatsHelper.refreshStats(BatteryStats.STATS_SINCE_CHARGED,UserHandle.myUserId());
  mHistPref=new BatteryHistoryPreference(getActivity(),mStatsHelper.getStats(),mStatsHelper.getBatteryBroadcast());
  mHistPref.setOrder(-1);
  mAppListGroup.addPreference(mHistPref);
  if (mStatsHelper.getPowerProfile().getAveragePower(PowerProfile.POWER_SCREEN_FULL) < 10) {
    addNotAvailableMessage();
    return;
  }
  boolean addedSome=false;
  final int dischargeAmount=mStatsHelper.getStats().getDischargeAmount(mStatsType);
  List<BatterySipper> usageList=mStatsHelper.getUsageList();
  for (int i=0; i < usageList.size(); i++) {
    BatterySipper sipper=usageList.get(i);
    if ((sipper.value * 60 * 60) < MIN_POWER_THRESHOLD)     continue;
    final double percentOfTotal=((sipper.value / mStatsHelper.getTotalPower()) * dischargeAmount);
    if (((int)(percentOfTotal + .5)) < 1)     continue;
    BatteryEntry entry=new BatteryEntry(getActivity(),mHandler,mUm,sipper);
    PowerGaugePreference pref=new PowerGaugePreference(getActivity(),entry.getIcon(),entry);
    final double percentOfMax=(sipper.value * 100) / mStatsHelper.getMaxPower();
    sipper.percent=percentOfTotal;
    pref.setTitle(entry.getLabel());
    pref.setOrder(i + 1);
    pref.setPercent(percentOfMax,percentOfTotal);
    if (sipper.uidObj != null) {
      pref.setKey(Integer.toString(sipper.uidObj.getUid()));
    }
    addedSome=true;
    mAppListGroup.addPreference(pref);
    if (mAppListGroup.getPreferenceCount() > (MAX_ITEMS_TO_LIST + 1))     break;
  }
  if (!addedSome) {
    addNotAvailableMessage();
  }
  BatteryEntry.startRequestQueue();
}
