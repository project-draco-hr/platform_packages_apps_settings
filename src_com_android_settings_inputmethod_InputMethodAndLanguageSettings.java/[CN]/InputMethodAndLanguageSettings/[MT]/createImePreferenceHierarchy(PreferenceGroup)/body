{
  final Preference hardKeyPref=findPreference("hard_keyboard");
  if (mIsOnlyImeSettings) {
    getPreferenceScreen().removeAll();
    if (hardKeyPref != null && mHaveHardKeyboard) {
      getPreferenceScreen().addPreference(hardKeyPref);
    }
    if (SHOW_INPUT_METHOD_SWITCHER_SETTINGS) {
      getPreferenceScreen().addPreference(mShowInputMethodSelectorPref);
    }
    getPreferenceScreen().addPreference(root);
  }
  if (hardKeyPref != null) {
    if (mHaveHardKeyboard) {
      mHardKeyboardCategory=(PreferenceCategory)hardKeyPref;
    }
 else {
      getPreferenceScreen().removePreference(hardKeyPref);
    }
  }
  root.removeAll();
  mInputMethodPreferenceList.clear();
  if (!mIsOnlyImeSettings) {
    final PreferenceScreen currentIme=new PreferenceScreen(getActivity(),null);
    currentIme.setKey(KEY_CURRENT_INPUT_METHOD);
    currentIme.setTitle(getResources().getString(R.string.current_input_method));
    root.addPreference(currentIme);
  }
  final int N=(mImis == null ? 0 : mImis.size());
  for (int i=0; i < N; ++i) {
    final InputMethodInfo imi=mImis.get(i);
    final InputMethodPreference pref=getInputMethodPreference(imi,N);
    mInputMethodPreferenceList.add(pref);
  }
  Collections.sort(mInputMethodPreferenceList);
  for (int i=0; i < N; ++i) {
    root.addPreference(mInputMethodPreferenceList.get(i));
  }
}
