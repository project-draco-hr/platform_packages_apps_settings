{
  super.onCreate(icicle);
  addPreferencesFromResource(R.xml.language_settings);
  try {
    mDefaultInputMethodSelectorVisibility=Integer.valueOf(getString(R.string.input_method_selector_visibility_default_value));
  }
 catch (  NumberFormatException e) {
  }
  if (getActivity().getAssets().getLocales().length == 1) {
    getPreferenceScreen().removePreference(findPreference(KEY_PHONE_LANGUAGE));
  }
 else {
    mLanguagePref=findPreference(KEY_PHONE_LANGUAGE);
  }
  if (SHOW_INPUT_METHOD_SWITCHER_SETTINGS) {
    mShowInputMethodSelectorPref=(ListPreference)findPreference(KEY_INPUT_METHOD_SELECTOR);
    mShowInputMethodSelectorPref.setOnPreferenceChangeListener(this);
    updateInputMethodSelectorSummary(loadInputMethodSelectorVisibility());
  }
  new VoiceInputOutputSettings(this).onCreate();
  final Configuration config=getResources().getConfiguration();
  mHaveHardKeyboard=(config.keyboard == Configuration.KEYBOARD_QWERTY);
  mIsOnlyImeSettings=Settings.ACTION_INPUT_METHOD_SETTINGS.equals(getActivity().getIntent().getAction());
  mImm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
  mImis=mImm.getInputMethodList();
  createImePreferenceHierarchy((PreferenceGroup)findPreference("keyboard_settings_category"));
  final Intent intent=new Intent(Intent.ACTION_MAIN);
  intent.setClass(getActivity(),SpellCheckersSettingsActivity.class);
  ((SpellCheckersPreference)findPreference("spellcheckers_settings")).setFragmentIntent(this,intent);
}
