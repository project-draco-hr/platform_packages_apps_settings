{
  super.onCreate(icicle);
  addPreferencesFromResource(R.xml.language_settings);
  try {
    mDefaultInputMethodSelectorVisibility=Integer.valueOf(getString(R.string.input_method_selector_visibility_default_value));
  }
 catch (  NumberFormatException e) {
  }
  if (getActivity().getAssets().getLocales().length == 1) {
    getPreferenceScreen().removePreference(findPreference(KEY_PHONE_LANGUAGE));
  }
 else {
    mLanguagePref=findPreference(KEY_PHONE_LANGUAGE);
  }
  if (SHOW_INPUT_METHOD_SWITCHER_SETTINGS) {
    mShowInputMethodSelectorPref=(ListPreference)findPreference(KEY_INPUT_METHOD_SELECTOR);
    mShowInputMethodSelectorPref.setOnPreferenceChangeListener(this);
    updateInputMethodSelectorSummary(loadInputMethodSelectorVisibility());
  }
  new VoiceInputOutputSettings(this).onCreate();
  mHardKeyboardCategory=(PreferenceCategory)findPreference("hard_keyboard");
  mKeyboardSettingsCategory=(PreferenceCategory)findPreference("keyboard_settings_category");
  mIsOnlyImeSettings=Settings.ACTION_INPUT_METHOD_SETTINGS.equals(getActivity().getIntent().getAction());
  getActivity().getIntent().setAction(null);
  if (mIsOnlyImeSettings) {
    getPreferenceScreen().removeAll();
    getPreferenceScreen().addPreference(mHardKeyboardCategory);
    if (SHOW_INPUT_METHOD_SWITCHER_SETTINGS) {
      getPreferenceScreen().addPreference(mShowInputMethodSelectorPref);
    }
    getPreferenceScreen().addPreference(mKeyboardSettingsCategory);
  }
  mImm=(InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
  mImis=mImm.getInputMethodList();
  mKeyboardSettingsCategory.removeAll();
  if (!mIsOnlyImeSettings) {
    final PreferenceScreen currentIme=new PreferenceScreen(getActivity(),null);
    currentIme.setKey(KEY_CURRENT_INPUT_METHOD);
    currentIme.setTitle(getResources().getString(R.string.current_input_method));
    mKeyboardSettingsCategory.addPreference(currentIme);
  }
  mInputMethodPreferenceList.clear();
  final int N=(mImis == null ? 0 : mImis.size());
  for (int i=0; i < N; ++i) {
    final InputMethodInfo imi=mImis.get(i);
    final InputMethodPreference pref=getInputMethodPreference(imi,N);
    mInputMethodPreferenceList.add(pref);
  }
  if (!mInputMethodPreferenceList.isEmpty()) {
    Collections.sort(mInputMethodPreferenceList);
    for (int i=0; i < N; ++i) {
      mKeyboardSettingsCategory.addPreference(mInputMethodPreferenceList.get(i));
    }
  }
  mIm=(InputManager)getActivity().getSystemService(Context.INPUT_SERVICE);
  updateHardKeyboards();
  final Intent intent=new Intent(Intent.ACTION_MAIN);
  intent.setClass(getActivity(),SpellCheckersSettingsActivity.class);
  final SpellCheckersPreference scp=((SpellCheckersPreference)findPreference("spellcheckers_settings"));
  if (scp != null) {
    scp.setFragmentIntent(this,intent);
  }
  mHandler=new Handler();
  mSettingsObserver=new SettingsObserver(mHandler,getActivity());
}
