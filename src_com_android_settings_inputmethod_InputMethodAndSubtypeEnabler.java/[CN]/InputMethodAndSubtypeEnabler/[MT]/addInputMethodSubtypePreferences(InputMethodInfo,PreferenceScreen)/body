{
  final Context context=getActivity();
  final int subtypeCount=imi.getSubtypeCount();
  if (subtypeCount <= 1) {
    return;
  }
  final String imiId=imi.getId();
  final PreferenceCategory keyboardSettingsCategory=new PreferenceCategory(context);
  root.addPreference(keyboardSettingsCategory);
  final PackageManager pm=getPackageManager();
  final CharSequence label=imi.loadLabel(pm);
  keyboardSettingsCategory.setTitle(label);
  keyboardSettingsCategory.setKey(imiId);
  final CheckBoxPreference autoSelectionPref=new CheckBoxPreference(context);
  mAutoSelectionPrefsMap.put(imiId,autoSelectionPref);
  keyboardSettingsCategory.addPreference(autoSelectionPref);
  final PreferenceCategory activeInputMethodsCategory=new PreferenceCategory(context);
  activeInputMethodsCategory.setTitle(R.string.active_input_method_subtypes);
  root.addPreference(activeInputMethodsCategory);
  CharSequence autoSubtypeLabel=null;
  final ArrayList<Preference> subtypePreferences=new ArrayList<>();
  for (int index=0; index < subtypeCount; ++index) {
    final InputMethodSubtype subtype=imi.getSubtypeAt(index);
    if (subtype.overridesImplicitlyEnabledSubtype()) {
      if (autoSubtypeLabel == null) {
        autoSubtypeLabel=subtype.getDisplayName(context,imi.getPackageName(),imi.getServiceInfo().applicationInfo);
      }
    }
 else {
      final Preference subtypePref=new InputMethodSubtypePreference(context,subtype,imi);
      subtypePreferences.add(subtypePref);
    }
  }
  Collections.sort(subtypePreferences,new Comparator<Preference>(){
    @Override public int compare(    final Preference lhs,    final Preference rhs){
      if (lhs instanceof InputMethodSubtypePreference) {
        return ((InputMethodSubtypePreference)lhs).compareTo(rhs,mCollator);
      }
      return lhs.compareTo(rhs);
    }
  }
);
  final int prefCount=subtypePreferences.size();
  for (int index=0; index < prefCount; ++index) {
    final Preference pref=subtypePreferences.get(index);
    activeInputMethodsCategory.addPreference(pref);
    InputMethodAndSubtypeUtil.removeUnnecessaryNonPersistentPreference(pref);
  }
  mInputMethodAndSubtypePrefsMap.put(imiId,subtypePreferences);
  if (TextUtils.isEmpty(autoSubtypeLabel)) {
    autoSelectionPref.setTitle(R.string.use_system_language_to_select_input_method_subtypes);
  }
 else {
    autoSelectionPref.setTitle(autoSubtypeLabel);
  }
}
