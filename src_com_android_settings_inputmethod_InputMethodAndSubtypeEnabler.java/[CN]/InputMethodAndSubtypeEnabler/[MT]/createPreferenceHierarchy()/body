{
  final PreferenceScreen root=getPreferenceManager().createPreferenceScreen(getActivity());
  final Context context=getActivity();
  final Collator collator=Collator.getInstance();
  final int N=(mInputMethodInfoList == null ? 0 : mInputMethodInfoList.size());
  for (int i=0; i < N; ++i) {
    final InputMethodInfo imi=mInputMethodInfoList.get(i);
    final int subtypeCount=imi.getSubtypeCount();
    if (subtypeCount <= 1) {
      continue;
    }
    final String imiId=imi.getId();
    if (!TextUtils.isEmpty(mInputMethodId) && !mInputMethodId.equals(imiId)) {
      continue;
    }
    final PreferenceCategory keyboardSettingsCategory=new PreferenceCategory(context);
    root.addPreference(keyboardSettingsCategory);
    final PackageManager pm=getPackageManager();
    final CharSequence label=imi.loadLabel(pm);
    keyboardSettingsCategory.setTitle(label);
    keyboardSettingsCategory.setKey(imiId);
    final CheckBoxPreference autoCB=new CheckBoxPreference(context);
    mAutoSelectionPrefsMap.put(imiId,autoCB);
    keyboardSettingsCategory.addPreference(autoCB);
    final PreferenceCategory activeInputMethodsCategory=new PreferenceCategory(context);
    activeInputMethodsCategory.setTitle(R.string.active_input_method_subtypes);
    root.addPreference(activeInputMethodsCategory);
    boolean isAutoSubtype=false;
    CharSequence autoSubtypeLabel=null;
    final ArrayList<Preference> subtypePreferences=new ArrayList<>();
    if (subtypeCount > 0) {
      for (int j=0; j < subtypeCount; ++j) {
        final InputMethodSubtype subtype=imi.getSubtypeAt(j);
        if (subtype.overridesImplicitlyEnabledSubtype()) {
          if (!isAutoSubtype) {
            isAutoSubtype=true;
            autoSubtypeLabel=subtype.getDisplayName(context,imi.getPackageName(),imi.getServiceInfo().applicationInfo);
          }
        }
 else {
          final CheckBoxPreference chkbxPref=new InputMethodSubtypePreference(context,subtype,imi);
          subtypePreferences.add(chkbxPref);
        }
      }
      Collections.sort(subtypePreferences,new Comparator<Preference>(){
        @Override public int compare(        Preference lhs,        Preference rhs){
          if (lhs instanceof InputMethodSubtypePreference) {
            return ((InputMethodSubtypePreference)lhs).compareTo(rhs,collator);
          }
          return lhs.compareTo(rhs);
        }
      }
);
      for (int j=0; j < subtypePreferences.size(); ++j) {
        activeInputMethodsCategory.addPreference(subtypePreferences.get(j));
      }
      mInputMethodAndSubtypePrefsMap.put(imiId,subtypePreferences);
    }
    if (isAutoSubtype) {
      if (TextUtils.isEmpty(autoSubtypeLabel)) {
        Log.w(TAG,"Title for auto subtype is empty.");
        autoCB.setTitle("---");
      }
 else {
        autoCB.setTitle(autoSubtypeLabel);
      }
    }
 else {
      autoCB.setTitle(R.string.use_system_language_to_select_input_method_subtypes);
    }
  }
  return root;
}
