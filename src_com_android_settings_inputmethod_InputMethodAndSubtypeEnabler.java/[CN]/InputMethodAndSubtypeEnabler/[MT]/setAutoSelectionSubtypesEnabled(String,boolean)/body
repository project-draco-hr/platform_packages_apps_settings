{
  final TwoStatePreference autoSelectionPref=mAutoSelectionPrefsMap.get(imiId);
  if (autoSelectionPref == null) {
    return;
  }
  autoSelectionPref.setChecked(autoSelectionEnabled);
  final List<Preference> subtypePrefs=mInputMethodAndSubtypePrefsMap.get(imiId);
  for (  final Preference pref : subtypePrefs) {
    if (pref instanceof TwoStatePreference) {
      pref.setEnabled(!autoSelectionEnabled);
      if (autoSelectionEnabled) {
        ((TwoStatePreference)pref).setChecked(false);
      }
    }
  }
  if (autoSelectionEnabled) {
    InputMethodAndSubtypeUtil.saveInputMethodSubtypeList(this,getContentResolver(),mInputMethodInfoList,mHaveHardKeyboard);
    updateImplicitlyEnabledSubtypes(imiId,true);
  }
}
