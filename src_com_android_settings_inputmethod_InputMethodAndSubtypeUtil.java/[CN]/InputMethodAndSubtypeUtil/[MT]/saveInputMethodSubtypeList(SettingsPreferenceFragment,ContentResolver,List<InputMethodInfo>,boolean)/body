{
  String currentInputMethodId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
  final int selectedInputMethodSubtype=getInputMethodSubtypeSelected(resolver);
  final HashMap<String,HashSet<String>> enabledIMEsAndSubtypesMap=getEnabledInputMethodsAndSubtypeList(resolver);
  final HashSet<String> disabledSystemIMEs=getDisabledSystemIMEs(resolver);
  boolean needsToResetSelectedSubtype=false;
  for (  final InputMethodInfo imi : inputMethodInfos) {
    final String imiId=imi.getId();
    final Preference pref=context.findPreference(imiId);
    if (pref == null) {
      continue;
    }
    final boolean isImeChecked=(pref instanceof TwoStatePreference) ? ((TwoStatePreference)pref).isChecked() : enabledIMEsAndSubtypesMap.containsKey(imiId);
    final boolean isCurrentInputMethod=imiId.equals(currentInputMethodId);
    final boolean systemIme=InputMethodUtils.isSystemIme(imi);
    if ((!hasHardKeyboard && InputMethodSettingValuesWrapper.getInstance(context.getActivity()).isAlwaysCheckedIme(imi,context.getActivity())) || isImeChecked) {
      if (!enabledIMEsAndSubtypesMap.containsKey(imiId)) {
        enabledIMEsAndSubtypesMap.put(imiId,new HashSet<String>());
      }
      final HashSet<String> subtypesSet=enabledIMEsAndSubtypesMap.get(imiId);
      boolean subtypePrefFound=false;
      final int subtypeCount=imi.getSubtypeCount();
      for (int i=0; i < subtypeCount; ++i) {
        final InputMethodSubtype subtype=imi.getSubtypeAt(i);
        final String subtypeHashCodeStr=String.valueOf(subtype.hashCode());
        final TwoStatePreference subtypePref=(TwoStatePreference)context.findPreference(imiId + subtypeHashCodeStr);
        if (subtypePref == null) {
          continue;
        }
        if (!subtypePrefFound) {
          subtypesSet.clear();
          needsToResetSelectedSubtype=true;
          subtypePrefFound=true;
        }
        if (subtypePref.isEnabled() && subtypePref.isChecked()) {
          subtypesSet.add(subtypeHashCodeStr);
          if (isCurrentInputMethod) {
            if (selectedInputMethodSubtype == subtype.hashCode()) {
              needsToResetSelectedSubtype=false;
            }
          }
        }
 else {
          subtypesSet.remove(subtypeHashCodeStr);
        }
      }
    }
 else {
      enabledIMEsAndSubtypesMap.remove(imiId);
      if (isCurrentInputMethod) {
        if (DEBUG) {
          Log.d(TAG,"Current IME was uninstalled or disabled.");
        }
        currentInputMethodId=null;
      }
    }
    if (systemIme && hasHardKeyboard) {
      if (disabledSystemIMEs.contains(imiId)) {
        if (isImeChecked) {
          disabledSystemIMEs.remove(imiId);
        }
      }
 else {
        if (!isImeChecked) {
          disabledSystemIMEs.add(imiId);
        }
      }
    }
  }
  final String enabledIMEsAndSubtypesString=buildInputMethodsAndSubtypesString(enabledIMEsAndSubtypesMap);
  final String disabledSystemIMEsString=buildInputMethodsString(disabledSystemIMEs);
  if (DEBUG) {
    Log.d(TAG,"--- Save enabled inputmethod settings. :" + enabledIMEsAndSubtypesString);
    Log.d(TAG,"--- Save disabled system inputmethod settings. :" + disabledSystemIMEsString);
    Log.d(TAG,"--- Save default inputmethod settings. :" + currentInputMethodId);
    Log.d(TAG,"--- Needs to reset the selected subtype :" + needsToResetSelectedSubtype);
    Log.d(TAG,"--- Subtype is selected :" + isInputMethodSubtypeSelected(resolver));
  }
  if (needsToResetSelectedSubtype || !isInputMethodSubtypeSelected(resolver)) {
    if (DEBUG) {
      Log.d(TAG,"--- Reset inputmethod subtype because it's not defined.");
    }
    putSelectedInputMethodSubtype(resolver,NOT_A_SUBTYPE_ID);
  }
  Settings.Secure.putString(resolver,Settings.Secure.ENABLED_INPUT_METHODS,enabledIMEsAndSubtypesString);
  if (disabledSystemIMEsString.length() > 0) {
    Settings.Secure.putString(resolver,Settings.Secure.DISABLED_SYSTEM_INPUT_METHODS,disabledSystemIMEsString);
  }
  Settings.Secure.putString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD,currentInputMethodId != null ? currentInputMethodId : "");
}
