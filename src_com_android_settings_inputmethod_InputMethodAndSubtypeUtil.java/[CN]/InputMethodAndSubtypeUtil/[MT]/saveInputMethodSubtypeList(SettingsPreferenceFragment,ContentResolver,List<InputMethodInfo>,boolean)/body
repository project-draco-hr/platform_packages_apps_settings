{
  String currentInputMethodId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
  final int selectedInputMethodSubtype=getInputMethodSubtypeSelected(resolver);
  HashMap<String,HashSet<String>> enabledIMEAndSubtypesMap=getEnabledInputMethodsAndSubtypeList(resolver);
  HashSet<String> disabledSystemIMEs=getDisabledSystemIMEs(resolver);
  final boolean onlyOneIME=inputMethodInfos.size() == 1;
  boolean existsSelectedSubtype=false;
  for (  InputMethodInfo imi : inputMethodInfos) {
    final String imiId=imi.getId();
    Preference pref=context.findPreference(imiId);
    if (pref == null)     continue;
    final boolean isImeChecked=(pref instanceof CheckBoxPreference) ? ((CheckBoxPreference)pref).isChecked() : enabledIMEAndSubtypesMap.containsKey(imiId);
    boolean isCurrentInputMethod=imiId.equals(currentInputMethodId);
    boolean systemIme=isSystemIme(imi);
    if (((onlyOneIME || systemIme) && !hasHardKeyboard) || isImeChecked) {
      if (!enabledIMEAndSubtypesMap.containsKey(imiId)) {
        enabledIMEAndSubtypesMap.put(imiId,new HashSet<String>());
      }
      HashSet<String> subtypesSet=enabledIMEAndSubtypesMap.get(imiId);
      boolean subtypeCleared=false;
      final int subtypeCount=imi.getSubtypeCount();
      for (int i=0; i < subtypeCount; ++i) {
        InputMethodSubtype subtype=imi.getSubtypeAt(i);
        final String subtypeHashCodeStr=String.valueOf(subtype.hashCode());
        CheckBoxPreference subtypePref=(CheckBoxPreference)context.findPreference(imiId + subtypeHashCodeStr);
        if (subtypePref == null)         continue;
        if (!subtypeCleared) {
          subtypesSet.clear();
          subtypeCleared=true;
        }
        if (subtypePref.isChecked()) {
          subtypesSet.add(subtypeHashCodeStr);
          if (isCurrentInputMethod) {
            if (selectedInputMethodSubtype == subtype.hashCode()) {
              existsSelectedSubtype=true;
            }
          }
        }
 else {
          subtypesSet.remove(subtypeHashCodeStr);
        }
      }
    }
 else {
      enabledIMEAndSubtypesMap.remove(imiId);
      if (isCurrentInputMethod) {
        if (DEBUG) {
          Log.d(TAG,"Current IME was uninstalled or disabled.");
        }
        currentInputMethodId=null;
      }
    }
    if (systemIme && hasHardKeyboard) {
      if (disabledSystemIMEs.contains(imiId)) {
        if (isImeChecked) {
          disabledSystemIMEs.remove(imiId);
        }
      }
 else {
        if (!isImeChecked) {
          disabledSystemIMEs.add(imiId);
        }
      }
    }
  }
  StringBuilder builder=new StringBuilder();
  buildInputMethodsAndSubtypesString(builder,enabledIMEAndSubtypesMap);
  StringBuilder disabledSysImesBuilder=new StringBuilder();
  buildDisabledSystemInputMethods(disabledSysImesBuilder,disabledSystemIMEs);
  if (DEBUG) {
    Log.d(TAG,"--- Save enabled inputmethod settings. :" + builder.toString());
    Log.d(TAG,"--- Save disable system inputmethod settings. :" + disabledSysImesBuilder.toString());
    Log.d(TAG,"--- Save default inputmethod settings. :" + currentInputMethodId);
  }
  if (!existsSelectedSubtype || !isInputMethodSubtypeSelected(resolver)) {
    if (DEBUG) {
      Log.d(TAG,"--- Reset inputmethod subtype because it's not defined.");
    }
    putSelectedInputMethodSubtype(resolver,NOT_A_SUBTYPE_ID);
  }
  Settings.Secure.putString(resolver,Settings.Secure.ENABLED_INPUT_METHODS,builder.toString());
  if (disabledSysImesBuilder.length() > 0) {
    Settings.Secure.putString(resolver,Settings.Secure.DISABLED_SYSTEM_INPUT_METHODS,disabledSysImesBuilder.toString());
  }
  Settings.Secure.putString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD,currentInputMethodId != null ? currentInputMethodId : "");
}
