{
  String currentInputMethodId=Settings.Secure.getString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD);
  StringBuilder builder=new StringBuilder();
  StringBuilder disabledSysImes=new StringBuilder();
  InputMethodInfo firstEnabledIMI=null;
  int firstSubtypeHashCode=NOT_A_SUBTYPE_ID;
  final boolean onlyOneIME=inputMethodProperties.size() == 1;
  for (  InputMethodInfo property : inputMethodProperties) {
    final String id=property.getId();
    CheckBoxPreference pref=(CheckBoxPreference)context.findPreference(id);
    boolean isCurrentInputMethod=id.equals(currentInputMethodId);
    boolean systemIme=isSystemIme(property);
    if (((onlyOneIME || systemIme) && !hasHardKeyboard) || (pref != null && pref.isChecked())) {
      if (builder.length() > 0)       builder.append(INPUT_METHOD_SEPARATER);
      builder.append(id);
      if (firstEnabledIMI == null) {
        firstEnabledIMI=property;
      }
      for (      InputMethodSubtype subtype : property.getSubtypes()) {
        CheckBoxPreference subtypePref=(CheckBoxPreference)context.findPreference(id + subtype.hashCode());
        if (subtypePref != null && subtypePref.isChecked()) {
          builder.append(INPUT_METHOD_SUBTYPE_SEPARATER).append(subtype.hashCode());
          if (firstSubtypeHashCode == NOT_A_SUBTYPE_ID) {
            firstSubtypeHashCode=subtype.hashCode();
          }
        }
      }
    }
 else     if (isCurrentInputMethod) {
      currentInputMethodId=lastTickedInputMethodId;
    }
    if (pref != null && !pref.isChecked() && systemIme && hasHardKeyboard) {
      if (disabledSysImes.length() > 0)       disabledSysImes.append(INPUT_METHOD_SEPARATER);
      disabledSysImes.append(id);
    }
  }
  if (TextUtils.isEmpty(currentInputMethodId)) {
    if (firstEnabledIMI != null) {
      currentInputMethodId=firstEnabledIMI.getId();
    }
 else {
      currentInputMethodId=null;
    }
  }
  if (DEBUG) {
    Log.d(TAG,"--- Save enabled inputmethod settings. :" + builder.toString());
    Log.d(TAG,"--- Save disable system inputmethod settings. :" + disabledSysImes.toString());
    Log.d(TAG,"--- Save default inputmethod settings. :" + currentInputMethodId);
  }
  if (firstSubtypeHashCode == NOT_A_SUBTYPE_ID || !isInputMethodSubtypeSelected(resolver)) {
    if (DEBUG) {
      Log.d(TAG,"--- Set inputmethod subtype because it's not defined." + firstSubtypeHashCode);
    }
    putSelectedInputMethodSubtype(resolver,firstSubtypeHashCode);
  }
  Settings.Secure.putString(resolver,Settings.Secure.ENABLED_INPUT_METHODS,builder.toString());
  Settings.Secure.putString(resolver,Settings.Secure.DISABLED_SYSTEM_INPUT_METHODS,disabledSysImes.toString());
  Settings.Secure.putString(resolver,Settings.Secure.DEFAULT_INPUT_METHOD,currentInputMethodId != null ? currentInputMethodId : "");
}
