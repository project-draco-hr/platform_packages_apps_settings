{
  mCurrentSci=mTsm.getCurrentSpellChecker();
  final boolean isSpellCheckerEnabled=mTsm.isSpellCheckerEnabled();
  mSwitchBar.setChecked(isSpellCheckerEnabled);
  final SpellCheckerSubtype currentScs;
  if (mCurrentSci == null) {
    currentScs=mTsm.getCurrentSpellCheckerSubtype(false);
  }
 else {
    currentScs=null;
  }
  mSpellCheckerLanaguagePref.setSummary(getSpellCheckerSubtypeLabel(mCurrentSci,currentScs));
  final PreferenceScreen screen=getPreferenceScreen();
  final int count=screen.getPreferenceCount();
  for (int index=0; index < count; index++) {
    final Preference preference=screen.getPreference(index);
    preference.setEnabled(isSpellCheckerEnabled);
    if (preference instanceof SpellCheckerPreference) {
      final SpellCheckerPreference pref=(SpellCheckerPreference)preference;
      pref.setSelected(mCurrentSci);
    }
  }
  mSpellCheckerLanaguagePref.setEnabled(isSpellCheckerEnabled && mCurrentSci != null);
}
