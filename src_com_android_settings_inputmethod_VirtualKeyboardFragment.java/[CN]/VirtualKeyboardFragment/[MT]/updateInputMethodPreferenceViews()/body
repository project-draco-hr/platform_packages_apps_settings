{
  mInputMethodPreferenceList.clear();
  List<String> permittedList=mDpm.getPermittedInputMethodsForCurrentUser();
  final Context context=getPrefContext();
  final List<InputMethodInfo> imis=mImm.getEnabledInputMethodList();
  final int N=(imis == null ? 0 : imis.size());
  for (int i=0; i < N; ++i) {
    final InputMethodInfo imi=imis.get(i);
    final boolean isAllowedByOrganization=permittedList == null || permittedList.contains(imi.getPackageName());
    Drawable icon;
    try {
      icon=getActivity().getPackageManager().getApplicationIcon(imi.getPackageName());
    }
 catch (    Exception e) {
      icon=NO_ICON;
    }
    final InputMethodPreference pref=new InputMethodPreference(context,imi,false,isAllowedByOrganization,null);
    pref.setIcon(icon);
    mInputMethodPreferenceList.add(pref);
  }
  final Collator collator=Collator.getInstance();
  Collections.sort(mInputMethodPreferenceList,new Comparator<InputMethodPreference>(){
    @Override public int compare(    InputMethodPreference lhs,    InputMethodPreference rhs){
      return lhs.compareTo(rhs,collator);
    }
  }
);
  getPreferenceScreen().removeAll();
  for (int i=0; i < N; ++i) {
    final InputMethodPreference pref=mInputMethodPreferenceList.get(i);
    pref.setOrder(i);
    getPreferenceScreen().addPreference(pref);
    InputMethodAndSubtypeUtil.removeUnnecessaryNonPersistentPreference(pref);
    pref.updatePreferenceViews();
  }
  mAddVirtualKeyboardScreen.setIcon(R.drawable.ic_add);
  mAddVirtualKeyboardScreen.setOrder(N);
  getPreferenceScreen().addPreference(mAddVirtualKeyboardScreen);
}
