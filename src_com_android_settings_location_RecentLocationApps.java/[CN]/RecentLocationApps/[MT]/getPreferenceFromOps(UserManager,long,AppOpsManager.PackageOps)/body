{
  String packageName=ops.getPackageName();
  List<AppOpsManager.OpEntry> entries=ops.getOps();
  boolean highBattery=false;
  boolean normalBattery=false;
  long recentLocationCutoffTime=now - RECENT_TIME_INTERVAL_MILLIS;
  for (  AppOpsManager.OpEntry entry : entries) {
    if (entry.isRunning() || entry.getTime() >= recentLocationCutoffTime) {
switch (entry.getOp()) {
case AppOpsManager.OP_MONITOR_LOCATION:
        normalBattery=true;
      break;
case AppOpsManager.OP_MONITOR_HIGH_POWER_LOCATION:
    highBattery=true;
  break;
default :
break;
}
}
}
if (!highBattery && !normalBattery) {
if (Log.isLoggable(TAG,Log.VERBOSE)) {
Log.v(TAG,packageName + " hadn't used location within the time interval.");
}
return null;
}
int uid=ops.getUid();
int userId=UserHandle.getUserId(uid);
Preference preference=null;
try {
IPackageManager ipm=AppGlobals.getPackageManager();
ApplicationInfo appInfo=ipm.getApplicationInfo(packageName,PackageManager.GET_META_DATA,userId);
Drawable icon=um.getBadgedDrawableForUser(mPackageManager.getApplicationIcon(appInfo),new UserHandle(userId));
preference=createRecentLocationEntry(icon,mPackageManager.getApplicationLabel(appInfo),highBattery,new PackageEntryClickedListener(packageName));
}
 catch (RemoteException e) {
Log.w(TAG,"Error while retrieving application info",e);
}
return preference;
}
