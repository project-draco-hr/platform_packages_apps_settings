{
  final boolean beforeSplit=isMobilePolicySplit(subscriberId);
  final NetworkTemplate template3g=buildTemplateMobile3gLower(subscriberId);
  final NetworkTemplate template4g=buildTemplateMobile4g(subscriberId);
  final NetworkTemplate templateAll=buildTemplateMobileAll(subscriberId);
  if (split == beforeSplit) {
    return false;
  }
 else   if (beforeSplit && !split) {
    final NetworkPolicy policy3g=getPolicy(template3g);
    final NetworkPolicy policy4g=getPolicy(template4g);
    NetworkPolicy restrictive=null;
    if ((policy3g == null) && (policy4g == null)) {
      return false;
    }
 else     if (policy3g == null) {
      restrictive=policy4g;
    }
 else     if (policy4g == null) {
      restrictive=policy3g;
    }
 else {
      restrictive=policy3g.compareTo(policy4g) < 0 ? policy3g : policy4g;
    }
    mPolicies.remove(policy3g);
    mPolicies.remove(policy4g);
    mPolicies.add(new NetworkPolicy(templateAll,restrictive.cycleDay,restrictive.cycleTimezone,restrictive.warningBytes,restrictive.limitBytes,SNOOZE_NEVER,SNOOZE_NEVER,restrictive.metered,restrictive.inferred));
    return true;
  }
 else   if (!beforeSplit && split) {
    final NetworkPolicy policyAll=getPolicy(templateAll);
    if (policyAll == null) {
      return false;
    }
    mPolicies.remove(policyAll);
    mPolicies.add(new NetworkPolicy(template3g,policyAll.cycleDay,policyAll.cycleTimezone,policyAll.warningBytes,policyAll.limitBytes,SNOOZE_NEVER,SNOOZE_NEVER,policyAll.metered,policyAll.inferred));
    mPolicies.add(new NetworkPolicy(template4g,policyAll.cycleDay,policyAll.cycleTimezone,policyAll.warningBytes,policyAll.limitBytes,SNOOZE_NEVER,SNOOZE_NEVER,policyAll.metered,policyAll.inferred));
    return true;
  }
 else {
    return false;
  }
}
