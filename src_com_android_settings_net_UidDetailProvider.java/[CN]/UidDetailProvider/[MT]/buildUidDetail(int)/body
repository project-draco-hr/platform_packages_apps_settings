{
  final Resources res=mContext.getResources();
  final PackageManager pm=mContext.getPackageManager();
  final UidDetail detail=new UidDetail();
  detail.label=pm.getNameForUid(uid);
  detail.icon=pm.getDefaultActivityIcon();
switch (uid) {
case android.os.Process.SYSTEM_UID:
    detail.label=res.getString(R.string.process_kernel_label);
  detail.icon=pm.getDefaultActivityIcon();
return detail;
case TrafficStats.UID_REMOVED:
detail.label=res.getString(UserManager.supportsMultipleUsers() ? R.string.data_usage_uninstalled_apps_users : R.string.data_usage_uninstalled_apps);
detail.icon=pm.getDefaultActivityIcon();
return detail;
case TrafficStats.UID_TETHERING:
final ConnectivityManager cm=(ConnectivityManager)mContext.getSystemService(Context.CONNECTIVITY_SERVICE);
detail.label=res.getString(Utils.getTetheringLabel(cm));
detail.icon=pm.getDefaultActivityIcon();
return detail;
}
final UserManager um=(UserManager)mContext.getSystemService(Context.USER_SERVICE);
if (isKeyForUser(uid)) {
final int userHandle=getUserIdForKey(uid);
final UserInfo info=um.getUserInfo(userHandle);
if (info != null) {
detail.label=Utils.getUserLabel(mContext,info);
detail.icon=Utils.getUserIcon(mContext,um,info);
return detail;
}
}
final String[] packageNames=pm.getPackagesForUid(uid);
final int length=packageNames != null ? packageNames.length : 0;
try {
final int userId=UserHandle.getUserId(uid);
UserHandle userHandle=new UserHandle(userId);
IPackageManager ipm=AppGlobals.getPackageManager();
if (length == 1) {
final ApplicationInfo info=ipm.getApplicationInfo(packageNames[0],0,userId);
if (info != null) {
detail.label=info.loadLabel(pm).toString();
detail.icon=um.getBadgedIconForUser(info.loadIcon(pm),new UserHandle(userId));
}
}
 else if (length > 1) {
detail.detailLabels=new CharSequence[length];
detail.detailContentDescriptions=new CharSequence[length];
for (int i=0; i < length; i++) {
final String packageName=packageNames[i];
final PackageInfo packageInfo=pm.getPackageInfo(packageName,0);
final ApplicationInfo appInfo=ipm.getApplicationInfo(packageName,0,userId);
if (appInfo != null) {
detail.detailLabels[i]=appInfo.loadLabel(pm).toString();
detail.detailContentDescriptions[i]=um.getBadgedLabelForUser(detail.detailLabels[i],userHandle);
if (packageInfo.sharedUserLabel != 0) {
detail.label=pm.getText(packageName,packageInfo.sharedUserLabel,packageInfo.applicationInfo).toString();
detail.icon=um.getBadgedIconForUser(appInfo.loadIcon(pm),userHandle);
}
}
}
}
detail.contentDescription=um.getBadgedLabelForUser(detail.label,userHandle);
}
 catch (NameNotFoundException e) {
Log.w(TAG,"Error while building UI detail for uid " + uid,e);
}
catch (RemoteException e) {
Log.w(TAG,"Error while building UI detail for uid " + uid,e);
}
if (TextUtils.isEmpty(detail.label)) {
detail.label=Integer.toString(uid);
}
return detail;
}
