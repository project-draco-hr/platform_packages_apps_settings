{
  if (mShowSlider) {
    setVisible(mBlock,false);
    setVisible(mSilent,false);
    mImportance.setDisabledByAdmin(mSuspendedAppsAdmin);
    mImportanceTitle.setDisabledByAdmin(mSuspendedAppsAdmin);
    if (importance == Ranking.IMPORTANCE_UNSPECIFIED) {
      mImportance.setVisible(false);
      mImportanceReset.setVisible(false);
      mImportanceTitle.setOnPreferenceClickListener(showEditableImportance);
    }
 else {
      mImportanceTitle.setOnPreferenceClickListener(null);
    }
    mImportanceTitle.setSummary(getProgressSummary(importance));
    mImportance.setSystemApp(isSystemApp);
    mImportance.setMinimumProgress(isSystemApp ? Ranking.IMPORTANCE_MIN : Ranking.IMPORTANCE_NONE);
    mImportance.setMax(Ranking.IMPORTANCE_MAX);
    mImportance.setProgress(importance);
    mImportance.setCallback(new ImportanceSeekBarPreference.Callback(){
      @Override public void onImportanceChanged(      int progress){
        mBackend.setImportance(mPkg,mUid,progress);
        mImportanceTitle.setSummary(getProgressSummary(progress));
        updateDependents(progress);
      }
    }
);
    Button button=(Button)mImportanceReset.findViewById(R.id.left_button);
    button.setText(R.string.importance_reset);
    button.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        if (mSuspendedAppsAdmin != null) {
          RestrictedLockUtils.sendShowAdminSupportDetailsIntent(getActivity(),mSuspendedAppsAdmin);
          return;
        }
        mBackend.setImportance(mPkg,mUid,Ranking.IMPORTANCE_UNSPECIFIED);
        mImportanceReset.setVisible(false);
        mImportance.setVisible(false);
        mImportanceTitle.setOnPreferenceClickListener(showEditableImportance);
        mImportanceTitle.setSummary(getProgressSummary(Ranking.IMPORTANCE_UNSPECIFIED));
        updateDependents(Ranking.IMPORTANCE_UNSPECIFIED);
      }
    }
);
    mImportanceReset.findViewById(R.id.right_button).setVisibility(View.INVISIBLE);
  }
 else {
    setVisible(mImportance,false);
    setVisible(mImportanceReset,false);
    setVisible(mImportanceTitle,false);
    boolean blocked=importance == Ranking.IMPORTANCE_NONE || banned;
    mBlock.setChecked(blocked);
    mBlock.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      Preference preference,      Object newValue){
        final boolean blocked=(Boolean)newValue;
        final int importance=blocked ? Ranking.IMPORTANCE_NONE : Ranking.IMPORTANCE_UNSPECIFIED;
        mBackend.setImportance(mPkgInfo.packageName,mUid,importance);
        updateDependents(importance);
        return true;
      }
    }
);
    mSilent.setOnPreferenceChangeListener(new Preference.OnPreferenceChangeListener(){
      @Override public boolean onPreferenceChange(      Preference preference,      Object newValue){
        final boolean silenced=(Boolean)newValue;
        final int importance=silenced ? Ranking.IMPORTANCE_LOW : Ranking.IMPORTANCE_UNSPECIFIED;
        mBackend.setImportance(mPkgInfo.packageName,mUid,importance);
        updateDependents(importance);
        return true;
      }
    }
);
    updateDependents(banned ? Ranking.IMPORTANCE_NONE : importance);
  }
}
