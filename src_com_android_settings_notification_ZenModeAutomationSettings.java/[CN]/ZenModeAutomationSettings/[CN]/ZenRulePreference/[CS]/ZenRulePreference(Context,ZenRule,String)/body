{
  super(context);
  mName=rule.name;
  this.mId=id;
  final boolean isSchedule=ZenModeConfig.isValidScheduleConditionId(rule.conditionId);
  final boolean isEvent=ZenModeConfig.isValidEventConditionId(rule.conditionId);
  final boolean isSystemRule=isSchedule || isEvent;
  try {
    ApplicationInfo info=mPm.getApplicationInfo(rule.component.getPackageName(),0);
    LoadIconTask task=new LoadIconTask(this);
    task.execute(info);
    setSummary(computeRuleSummary(rule,isSystemRule,info.loadLabel(mPm)));
  }
 catch (  PackageManager.NameNotFoundException e) {
    setIcon(R.drawable.ic_label);
  }
  setTitle(rule.name);
  setPersistent(false);
  setOnPreferenceClickListener(new OnPreferenceClickListener(){
    @Override public boolean onPreferenceClick(    Preference preference){
      final String action=isSchedule ? ZenModeScheduleRuleSettings.ACTION : isEvent ? ZenModeEventRuleSettings.ACTION : ZenModeExternalRuleSettings.ACTION;
      showRule(action,null,id,rule.name);
      return true;
    }
  }
);
  setWidgetLayoutResource(R.layout.zen_rule_widget);
}
