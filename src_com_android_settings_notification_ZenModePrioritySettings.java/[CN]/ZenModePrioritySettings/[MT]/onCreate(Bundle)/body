{
  super.onCreate(savedInstanceState);
  addPreferencesFromResource(R.xml.zen_mode_priority_settings);
  final PreferenceScreen root=getPreferenceScreen();
  mReminders=(SwitchPreference)root.findPreference(KEY_REMINDERS);
  mReminders.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (mDisableListeners)       return true;
      final boolean val=(Boolean)newValue;
      if (val == mConfig.allowReminders)       return true;
      if (DEBUG)       Log.d(TAG,"onPrefChange allowReminders=" + val);
      final ZenModeConfig newConfig=mConfig.copy();
      newConfig.allowReminders=val;
      return setZenModeConfig(newConfig);
    }
  }
);
  mEvents=(SwitchPreference)root.findPreference(KEY_EVENTS);
  mEvents.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (mDisableListeners)       return true;
      final boolean val=(Boolean)newValue;
      if (val == mConfig.allowEvents)       return true;
      if (DEBUG)       Log.d(TAG,"onPrefChange allowEvents=" + val);
      final ZenModeConfig newConfig=mConfig.copy();
      newConfig.allowEvents=val;
      return setZenModeConfig(newConfig);
    }
  }
);
  mMessages=(DropDownPreference)root.findPreference(KEY_MESSAGES);
  addSources(mMessages);
  mMessages.setCallback(new DropDownPreference.Callback(){
    @Override public boolean onItemSelected(    int pos,    Object newValue){
      if (mDisableListeners)       return true;
      final int val=(Integer)newValue;
      final boolean allowMessages=val != SOURCE_NONE;
      final int allowMessagesFrom=val == SOURCE_NONE ? mConfig.allowMessagesFrom : val;
      if (allowMessages == mConfig.allowMessages && allowMessagesFrom == mConfig.allowMessagesFrom) {
        return true;
      }
      if (DEBUG)       Log.d(TAG,"onPrefChange allowMessages=" + allowMessages + " allowMessagesFrom="+ ZenModeConfig.sourceToString(allowMessagesFrom));
      final ZenModeConfig newConfig=mConfig.copy();
      newConfig.allowMessages=allowMessages;
      newConfig.allowMessagesFrom=allowMessagesFrom;
      return setZenModeConfig(newConfig);
    }
  }
);
  mCalls=(DropDownPreference)root.findPreference(KEY_CALLS);
  addSources(mCalls);
  mCalls.setCallback(new DropDownPreference.Callback(){
    @Override public boolean onItemSelected(    int pos,    Object newValue){
      if (mDisableListeners)       return true;
      final int val=(Integer)newValue;
      final boolean allowCalls=val != SOURCE_NONE;
      final int allowCallsFrom=val == SOURCE_NONE ? mConfig.allowCallsFrom : val;
      if (allowCalls == mConfig.allowCalls && allowCallsFrom == mConfig.allowCallsFrom) {
        return true;
      }
      if (DEBUG)       Log.d(TAG,"onPrefChange allowCalls=" + allowCalls + " allowCallsFrom="+ ZenModeConfig.sourceToString(allowCallsFrom));
      final ZenModeConfig newConfig=mConfig.copy();
      newConfig.allowCalls=allowCalls;
      newConfig.allowCallsFrom=allowCallsFrom;
      return setZenModeConfig(newConfig);
    }
  }
);
  mRepeatCallers=(SwitchPreference)root.findPreference(KEY_REPEAT_CALLERS);
  mRepeatCallers.setSummary(mContext.getString(R.string.zen_mode_repeat_callers_summary,mContext.getResources().getInteger(com.android.internal.R.integer.config_zen_repeat_callers_threshold)));
  mRepeatCallers.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object newValue){
      if (mDisableListeners)       return true;
      final boolean val=(Boolean)newValue;
      if (val == mConfig.allowRepeatCallers)       return true;
      if (DEBUG)       Log.d(TAG,"onPrefChange allowRepeatCallers=" + val);
      final ZenModeConfig newConfig=mConfig.copy();
      newConfig.allowRepeatCallers=val;
      return setZenModeConfig(newConfig);
    }
  }
);
  updateControls();
}
