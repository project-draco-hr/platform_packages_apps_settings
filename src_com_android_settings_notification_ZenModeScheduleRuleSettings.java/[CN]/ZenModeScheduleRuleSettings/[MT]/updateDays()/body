{
  final int[] days=mSchedule.days;
  if (days != null && days.length > 0) {
    final StringBuilder sb=new StringBuilder();
    final Calendar c=Calendar.getInstance();
    for (int i=0; i < DAYS.length; i++) {
      final int day=DAYS[i];
      for (int j=0; j < days.length; j++) {
        if (day == days[j]) {
          c.set(Calendar.DAY_OF_WEEK,day);
          if (sb.length() > 0) {
            sb.append(mContext.getString(R.string.summary_divider_text));
          }
          sb.append(DAY_FORMAT.format(c.getTime()));
          break;
        }
      }
    }
    if (sb.length() > 0) {
      mDays.setSummary(sb);
      mDays.notifyDependencyChange(false);
      return;
    }
  }
  mDays.setSummary(R.string.zen_mode_schedule_rule_days_none);
  mDays.notifyDependencyChange(true);
}
