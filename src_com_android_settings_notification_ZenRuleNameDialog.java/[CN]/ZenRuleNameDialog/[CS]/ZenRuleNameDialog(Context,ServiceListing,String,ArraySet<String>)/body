{
  mServiceListing=serviceListing;
  mIsNew=ruleName == null;
  mOriginalRuleName=ruleName;
  final View v=LayoutInflater.from(context).inflate(R.layout.zen_rule_name,null,false);
  mEditText=(EditText)v.findViewById(R.id.rule_name);
  if (!mIsNew) {
    mEditText.setText(ruleName);
  }
  mEditText.setSelectAllOnFocus(true);
  mTypes=(RadioGroup)v.findViewById(R.id.rule_types);
  if (mServiceListing != null) {
    bindType(R.id.rule_type_schedule,defaultNewSchedule());
    bindType(R.id.rule_type_event,defaultNewEvent());
    bindExternalRules();
    mServiceListing.addCallback(mServiceListingCallback);
    mServiceListing.reload();
  }
 else {
    mTypes.setVisibility(View.GONE);
  }
  mDialog=new AlertDialog.Builder(context).setTitle(mIsNew ? R.string.zen_mode_add_rule : R.string.zen_mode_rule_name).setView(v).setPositiveButton(R.string.okay,new DialogInterface.OnClickListener(){
    @Override public void onClick(    DialogInterface dialog,    int which){
      final String newName=trimmedText();
      if (!mIsNew && mOriginalRuleName != null && mOriginalRuleName.equalsIgnoreCase(newName)) {
        return;
      }
      onOk(newName,selectedRuleInfo());
    }
  }
).setOnDismissListener(new OnDismissListener(){
    @Override public void onDismiss(    DialogInterface dialog){
      if (mServiceListing != null) {
        mServiceListing.removeCallback(mServiceListingCallback);
      }
    }
  }
).setNegativeButton(R.string.cancel,null).create();
  mEditText.addTextChangedListener(new TextWatcher(){
    @Override public void onTextChanged(    CharSequence s,    int start,    int before,    int count){
    }
    @Override public void beforeTextChanged(    CharSequence s,    int start,    int count,    int after){
    }
    @Override public void afterTextChanged(    Editable s){
      updatePositiveButton();
    }
  }
);
  mExistingNames=new ArraySet<String>(existingNames.size());
  for (  String existingName : existingNames) {
    mExistingNames.add(existingName.toLowerCase());
  }
}
