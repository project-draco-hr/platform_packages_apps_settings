{
  PrintJob printJob=getPrintJob();
  if (printJob == null) {
    finish();
    return;
  }
  if (printJob.isCancelled() || printJob.isCompleted()) {
    finish();
    return;
  }
  PrintJobInfo info=printJob.getInfo();
switch (info.getState()) {
case PrintJobInfo.STATE_QUEUED:
case PrintJobInfo.STATE_STARTED:
{
      if (!printJob.getInfo().isCancelling()) {
        mPrintJobPreference.setTitle(getString(R.string.print_printing_state_title_template,info.getLabel()));
      }
 else {
        mPrintJobPreference.setTitle(getString(R.string.print_cancelling_state_title_template,info.getLabel()));
      }
    }
  break;
case PrintJobInfo.STATE_FAILED:
{
  mPrintJobPreference.setTitle(getString(R.string.print_failed_state_title_template,info.getLabel()));
}
break;
case PrintJobInfo.STATE_BLOCKED:
{
if (!printJob.getInfo().isCancelling()) {
mPrintJobPreference.setTitle(getString(R.string.print_blocked_state_title_template,info.getLabel()));
}
 else {
mPrintJobPreference.setTitle(getString(R.string.print_cancelling_state_title_template,info.getLabel()));
}
}
break;
}
mPrintJobPreference.setSummary(getString(R.string.print_job_summary,info.getPrinterName(),DateUtils.formatSameDayTime(info.getCreationTime(),info.getCreationTime(),DateFormat.SHORT,DateFormat.SHORT)));
switch (info.getState()) {
case PrintJobInfo.STATE_QUEUED:
case PrintJobInfo.STATE_STARTED:
{
mPrintJobPreference.setIcon(R.drawable.ic_print);
}
break;
case PrintJobInfo.STATE_FAILED:
case PrintJobInfo.STATE_BLOCKED:
{
mPrintJobPreference.setIcon(R.drawable.ic_print_error);
}
break;
}
CharSequence status=info.getStatus();
if (!TextUtils.isEmpty(status)) {
if (getPreferenceScreen().findPreference(PRINT_JOB_MESSAGE_PREFERENCE) == null) {
getPreferenceScreen().addPreference(mMessagePreference);
}
mMessagePreference.setSummary(status);
}
 else {
getPreferenceScreen().removePreference(mMessagePreference);
}
getActivity().invalidateOptionsMenu();
}
