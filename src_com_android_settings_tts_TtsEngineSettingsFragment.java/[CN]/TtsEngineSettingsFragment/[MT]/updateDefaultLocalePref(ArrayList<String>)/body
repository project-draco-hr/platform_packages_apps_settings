{
  if (availableLangs == null || availableLangs.size() == 0) {
    mLocalePreference.setEnabled(false);
    return;
  }
  String currentLocale="";
  if (!mEnginesHelper.isLocaleSetToDefaultForEngine(getEngineName())) {
    currentLocale=mEnginesHelper.getLocalePrefForEngine(getEngineName());
  }
  ArrayList<Pair<String,String>> entryPairs=new ArrayList<Pair<String,String>>(availableLangs.size());
  for (int i=0; i < availableLangs.size(); i++) {
    String[] langCountryVariant=availableLangs.get(i).split("-");
    Locale loc=null;
    if (langCountryVariant.length == 1) {
      loc=new Locale(langCountryVariant[0]);
    }
 else     if (langCountryVariant.length == 2) {
      loc=new Locale(langCountryVariant[0],langCountryVariant[1]);
    }
 else     if (langCountryVariant.length == 3) {
      loc=new Locale(langCountryVariant[0],langCountryVariant[1],langCountryVariant[2]);
    }
    if (loc != null) {
      entryPairs.add(new Pair<String,String>(loc.getDisplayName(),availableLangs.get(i)));
    }
  }
  Collections.sort(entryPairs,new Comparator<Pair<String,String>>(){
    @Override public int compare(    Pair<String,String> lhs,    Pair<String,String> rhs){
      return lhs.first.compareToIgnoreCase(rhs.first);
    }
  }
);
  mSelectedLocaleIndex=0;
  CharSequence[] entries=new CharSequence[availableLangs.size() + 1];
  CharSequence[] entryValues=new CharSequence[availableLangs.size() + 1];
  entries[0]=getActivity().getString(R.string.tts_lang_use_system);
  entryValues[0]="";
  int i=1;
  for (  Pair<String,String> entry : entryPairs) {
    if (entry.second.equalsIgnoreCase(currentLocale)) {
      mSelectedLocaleIndex=i;
    }
    entries[i]=entry.first;
    entryValues[i++]=entry.second;
  }
  mLocalePreference.setEntries(entries);
  mLocalePreference.setEntryValues(entryValues);
  mLocalePreference.setEnabled(true);
  setLocalePreference(mSelectedLocaleIndex);
}
