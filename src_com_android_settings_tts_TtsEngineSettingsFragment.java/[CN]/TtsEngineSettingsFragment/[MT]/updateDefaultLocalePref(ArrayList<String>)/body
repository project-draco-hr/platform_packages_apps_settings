{
  if (availableLangs == null || availableLangs.size() == 0) {
    mLocalePreference.setEnabled(false);
    return;
  }
  Locale currentLocale=null;
  if (!mEnginesHelper.isLocaleSetToDefaultForEngine(getEngineName())) {
    currentLocale=mEnginesHelper.getLocalePrefForEngine(getEngineName());
  }
  ArrayList<Pair<String,Locale>> entryPairs=new ArrayList<Pair<String,Locale>>(availableLangs.size());
  for (int i=0; i < availableLangs.size(); i++) {
    Locale locale=mEnginesHelper.parseLocaleString(availableLangs.get(i));
    if (locale != null) {
      entryPairs.add(new Pair<String,Locale>(locale.getDisplayName(),locale));
    }
  }
  Collections.sort(entryPairs,new Comparator<Pair<String,Locale>>(){
    @Override public int compare(    Pair<String,Locale> lhs,    Pair<String,Locale> rhs){
      return lhs.first.compareToIgnoreCase(rhs.first);
    }
  }
);
  mSelectedLocaleIndex=0;
  CharSequence[] entries=new CharSequence[availableLangs.size() + 1];
  CharSequence[] entryValues=new CharSequence[availableLangs.size() + 1];
  entries[0]=getActivity().getString(R.string.tts_lang_use_system);
  entryValues[0]="";
  int i=1;
  for (  Pair<String,Locale> entry : entryPairs) {
    if (entry.second.equals(currentLocale)) {
      mSelectedLocaleIndex=i;
    }
    entries[i]=entry.first;
    entryValues[i++]=entry.second.toString();
  }
  mLocalePreference.setEntries(entries);
  mLocalePreference.setEntryValues(entryValues);
  mLocalePreference.setEnabled(true);
  setLocalePreference(mSelectedLocaleIndex);
}
