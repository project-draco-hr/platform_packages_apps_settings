{
  mAppList.setOrderingAsAdded(false);
  mVisibleApps=new ArrayList<SelectableAppInfo>();
  final Context context=getActivity();
  if (context == null)   return;
  final PackageManager pm=mPackageManager;
  final IPackageManager ipm=mIPm;
  final HashSet<String> excludePackages=new HashSet<String>();
  addSystemImes(excludePackages);
  Intent launcherIntent=new Intent(Intent.ACTION_MAIN);
  launcherIntent.addCategory(Intent.CATEGORY_LAUNCHER);
  addSystemApps(mVisibleApps,launcherIntent,excludePackages);
  Intent widgetIntent=new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE);
  addSystemApps(mVisibleApps,widgetIntent,excludePackages);
  List<ApplicationInfo> installedApps=pm.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES);
  for (  ApplicationInfo app : installedApps) {
    if ((app.flags & ApplicationInfo.FLAG_INSTALLED) == 0)     continue;
    if ((app.flags & ApplicationInfo.FLAG_SYSTEM) == 0 && (app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) == 0) {
      SelectableAppInfo info=new SelectableAppInfo();
      info.packageName=app.packageName;
      info.appName=app.loadLabel(pm);
      info.activityName=info.appName;
      info.icon=app.loadIcon(pm);
      mVisibleApps.add(info);
    }
 else {
      try {
        PackageInfo pi=pm.getPackageInfo(app.packageName,0);
        if (mRestrictedProfile && pi.requiredAccountType != null && pi.restrictedAccountType == null) {
          mSelectedPackages.put(app.packageName,false);
        }
      }
 catch (      NameNotFoundException re) {
      }
    }
  }
  mUserApps=null;
  try {
    ParceledListSlice listSlice=ipm.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES,mUser.getIdentifier());
    if (listSlice != null) {
      mUserApps=listSlice.getList();
    }
  }
 catch (  RemoteException re) {
  }
  if (mUserApps != null) {
    for (    ApplicationInfo app : mUserApps) {
      if ((app.flags & ApplicationInfo.FLAG_INSTALLED) == 0)       continue;
      if ((app.flags & ApplicationInfo.FLAG_SYSTEM) == 0 && (app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) == 0) {
        SelectableAppInfo info=new SelectableAppInfo();
        info.packageName=app.packageName;
        info.appName=app.loadLabel(pm);
        info.activityName=info.appName;
        info.icon=app.loadIcon(pm);
        mVisibleApps.add(info);
      }
    }
  }
  Collections.sort(mVisibleApps,new AppLabelComparator());
  Set<String> dedupPackageSet=new HashSet<String>();
  for (int i=mVisibleApps.size() - 1; i >= 0; i--) {
    SelectableAppInfo info=mVisibleApps.get(i);
    if (DEBUG)     Log.i(TAG,info.toString());
    String both=info.packageName + "+" + info.activityName;
    if (!TextUtils.isEmpty(info.packageName) && !TextUtils.isEmpty(info.activityName) && dedupPackageSet.contains(both)) {
      mVisibleApps.remove(i);
    }
 else {
      dedupPackageSet.add(both);
    }
  }
  HashMap<String,SelectableAppInfo> packageMap=new HashMap<String,SelectableAppInfo>();
  for (  SelectableAppInfo info : mVisibleApps) {
    if (packageMap.containsKey(info.packageName)) {
      info.masterEntry=packageMap.get(info.packageName);
    }
 else {
      packageMap.put(info.packageName,info);
    }
  }
}
