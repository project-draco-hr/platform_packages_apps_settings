{
  removeRestrictionsForApp(preference);
  final Context context=preference.getContext();
  int count=1;
  for (  RestrictionEntry entry : restrictions) {
    Preference p=null;
switch (entry.getType()) {
case RestrictionEntry.TYPE_BOOLEAN:
      p=new SwitchPreference(context);
    p.setTitle(entry.getTitle());
  p.setSummary(entry.getDescription());
((SwitchPreference)p).setChecked(entry.getSelectedState());
break;
case RestrictionEntry.TYPE_CHOICE:
case RestrictionEntry.TYPE_CHOICE_LEVEL:
p=new ListPreference(context);
p.setTitle(entry.getTitle());
String value=entry.getSelectedString();
if (value == null) {
value=entry.getDescription();
}
p.setSummary(findInArray(entry.getChoiceEntries(),entry.getChoiceValues(),value));
((ListPreference)p).setEntryValues(entry.getChoiceValues());
((ListPreference)p).setEntries(entry.getChoiceEntries());
((ListPreference)p).setValue(value);
((ListPreference)p).setDialogTitle(entry.getTitle());
break;
case RestrictionEntry.TYPE_MULTI_SELECT:
p=new MultiSelectListPreference(context);
p.setTitle(entry.getTitle());
((MultiSelectListPreference)p).setEntryValues(entry.getChoiceValues());
((MultiSelectListPreference)p).setEntries(entry.getChoiceEntries());
HashSet<String> set=new HashSet<String>();
for (String s : entry.getAllSelectedStrings()) {
set.add(s);
}
((MultiSelectListPreference)p).setValues(set);
((MultiSelectListPreference)p).setDialogTitle(entry.getTitle());
break;
case RestrictionEntry.TYPE_NULL:
default :
}
if (p != null) {
p.setPersistent(false);
p.setOrder(preference.getOrder() + count);
p.setKey(preference.getKey().substring(PKG_PREFIX.length()) + DELIMITER + entry.getKey());
mAppList.addPreference(p);
p.setOnPreferenceChangeListener(AppRestrictionsFragment.this);
p.setIcon(R.drawable.empty_icon);
preference.mChildren.add(p);
count++;
}
}
preference.setRestrictions(restrictions);
if (count == 1 && preference.isImmutable() && preference.isChecked()) {
mAppList.removePreference(preference);
}
}
