{
  mAppList.setOrderingAsAdded(false);
  List<SelectableAppInfo> visibleApps=new ArrayList<SelectableAppInfo>();
  final Context context=getActivity();
  PackageManager pm=context.getPackageManager();
  IPackageManager ipm=AppGlobals.getPackageManager();
  Intent launcherIntent=new Intent(Intent.ACTION_MAIN);
  launcherIntent.addCategory(Intent.CATEGORY_LAUNCHER);
  addSystemApps(visibleApps,launcherIntent);
  Intent widgetIntent=new Intent(AppWidgetManager.ACTION_APPWIDGET_UPDATE);
  addSystemApps(visibleApps,widgetIntent);
  List<ApplicationInfo> installedApps=pm.getInstalledApplications(0);
  for (  ApplicationInfo app : installedApps) {
    if ((app.flags & ApplicationInfo.FLAG_SYSTEM) == 0 && (app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) == 0) {
      SelectableAppInfo info=new SelectableAppInfo();
      info.packageName=app.packageName;
      info.appName=app.loadLabel(pm);
      info.activityName=info.appName;
      info.icon=app.loadIcon(pm);
      visibleApps.add(info);
    }
  }
  List<ApplicationInfo> userApps=null;
  try {
    userApps=ipm.getInstalledApplications(0,mUser.getIdentifier()).getList();
  }
 catch (  RemoteException re) {
  }
  if (userApps != null) {
    for (    ApplicationInfo app : userApps) {
      if ((app.flags & ApplicationInfo.FLAG_SYSTEM) == 0 && (app.flags & ApplicationInfo.FLAG_UPDATED_SYSTEM_APP) == 0) {
        SelectableAppInfo info=new SelectableAppInfo();
        info.packageName=app.packageName;
        info.appName=app.loadLabel(pm);
        info.activityName=info.appName;
        info.icon=app.loadIcon(pm);
        visibleApps.add(info);
      }
    }
  }
  Collections.sort(visibleApps,new AppLabelComparator());
  for (int i=visibleApps.size() - 1; i > 1; i--) {
    SelectableAppInfo info=visibleApps.get(i);
    if (DEBUG)     Log.i(TAG,info.toString());
    if (info.packageName.equals(visibleApps.get(i - 1).packageName) && info.activityName.equals(visibleApps.get(i - 1).activityName)) {
      visibleApps.remove(i);
    }
  }
  HashMap<String,SelectableAppInfo> packageMap=new HashMap<String,SelectableAppInfo>();
  for (  SelectableAppInfo info : visibleApps) {
    if (packageMap.containsKey(info.packageName)) {
      info.masterEntry=packageMap.get(info.packageName);
    }
 else {
      packageMap.put(info.packageName,info);
    }
  }
  Intent restrictionsIntent=new Intent(Intent.ACTION_GET_RESTRICTION_ENTRIES);
  final List<ResolveInfo> receivers=pm.queryBroadcastReceivers(restrictionsIntent,0);
  int i=0;
  if (visibleApps.size() > 0) {
    for (    SelectableAppInfo app : visibleApps) {
      String packageName=app.packageName;
      if (packageName == null)       continue;
      AppRestrictionsPreference p=new AppRestrictionsPreference(context,this);
      final boolean hasSettings=resolveInfoListHasPackage(receivers,packageName);
      p.setIcon(app.icon);
      p.setTitle(app.activityName);
      if (app.masterEntry != null) {
        p.setSummary(getActivity().getString(R.string.user_restrictions_controlled_by,app.masterEntry.activityName));
      }
      p.setKey(PKG_PREFIX + packageName);
      p.setSettingsEnabled(hasSettings || packageName.equals(getActivity().getPackageName()));
      p.setPersistent(false);
      p.setOnPreferenceChangeListener(this);
      p.setOnPreferenceClickListener(this);
      PackageInfo pi=null;
      try {
        pi=pm.getPackageInfo(packageName,0);
      }
 catch (      NameNotFoundException re) {
        try {
          pi=ipm.getPackageInfo(packageName,0,mUser.getIdentifier());
        }
 catch (        RemoteException e) {
        }
      }
      if (pi != null && pi.requiredForAllUsers) {
        p.setChecked(true);
        p.setImmutable(true);
        if (!hasSettings)         continue;
      }
 else       if (!mNewUser && appInfoListHasPackage(userApps,packageName)) {
        p.setChecked(true);
      }
      if (app.masterEntry != null) {
        p.setImmutable(true);
        p.setChecked(mSelectedPackages.get(packageName));
      }
      mAppList.addPreference(p);
      if (packageName.equals(getActivity().getPackageName())) {
        p.setOrder(MAX_APP_RESTRICTIONS * 1);
      }
 else {
        p.setOrder(MAX_APP_RESTRICTIONS * (i + 2));
      }
      mSelectedPackages.put(packageName,p.isChecked());
      i++;
    }
  }
}
