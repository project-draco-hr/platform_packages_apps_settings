{
  String currentSetting=Settings.Secure.getString(mContext.getContentResolver(),Settings.Secure.VOICE_INTERACTION_SERVICE);
  if (currentSetting != null && !currentSetting.isEmpty()) {
    mCurrentVoiceInteraction=ComponentName.unflattenFromString(currentSetting);
  }
 else {
    mCurrentVoiceInteraction=null;
  }
  ArraySet<ComponentName> interactorRecognizers=new ArraySet<>();
  int size=mAvailableVoiceInteractions.size();
  for (int i=0; i < size; i++) {
    ResolveInfo resolveInfo=mAvailableVoiceInteractions.get(i);
    VoiceInteractionServiceInfo info=new VoiceInteractionServiceInfo(mContext.getPackageManager(),resolveInfo.serviceInfo);
    if (info.getParseError() != null) {
      Log.w("VoiceInteractionService","Error in VoiceInteractionService " + resolveInfo.serviceInfo.packageName + "/"+ resolveInfo.serviceInfo.name+ ": "+ info.getParseError());
      continue;
    }
    mAvailableInteractionInfos.add(new InteractionInfo(mContext.getPackageManager(),info));
    if (info.getRecognitionService() != null) {
      interactorRecognizers.add(new ComponentName(resolveInfo.serviceInfo.packageName,info.getRecognitionService()));
    }
  }
  Collections.sort(mAvailableInteractionInfos);
  currentSetting=Settings.Secure.getString(mContext.getContentResolver(),Settings.Secure.VOICE_RECOGNITION_SERVICE);
  if (currentSetting != null && !currentSetting.isEmpty()) {
    mCurrentRecognizer=ComponentName.unflattenFromString(currentSetting);
  }
 else {
    mCurrentRecognizer=null;
  }
  size=mAvailableRecognition.size();
  for (int i=0; i < size; i++) {
    ResolveInfo resolveInfo=mAvailableRecognition.get(i);
    ComponentName comp=new ComponentName(resolveInfo.serviceInfo.packageName,resolveInfo.serviceInfo.name);
    if (interactorRecognizers.contains(comp)) {
    }
    ServiceInfo si=resolveInfo.serviceInfo;
    XmlResourceParser parser=null;
    String settingsActivity=null;
    try {
      parser=si.loadXmlMetaData(mContext.getPackageManager(),RecognitionService.SERVICE_META_DATA);
      if (parser == null) {
        throw new XmlPullParserException("No " + RecognitionService.SERVICE_META_DATA + " meta-data for "+ si.packageName);
      }
      Resources res=mContext.getPackageManager().getResourcesForApplication(si.applicationInfo);
      AttributeSet attrs=Xml.asAttributeSet(parser);
      int type;
      while ((type=parser.next()) != XmlPullParser.END_DOCUMENT && type != XmlPullParser.START_TAG) {
      }
      String nodeName=parser.getName();
      if (!"recognition-service".equals(nodeName)) {
        throw new XmlPullParserException("Meta-data does not start with recognition-service tag");
      }
      TypedArray array=res.obtainAttributes(attrs,com.android.internal.R.styleable.RecognitionService);
      settingsActivity=array.getString(com.android.internal.R.styleable.RecognitionService_settingsActivity);
      array.recycle();
    }
 catch (    XmlPullParserException e) {
      Log.e(TAG,"error parsing recognition service meta-data",e);
    }
catch (    IOException e) {
      Log.e(TAG,"error parsing recognition service meta-data",e);
    }
catch (    PackageManager.NameNotFoundException e) {
      Log.e(TAG,"error parsing recognition service meta-data",e);
    }
 finally {
      if (parser != null)       parser.close();
    }
    mAvailableRecognizerInfos.add(new RecognizerInfo(mContext.getPackageManager(),resolveInfo.serviceInfo,settingsActivity));
  }
  Collections.sort(mAvailableRecognizerInfos);
}
