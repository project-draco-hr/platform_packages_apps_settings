{
  mHelper=new VoiceInputHelper(getContext());
  mHelper.buildUi();
  final String assistKey=mAssistRestrict == null ? "" : mAssistRestrict.flattenToShortString();
  mAvailableIndexes.clear();
  List<CharSequence> entries=new ArrayList<>();
  List<CharSequence> values=new ArrayList<>();
  for (int i=0; i < mHelper.mAvailableInteractionInfos.size(); ++i) {
    VoiceInputHelper.InteractionInfo info=mHelper.mAvailableInteractionInfos.get(i);
    entries.add(info.appLabel);
    values.add(info.key);
    if (info.key.contentEquals(assistKey)) {
      mAvailableIndexes.add(i);
    }
  }
  final boolean assitIsService=!mAvailableIndexes.isEmpty();
  final int serviceCount=entries.size();
  for (int i=0; i < mHelper.mAvailableRecognizerInfos.size(); ++i) {
    VoiceInputHelper.RecognizerInfo info=mHelper.mAvailableRecognizerInfos.get(i);
    entries.add(info.label);
    values.add(info.key);
    if (!assitIsService) {
      mAvailableIndexes.add(serviceCount + i);
    }
  }
  setEntries(entries.toArray(new CharSequence[entries.size()]));
  setEntryValues(values.toArray(new CharSequence[values.size()]));
  if (mHelper.mCurrentVoiceInteraction != null) {
    setValue(mHelper.mCurrentVoiceInteraction.flattenToShortString());
  }
 else   if (mHelper.mCurrentRecognizer != null) {
    setValue(mHelper.mCurrentRecognizer.flattenToShortString());
  }
 else {
    setValue(null);
  }
}
