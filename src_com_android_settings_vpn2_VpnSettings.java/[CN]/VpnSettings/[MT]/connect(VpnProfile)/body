{
  String[] racoon=null;
switch (profile.type) {
case VpnProfile.TYPE_L2TP_IPSEC_PSK:
    racoon=new String[]{profile.server,"1701",profile.ipsecSecret};
  break;
case VpnProfile.TYPE_L2TP_IPSEC_RSA:
racoon=new String[]{profile.server,"1701",Credentials.USER_PRIVATE_KEY + profile.ipsecUserCert,Credentials.USER_CERTIFICATE + profile.ipsecUserCert,Credentials.CA_CERTIFICATE + profile.ipsecCaCert};
break;
case VpnProfile.TYPE_IPSEC_XAUTH_PSK:
break;
case VpnProfile.TYPE_IPSEC_XAUTH_RSA:
break;
case VpnProfile.TYPE_IPSEC_HYBRID_RSA:
break;
}
String[] mtpd=null;
switch (profile.type) {
case VpnProfile.TYPE_PPTP:
mtpd=new String[]{"pptp",profile.server,"1723","name",profile.username,"password",profile.password,"linkname","vpn","refuse-eap","nodefaultroute","usepeerdns","idle","1800","mtu","1400","mru","1400","ipparam",profile.routes,(profile.mppe ? "+mppe" : "nomppe")};
break;
case VpnProfile.TYPE_L2TP_IPSEC_PSK:
case VpnProfile.TYPE_L2TP_IPSEC_RSA:
mtpd=new String[]{"l2tp",profile.server,"1701",profile.l2tpSecret,"name",profile.username,"password",profile.password,"linkname","vpn","refuse-eap","nodefaultroute","usepeerdns","idle","1800","mtu","1400","mru","1400","ipparam",profile.routes};
break;
}
VpnConfig config=new VpnConfig();
config.session=profile.name;
config.routes=profile.routes;
if (!profile.searchDomains.isEmpty()) {
config.searchDomains=Arrays.asList(profile.searchDomains.split(" "));
}
try {
getService().doLegacyVpn(config,racoon,mtpd);
}
 catch (Exception e) {
Log.e(TAG,"connect",e);
}
}
