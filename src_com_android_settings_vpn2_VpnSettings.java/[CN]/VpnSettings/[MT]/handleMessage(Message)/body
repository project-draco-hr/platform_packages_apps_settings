{
  mUpdater.removeMessages(RESCAN_MESSAGE);
  PreferenceGroup vpnGroup=getPreferenceScreen();
  vpnGroup.removeAll();
  mConfigPreferences.clear();
  mAppPreferences.clear();
  for (  VpnProfile profile : loadVpnProfiles(mKeyStore)) {
    final ConfigPreference pref=new ConfigPreference(getActivity(),mManageListener,profile);
    pref.setOnPreferenceClickListener(this);
    mConfigPreferences.put(profile.key,pref);
    vpnGroup.addPreference(pref);
  }
  for (  AppOpsManager.PackageOps pkg : getVpnApps()) {
    String key=getVpnIdentifier(UserHandle.getUserId(pkg.getUid()),pkg.getPackageName());
    final AppPreference pref=new AppPreference(getActivity(),mManageListener,pkg.getPackageName(),pkg.getUid());
    pref.setOnPreferenceClickListener(this);
    mAppPreferences.put(key,pref);
    vpnGroup.addPreference(pref);
  }
  try {
    mConnectedLegacyVpn=null;
    LegacyVpnInfo info=mConnectivityService.getLegacyVpnInfo(UserHandle.myUserId());
    if (info != null) {
      ConfigPreference preference=mConfigPreferences.get(info.key);
      if (preference != null) {
        preference.setState(info.state);
        mConnectedLegacyVpn=info;
      }
    }
    for (    UserHandle profile : mUserManager.getUserProfiles()) {
      VpnConfig cfg=mConnectivityService.getVpnConfig(profile.getIdentifier());
      if (cfg != null) {
        final String key=getVpnIdentifier(profile.getIdentifier(),cfg.user);
        final AppPreference preference=mAppPreferences.get(key);
        if (preference != null) {
          preference.setState(AppPreference.STATE_CONNECTED);
        }
      }
    }
  }
 catch (  RemoteException e) {
  }
  mUpdater.sendEmptyMessageDelayed(RESCAN_MESSAGE,RESCAN_INTERVAL_MS);
  return true;
}
