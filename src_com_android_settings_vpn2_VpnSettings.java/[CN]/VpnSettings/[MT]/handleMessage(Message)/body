{
  mUpdater.removeMessages(RESCAN_MESSAGE);
  final List<VpnProfile> vpnProfiles=loadVpnProfiles(mKeyStore);
  final List<AppVpnInfo> vpnApps=getVpnApps(getActivity(),true);
  final List<LegacyVpnInfo> connectedLegacyVpns=getConnectedLegacyVpns();
  final List<AppVpnInfo> connectedAppVpns=getConnectedAppVpns();
  getActivity().runOnUiThread(new Runnable(){
    @Override public void run(){
      final Set<Preference> updates=new ArraySet<>();
      for (      VpnProfile profile : vpnProfiles) {
        ConfigPreference p=findOrCreatePreference(profile);
        p.setState(ConfigPreference.STATE_NONE);
        updates.add(p);
      }
      for (      AppVpnInfo app : vpnApps) {
        AppPreference p=findOrCreatePreference(app);
        p.setState(AppPreference.STATE_DISCONNECTED);
        updates.add(p);
      }
      mConfigPreferences.values().retainAll(updates);
      mAppPreferences.values().retainAll(updates);
      final PreferenceGroup vpnGroup=getPreferenceScreen();
      for (int i=vpnGroup.getPreferenceCount() - 1; i >= 0; i--) {
        Preference p=vpnGroup.getPreference(i);
        if (updates.contains(p)) {
          updates.remove(p);
        }
 else {
          vpnGroup.removePreference(p);
        }
      }
      for (      Preference pref : updates) {
        vpnGroup.addPreference(pref);
      }
      for (      LegacyVpnInfo info : connectedLegacyVpns) {
        final ConfigPreference preference=mConfigPreferences.get(info.key);
        if (preference != null) {
          preference.setState(info.state);
        }
      }
      for (      AppVpnInfo app : connectedAppVpns) {
        final AppPreference preference=mAppPreferences.get(app);
        if (preference != null) {
          preference.setState(AppPreference.STATE_CONNECTED);
        }
      }
    }
  }
);
  mUpdater.sendEmptyMessageDelayed(RESCAN_MESSAGE,RESCAN_INTERVAL_MS);
  return true;
}
