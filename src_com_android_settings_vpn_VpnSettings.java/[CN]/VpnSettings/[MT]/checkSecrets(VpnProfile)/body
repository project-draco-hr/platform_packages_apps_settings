{
  Keystore ks=Keystore.getInstance();
  HashSet<String> secretSet=new HashSet<String>();
  boolean secretMissing=false;
  if (p instanceof L2tpIpsecProfile) {
    L2tpIpsecProfile certProfile=(L2tpIpsecProfile)p;
    CertTool certTool=CertTool.getInstance();
    Collections.addAll(secretSet,certTool.getAllCaCertificateKeys());
    String cert=certProfile.getCaCertificate();
    if (TextUtils.isEmpty(cert) || !secretSet.contains(cert)) {
      certProfile.setCaCertificate(null);
      secretMissing=true;
    }
    secretSet.clear();
    Collections.addAll(secretSet,certTool.getAllUserCertificateKeys());
    cert=certProfile.getUserCertificate();
    if (TextUtils.isEmpty(cert) || !secretSet.contains(cert)) {
      certProfile.setUserCertificate(null);
      secretMissing=true;
    }
  }
  secretSet.clear();
  Collections.addAll(secretSet,ks.listKeys(NAMESPACE_VPN));
  if (p instanceof L2tpIpsecPskProfile) {
    L2tpIpsecPskProfile pskProfile=(L2tpIpsecPskProfile)p;
    String presharedKey=pskProfile.getPresharedKey();
    String keyName=KEY_PREFIX_IPSEC_PSK + p.getId();
    if (TextUtils.isEmpty(presharedKey) || !secretSet.contains(keyName)) {
      pskProfile.setPresharedKey(null);
      secretMissing=true;
    }
  }
  if (p instanceof L2tpProfile) {
    L2tpProfile l2tpProfile=(L2tpProfile)p;
    if (l2tpProfile.isSecretEnabled()) {
      String secret=l2tpProfile.getSecretString();
      String keyName=KEY_PREFIX_L2TP_SECRET + p.getId();
      if (TextUtils.isEmpty(secret) || !secretSet.contains(keyName)) {
        l2tpProfile.setSecretString(null);
        secretMissing=true;
      }
    }
  }
  if (secretMissing) {
    showDialog(DIALOG_SECRET_NOT_SET);
    return false;
  }
 else {
    return true;
  }
}
