{
  if (mCertCategory == null) {
    mCertCategory=new PreferenceCategory(getPrefContext());
    mCertCategory.setTitle(R.string.wifi_display_certification_heading);
    mCertCategory.setOrder(ORDER_CERTIFICATION);
  }
 else {
    mCertCategory.removeAll();
  }
  preferenceScreen.addPreference(mCertCategory);
  if (!mWifiDisplayStatus.getSessionInfo().getGroupId().isEmpty()) {
    Preference p=new Preference(getPrefContext());
    p.setTitle(R.string.wifi_display_session_info);
    p.setSummary(mWifiDisplayStatus.getSessionInfo().toString());
    mCertCategory.addPreference(p);
    if (mWifiDisplayStatus.getSessionInfo().getSessionId() != 0) {
      mCertCategory.addPreference(new Preference(getPrefContext()){
        @Override public void onBindViewHolder(        PreferenceViewHolder view){
          super.onBindViewHolder(view);
          Button b=(Button)view.findViewById(R.id.left_button);
          b.setText(R.string.wifi_display_pause);
          b.setOnClickListener(new OnClickListener(){
            @Override public void onClick(            View v){
              mDisplayManager.pauseWifiDisplay();
            }
          }
);
          b=(Button)view.findViewById(R.id.right_button);
          b.setText(R.string.wifi_display_resume);
          b.setOnClickListener(new OnClickListener(){
            @Override public void onClick(            View v){
              mDisplayManager.resumeWifiDisplay();
            }
          }
);
        }
      }
);
      mCertCategory.setLayoutResource(R.layout.two_buttons_panel);
    }
  }
  SwitchPreference pref=new SwitchPreference(getPrefContext()){
    @Override protected void onClick(){
      mListen=!mListen;
      setListenMode(mListen);
      setChecked(mListen);
    }
  }
;
  pref.setTitle(R.string.wifi_display_listen_mode);
  pref.setChecked(mListen);
  mCertCategory.addPreference(pref);
  pref=new SwitchPreference(getPrefContext()){
    @Override protected void onClick(){
      mAutoGO=!mAutoGO;
      if (mAutoGO) {
        startAutoGO();
      }
 else {
        stopAutoGO();
      }
      setChecked(mAutoGO);
    }
  }
;
  pref.setTitle(R.string.wifi_display_autonomous_go);
  pref.setChecked(mAutoGO);
  mCertCategory.addPreference(pref);
  ListPreference lp=new ListPreference(getPrefContext());
  lp.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object value){
      int wpsConfig=Integer.parseInt((String)value);
      if (wpsConfig != mWpsConfig) {
        mWpsConfig=wpsConfig;
        getActivity().invalidateOptionsMenu();
        Settings.Global.putInt(getActivity().getContentResolver(),Settings.Global.WIFI_DISPLAY_WPS_CONFIG,mWpsConfig);
      }
      return true;
    }
  }
);
  mWpsConfig=Settings.Global.getInt(getActivity().getContentResolver(),Settings.Global.WIFI_DISPLAY_WPS_CONFIG,WpsInfo.INVALID);
  String[] wpsEntries={"Default","PBC","KEYPAD","DISPLAY"};
  String[] wpsValues={"" + WpsInfo.INVALID,"" + WpsInfo.PBC,"" + WpsInfo.KEYPAD,"" + WpsInfo.DISPLAY};
  lp.setKey("wps");
  lp.setTitle(R.string.wifi_display_wps_config);
  lp.setEntries(wpsEntries);
  lp.setEntryValues(wpsValues);
  lp.setValue("" + mWpsConfig);
  lp.setSummary("%1$s");
  mCertCategory.addPreference(lp);
  lp=new ListPreference(getPrefContext());
  lp.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object value){
      int channel=Integer.parseInt((String)value);
      if (channel != mListenChannel) {
        mListenChannel=channel;
        getActivity().invalidateOptionsMenu();
        setWifiP2pChannels(mListenChannel,mOperatingChannel);
      }
      return true;
    }
  }
);
  String[] lcEntries={"Auto","1","6","11"};
  String[] lcValues={"0","1","6","11"};
  lp.setKey("listening_channel");
  lp.setTitle(R.string.wifi_display_listen_channel);
  lp.setEntries(lcEntries);
  lp.setEntryValues(lcValues);
  lp.setValue("" + mListenChannel);
  lp.setSummary("%1$s");
  mCertCategory.addPreference(lp);
  lp=new ListPreference(getPrefContext());
  lp.setOnPreferenceChangeListener(new OnPreferenceChangeListener(){
    @Override public boolean onPreferenceChange(    Preference preference,    Object value){
      int channel=Integer.parseInt((String)value);
      if (channel != mOperatingChannel) {
        mOperatingChannel=channel;
        getActivity().invalidateOptionsMenu();
        setWifiP2pChannels(mListenChannel,mOperatingChannel);
      }
      return true;
    }
  }
);
  String[] ocEntries={"Auto","1","6","11","36"};
  String[] ocValues={"0","1","6","11","36"};
  lp.setKey("operating_channel");
  lp.setTitle(R.string.wifi_display_operating_channel);
  lp.setEntries(ocEntries);
  lp.setEntryValues(ocValues);
  lp.setValue("" + mOperatingChannel);
  lp.setSummary("%1$s");
  mCertCategory.addPreference(lp);
}
