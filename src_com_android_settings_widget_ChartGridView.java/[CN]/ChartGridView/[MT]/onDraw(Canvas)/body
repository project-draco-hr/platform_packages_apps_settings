{
  final int width=getWidth();
  final int height=getHeight() - getPaddingBottom();
  final Drawable secondary=mSecondary;
  if (secondary != null) {
    final int secondaryHeight=secondary.getIntrinsicHeight();
    final float[] vertTicks=mVert.getTickPoints();
    for (    float y : vertTicks) {
      final int bottom=(int)Math.min(y + secondaryHeight,height);
      secondary.setBounds(0,(int)y,width,bottom);
      secondary.draw(canvas);
    }
  }
  final Drawable primary=mPrimary;
  if (primary != null) {
    final int primaryWidth=primary.getIntrinsicWidth();
    final int primaryHeight=primary.getIntrinsicHeight();
    final float[] horizTicks=mHoriz.getTickPoints();
    for (    float x : horizTicks) {
      final int right=(int)Math.min(x + primaryWidth,width);
      primary.setBounds((int)x,0,right,height);
      primary.draw(canvas);
    }
  }
  mBorder.setBounds(0,0,width,height);
  mBorder.draw(canvas);
  final int padding=mLabelStart != null ? mLabelStart.getHeight() / 8 : 0;
  final Layout start=mLabelStart;
  if (start != null) {
    final int saveCount=canvas.save();
    canvas.translate(0,height + padding);
    start.draw(canvas);
    canvas.restoreToCount(saveCount);
  }
  final Layout mid=mLabelMid;
  if (mid != null) {
    final int saveCount=canvas.save();
    canvas.translate((width - mid.getWidth()) / 2,height + padding);
    mid.draw(canvas);
    canvas.restoreToCount(saveCount);
  }
  final Layout end=mLabelEnd;
  if (end != null) {
    final int saveCount=canvas.save();
    canvas.translate(width - end.getWidth(),height + padding);
    end.draw(canvas);
    canvas.restoreToCount(saveCount);
  }
}
