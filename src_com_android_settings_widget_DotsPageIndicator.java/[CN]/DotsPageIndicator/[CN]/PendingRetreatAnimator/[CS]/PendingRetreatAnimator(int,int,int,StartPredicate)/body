{
  super(predicate);
  setDuration(animHalfDuration);
  setInterpolator(interpolator);
  final float initialX1=now > was ? Math.min(dotCenterX[was],selectedDotX) - dotRadius : dotCenterX[now] - dotRadius;
  final float finalX1=now > was ? dotCenterX[now] - dotRadius : dotCenterX[now] - dotRadius;
  final float initialX2=now > was ? dotCenterX[now] + dotRadius : Math.max(dotCenterX[was],selectedDotX) + dotRadius;
  final float finalX2=now > was ? dotCenterX[now] + dotRadius : dotCenterX[now] + dotRadius;
  revealAnimations=new PendingRevealAnimator[steps];
  final int[] dotsToHide=new int[steps];
  if (initialX1 != finalX1) {
    setFloatValues(initialX1,finalX1);
    for (int i=0; i < steps; i++) {
      revealAnimations[i]=new PendingRevealAnimator(was + i,new RightwardStartPredicate(dotCenterX[was + i]));
      dotsToHide[i]=was + i;
    }
    addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
      @Override public void onAnimationUpdate(      ValueAnimator valueAnimator){
        retreatingJoinX1=(Float)valueAnimator.getAnimatedValue();
        postInvalidateOnAnimation();
        for (        PendingRevealAnimator pendingReveal : revealAnimations) {
          pendingReveal.startIfNecessary(retreatingJoinX1);
        }
      }
    }
);
  }
 else {
    setFloatValues(initialX2,finalX2);
    for (int i=0; i < steps; i++) {
      revealAnimations[i]=new PendingRevealAnimator(was - i,new LeftwardStartPredicate(dotCenterX[was - i]));
      dotsToHide[i]=was - i;
    }
    addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
      @Override public void onAnimationUpdate(      ValueAnimator valueAnimator){
        retreatingJoinX2=(Float)valueAnimator.getAnimatedValue();
        postInvalidateOnAnimation();
        for (        PendingRevealAnimator pendingReveal : revealAnimations) {
          pendingReveal.startIfNecessary(retreatingJoinX2);
        }
      }
    }
);
  }
  addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationStart(    Animator animation){
      cancelJoiningAnimations();
      clearJoiningFractions();
      for (      int dot : dotsToHide) {
        setDotRevealFraction(dot,MINIMAL_REVEAL);
      }
      retreatingJoinX1=initialX1;
      retreatingJoinX2=initialX2;
      postInvalidateOnAnimation();
    }
    @Override public void onAnimationEnd(    Animator animation){
      retreatingJoinX1=INVALID_FRACTION;
      retreatingJoinX2=INVALID_FRACTION;
      postInvalidateOnAnimation();
    }
  }
);
}
