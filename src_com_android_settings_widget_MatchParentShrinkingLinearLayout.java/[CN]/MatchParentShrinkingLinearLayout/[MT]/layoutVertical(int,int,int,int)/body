{
  final int paddingLeft=mPaddingLeft;
  int childTop;
  int childLeft;
  final int width=right - left;
  int childRight=width - mPaddingRight;
  int childSpace=width - paddingLeft - mPaddingRight;
  final int count=getVirtualChildCount();
  final int majorGravity=mGravity & Gravity.VERTICAL_GRAVITY_MASK;
  final int minorGravity=mGravity & Gravity.RELATIVE_HORIZONTAL_GRAVITY_MASK;
switch (majorGravity) {
case Gravity.BOTTOM:
    childTop=mPaddingTop + bottom - top - mTotalLength;
  break;
case Gravity.CENTER_VERTICAL:
childTop=mPaddingTop + (bottom - top - mTotalLength) / 2;
break;
case Gravity.TOP:
default :
childTop=mPaddingTop;
break;
}
for (int i=0; i < count; i++) {
final View child=getVirtualChildAt(i);
if (child == null) {
childTop+=measureNullChild(i);
}
 else if (child.getVisibility() != GONE) {
final int childWidth=child.getMeasuredWidth();
final int childHeight=child.getMeasuredHeight();
final LayoutParams lp=(LayoutParams)child.getLayoutParams();
int gravity=lp.gravity;
if (gravity < 0) {
gravity=minorGravity;
}
final int layoutDirection=getLayoutDirection();
final int absoluteGravity=Gravity.getAbsoluteGravity(gravity,layoutDirection);
switch (absoluteGravity & Gravity.HORIZONTAL_GRAVITY_MASK) {
case Gravity.CENTER_HORIZONTAL:
childLeft=paddingLeft + ((childSpace - childWidth) / 2) + lp.leftMargin - lp.rightMargin;
break;
case Gravity.RIGHT:
childLeft=childRight - childWidth - lp.rightMargin;
break;
case Gravity.LEFT:
default :
childLeft=paddingLeft + lp.leftMargin;
break;
}
if (hasDividerBeforeChildAt(i)) {
childTop+=mDividerHeight;
}
childTop+=lp.topMargin;
setChildFrame(child,childLeft,childTop + getLocationOffset(child),childWidth,childHeight);
childTop+=childHeight + lp.bottomMargin + getNextLocationOffset(child);
i+=getChildrenSkipCount(child,i);
}
}
}
