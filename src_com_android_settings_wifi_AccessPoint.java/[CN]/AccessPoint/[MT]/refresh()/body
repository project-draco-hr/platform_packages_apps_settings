{
  setTitle(ssid);
  final Context context=getContext();
  updateIcon(getLevel(),context);
  setSummary(null);
  StringBuilder summary=new StringBuilder();
  if (isActive()) {
    summary.append(Summary.get(context,getState()));
  }
 else   if (mConfig != null && mConfig.hasNoInternetAccess()) {
    summary.append(context.getString(R.string.wifi_no_internet));
  }
 else   if (mConfig != null && ((mConfig.status == WifiConfiguration.Status.DISABLED && mConfig.disableReason != WifiConfiguration.DISABLED_UNKNOWN_REASON) || mConfig.autoJoinStatus >= WifiConfiguration.AUTO_JOIN_DISABLED_ON_AUTH_FAILURE)) {
    if (mConfig.autoJoinStatus >= WifiConfiguration.AUTO_JOIN_DISABLED_ON_AUTH_FAILURE) {
      if (mConfig.disableReason == WifiConfiguration.DISABLED_DHCP_FAILURE) {
        summary.append(context.getString(R.string.wifi_disabled_network_failure));
      }
 else       if (mConfig.disableReason == WifiConfiguration.DISABLED_AUTH_FAILURE) {
        summary.append(context.getString(R.string.wifi_disabled_password_failure));
      }
 else {
        summary.append(context.getString(R.string.wifi_disabled_wifi_failure));
      }
    }
 else {
switch (mConfig.disableReason) {
case WifiConfiguration.DISABLED_AUTH_FAILURE:
        summary.append(context.getString(R.string.wifi_disabled_password_failure));
      break;
case WifiConfiguration.DISABLED_DHCP_FAILURE:
case WifiConfiguration.DISABLED_DNS_FAILURE:
    summary.append(context.getString(R.string.wifi_disabled_network_failure));
  break;
case WifiConfiguration.DISABLED_UNKNOWN_REASON:
case WifiConfiguration.DISABLED_ASSOCIATION_REJECT:
summary.append(context.getString(R.string.wifi_disabled_generic));
break;
}
}
}
 else if (mRssi == Integer.MAX_VALUE) {
summary.append(context.getString(R.string.wifi_not_in_range));
}
 else {
if (mConfig != null) {
summary.append(context.getString(R.string.wifi_remembered));
}
}
if (WifiSettings.mVerboseLogging > 0) {
if (mInfo != null && mNetworkInfo != null) {
summary.append(" f=" + Integer.toString(mInfo.getFrequency()));
}
summary.append(" " + getVisibilityStatus());
if (mConfig != null && mConfig.autoJoinStatus > 0) {
summary.append(" (" + mConfig.autoJoinStatus);
if (mConfig.blackListTimestamp > 0) {
long now=System.currentTimeMillis();
long diff=(now - mConfig.blackListTimestamp) / 1000;
long sec=diff % 60;
long min=(diff / 60) % 60;
long hour=(min / 60) % 60;
summary.append(", ");
if (hour > 0) summary.append(Long.toString(hour) + "h ");
summary.append(Long.toString(min) + "m ");
summary.append(Long.toString(sec) + "s ");
}
summary.append(")");
}
if (mConfig != null && mConfig.numIpConfigFailures > 0) {
summary.append(" ipf=").append(mConfig.numIpConfigFailures);
}
if (mConfig != null && mConfig.numConnectionFailures > 0) {
summary.append(" cf=").append(mConfig.numConnectionFailures);
}
if (mConfig != null && mConfig.numAuthFailures > 0) {
summary.append(" authf=").append(mConfig.numAuthFailures);
}
if (mConfig != null && mConfig.numNoInternetAccessReports > 0) {
summary.append(" noInt=").append(mConfig.numNoInternetAccessReports);
}
}
if (summary.length() > 0) {
setSummary(summary.toString());
setShowSummary(true);
}
 else {
setShowSummary(false);
}
}
