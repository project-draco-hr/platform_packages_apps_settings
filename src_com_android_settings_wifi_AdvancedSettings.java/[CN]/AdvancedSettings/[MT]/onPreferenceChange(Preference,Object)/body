{
  String key=preference.getKey();
  if (key == null)   return true;
  if (key.equals(KEY_NUM_CHANNELS)) {
    try {
      int numChannels=Integer.parseInt((String)newValue);
      WifiManager wifiManager=(WifiManager)getSystemService(WIFI_SERVICE);
      if (!wifiManager.setNumAllowedChannels(numChannels,true)) {
        Toast.makeText(this,R.string.wifi_setting_num_channels_error,Toast.LENGTH_SHORT).show();
      }
    }
 catch (    NumberFormatException e) {
      Toast.makeText(this,R.string.wifi_setting_num_channels_error,Toast.LENGTH_SHORT).show();
      return false;
    }
  }
 else   if (key.equals(KEY_SLEEP_POLICY)) {
    try {
      Settings.System.putInt(getContentResolver(),Settings.System.WIFI_SLEEP_POLICY,Integer.parseInt(((String)newValue)));
    }
 catch (    NumberFormatException e) {
      Toast.makeText(this,R.string.wifi_setting_sleep_policy_error,Toast.LENGTH_SHORT).show();
      return false;
    }
  }
 else   if (key.equals(KEY_USE_STATIC_IP)) {
    boolean value=((Boolean)newValue).booleanValue();
    try {
      Settings.System.putInt(getContentResolver(),Settings.System.WIFI_USE_STATIC_IP,value ? 1 : 0);
    }
 catch (    NumberFormatException e) {
      return false;
    }
  }
 else {
    String value=(String)newValue;
    if (!isIpAddress(value)) {
      Toast.makeText(this,R.string.wifi_ip_settings_invalid_ip,Toast.LENGTH_LONG).show();
      return false;
    }
    preference.setSummary(value);
    for (int i=0; i < mSettingNames.length; i++) {
      if (key.equals(mPreferenceKeys[i])) {
        Settings.System.putString(getContentResolver(),mSettingNames[i],value);
        break;
      }
    }
  }
  return true;
}
