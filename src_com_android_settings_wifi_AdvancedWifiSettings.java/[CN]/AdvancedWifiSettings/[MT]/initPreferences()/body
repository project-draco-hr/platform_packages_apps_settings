{
  CheckBoxPreference notifyOpenNetworks=(CheckBoxPreference)findPreference(KEY_NOTIFY_OPEN_NETWORKS);
  notifyOpenNetworks.setChecked(Settings.Global.getInt(getContentResolver(),Settings.Global.WIFI_NETWORKS_AVAILABLE_NOTIFICATION_ON,0) == 1);
  notifyOpenNetworks.setEnabled(mWifiManager.isWifiEnabled());
  CheckBoxPreference poorNetworkDetection=(CheckBoxPreference)findPreference(KEY_POOR_NETWORK_DETECTION);
  if (poorNetworkDetection != null) {
    if (Utils.isWifiOnly(getActivity())) {
      getPreferenceScreen().removePreference(poorNetworkDetection);
    }
 else {
      poorNetworkDetection.setChecked(Global.getInt(getContentResolver(),Global.WIFI_WATCHDOG_POOR_NETWORK_TEST_ENABLED,1) == 1);
    }
  }
  CheckBoxPreference suspendOptimizations=(CheckBoxPreference)findPreference(KEY_SUSPEND_OPTIMIZATIONS);
  suspendOptimizations.setChecked(Global.getInt(getContentResolver(),Global.WIFI_SUSPEND_OPTIMIZATIONS_ENABLED,1) == 1);
  ListPreference frequencyPref=(ListPreference)findPreference(KEY_FREQUENCY_BAND);
  if (mWifiManager.isDualBandSupported()) {
    frequencyPref.setOnPreferenceChangeListener(this);
    int value=mWifiManager.getFrequencyBand();
    if (value != -1) {
      frequencyPref.setValue(String.valueOf(value));
    }
 else {
      Log.e(TAG,"Failed to fetch frequency band");
    }
  }
 else {
    if (frequencyPref != null) {
      getPreferenceScreen().removePreference(frequencyPref);
    }
  }
  ListPreference sleepPolicyPref=(ListPreference)findPreference(KEY_SLEEP_POLICY);
  if (sleepPolicyPref != null) {
    if (Utils.isWifiOnly(getActivity())) {
      sleepPolicyPref.setEntries(R.array.wifi_sleep_policy_entries_wifi_only);
    }
    sleepPolicyPref.setOnPreferenceChangeListener(this);
    int value=Settings.Global.getInt(getContentResolver(),Settings.Global.WIFI_SLEEP_POLICY,Settings.Global.WIFI_SLEEP_POLICY_NEVER);
    String stringValue=String.valueOf(value);
    sleepPolicyPref.setValue(stringValue);
    updateSleepPolicySummary(sleepPolicyPref,stringValue);
  }
}
