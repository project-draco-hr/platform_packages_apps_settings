{
  mConfigUi=parent;
  mView=view;
  mAccessPoint=accessPoint;
  mAccessPointSecurity=(accessPoint == null) ? AccessPoint.SECURITY_NONE : accessPoint.getSecurity();
  mEdit=edit;
  mTextViewChangedHandler=new Handler();
  mContext=mConfigUi.getContext();
  final Resources res=mContext.getResources();
  mLevels=res.getStringArray(R.array.wifi_signal);
  PHASE2_PEAP_ADAPTER=new ArrayAdapter<String>(mContext,android.R.layout.simple_spinner_item,res.getStringArray(R.array.wifi_peap_phase2_entries));
  PHASE2_PEAP_ADAPTER.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  PHASE2_FULL_ADAPTER=new ArrayAdapter<String>(mContext,android.R.layout.simple_spinner_item,res.getStringArray(R.array.wifi_phase2_entries));
  PHASE2_FULL_ADAPTER.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
  unspecifiedCert=mContext.getString(R.string.wifi_unspecified);
  mIpSettingsSpinner=(Spinner)mView.findViewById(R.id.ip_settings);
  mIpSettingsSpinner.setOnItemSelectedListener(this);
  mProxySettingsSpinner=(Spinner)mView.findViewById(R.id.proxy_settings);
  mProxySettingsSpinner.setOnItemSelectedListener(this);
  if (mAccessPoint == null) {
    mConfigUi.setTitle(R.string.wifi_add_network);
    mSsidView=(TextView)mView.findViewById(R.id.ssid);
    mSsidView.addTextChangedListener(this);
    mSecuritySpinner=((Spinner)mView.findViewById(R.id.security));
    mSecuritySpinner.setOnItemSelectedListener(this);
    mView.findViewById(R.id.type).setVisibility(View.VISIBLE);
    showIpConfigFields();
    showProxyFields();
    mView.findViewById(R.id.wifi_advanced_toggle).setVisibility(View.VISIBLE);
    ((CheckBox)mView.findViewById(R.id.wifi_advanced_togglebox)).setOnCheckedChangeListener(this);
    mConfigUi.setSubmitButton(res.getString(R.string.wifi_save));
  }
 else {
    mConfigUi.setTitle(mAccessPoint.getSsid());
    ViewGroup group=(ViewGroup)mView.findViewById(R.id.info);
    boolean showAdvancedFields=false;
    if (mAccessPoint.isSaved()) {
      WifiConfiguration config=mAccessPoint.getConfig();
      if (config.getIpAssignment() == IpAssignment.STATIC) {
        mIpSettingsSpinner.setSelection(STATIC_IP);
        showAdvancedFields=true;
        StaticIpConfiguration staticConfig=config.getStaticIpConfiguration();
        if (staticConfig != null && staticConfig.ipAddress != null) {
          addRow(group,R.string.wifi_ip_address,staticConfig.ipAddress.getAddress().getHostAddress());
        }
      }
 else {
        mIpSettingsSpinner.setSelection(DHCP);
      }
      if (config.getProxySettings() == ProxySettings.STATIC) {
        mProxySettingsSpinner.setSelection(PROXY_STATIC);
        showAdvancedFields=true;
      }
 else       if (config.getProxySettings() == ProxySettings.PAC) {
        mProxySettingsSpinner.setSelection(PROXY_PAC);
        showAdvancedFields=true;
      }
 else {
        mProxySettingsSpinner.setSelection(PROXY_NONE);
      }
    }
    if ((!mAccessPoint.isSaved() && !mAccessPoint.isActive()) || mEdit) {
      showSecurityFields();
      showIpConfigFields();
      showProxyFields();
      mView.findViewById(R.id.wifi_advanced_toggle).setVisibility(View.VISIBLE);
      ((CheckBox)mView.findViewById(R.id.wifi_advanced_togglebox)).setOnCheckedChangeListener(this);
      if (showAdvancedFields) {
        ((CheckBox)mView.findViewById(R.id.wifi_advanced_togglebox)).setChecked(true);
        mView.findViewById(R.id.wifi_advanced_fields).setVisibility(View.VISIBLE);
      }
    }
    if (mEdit) {
      mConfigUi.setSubmitButton(res.getString(R.string.wifi_save));
    }
 else {
      final DetailedState state=mAccessPoint.getDetailedState();
      final String signalLevel=getSignalString();
      if (state == null && signalLevel != null) {
        mConfigUi.setSubmitButton(res.getString(R.string.wifi_connect));
      }
 else {
        if (state != null) {
          WifiConfiguration config=mAccessPoint.getConfig();
          boolean isEphimeral=mAccessPoint.isSaved() == false;
          String providerFriendlyName=null;
          if (config != null && config.isPasspoint()) {
            providerFriendlyName=config.providerFriendlyName;
          }
          String summary=AccessPoint.getSummary(mConfigUi.getContext(),state,isEphimeral,providerFriendlyName);
          addRow(group,R.string.wifi_status,summary);
        }
        if (signalLevel != null) {
          addRow(group,R.string.wifi_signal,signalLevel);
        }
        WifiInfo info=mAccessPoint.getInfo();
        if (info != null && info.getLinkSpeed() != -1) {
          addRow(group,R.string.wifi_speed,info.getLinkSpeed() + WifiInfo.LINK_SPEED_UNITS);
        }
        if (info != null && info.getFrequency() != -1) {
          final int frequency=info.getFrequency();
          String band=null;
          if (frequency >= AccessPoint.LOWER_FREQ_24GHZ && frequency < AccessPoint.HIGHER_FREQ_24GHZ) {
            band=res.getString(R.string.wifi_band_24ghz);
          }
 else           if (frequency >= AccessPoint.LOWER_FREQ_5GHZ && frequency < AccessPoint.HIGHER_FREQ_5GHZ) {
            band=res.getString(R.string.wifi_band_5ghz);
          }
 else {
            Log.e(TAG,"Unexpected frequency " + frequency);
          }
          if (band != null) {
            addRow(group,R.string.wifi_frequency,band);
          }
        }
        addRow(group,R.string.wifi_security,mAccessPoint.getSecurityString(false));
        mView.findViewById(R.id.ip_fields).setVisibility(View.GONE);
      }
      if (mAccessPoint.isSaved() || mAccessPoint.isActive()) {
        mConfigUi.setForgetButton(res.getString(R.string.wifi_forget));
      }
    }
  }
  if ((mEdit) || (mAccessPoint != null && mAccessPoint.getDetailedState() == null && mAccessPoint.getLevel() != -1)) {
    mConfigUi.setCancelButton(res.getString(R.string.wifi_cancel));
  }
 else {
    mConfigUi.setCancelButton(res.getString(R.string.wifi_display_options_done));
  }
  if (mConfigUi.getSubmitButton() != null) {
    enableSubmitIfAppropriate();
  }
}
