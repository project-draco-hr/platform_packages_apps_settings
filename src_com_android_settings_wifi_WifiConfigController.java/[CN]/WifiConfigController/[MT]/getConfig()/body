{
  if (mAccessPoint != null && mAccessPoint.networkId != INVALID_NETWORK_ID && !mEdit) {
    return null;
  }
  WifiConfiguration config=new WifiConfiguration();
  if (mAccessPoint == null) {
    config.SSID=AccessPoint.convertToQuotedString(mSsidView.getText().toString());
    config.hiddenSSID=true;
  }
 else   if (mAccessPoint.networkId == INVALID_NETWORK_ID) {
    config.SSID=AccessPoint.convertToQuotedString(mAccessPoint.ssid);
  }
 else {
    config.networkId=mAccessPoint.networkId;
  }
switch (mAccessPointSecurity) {
case AccessPoint.SECURITY_NONE:
    config.allowedKeyManagement.set(KeyMgmt.NONE);
  break;
case AccessPoint.SECURITY_WEP:
config.allowedKeyManagement.set(KeyMgmt.NONE);
config.allowedAuthAlgorithms.set(AuthAlgorithm.OPEN);
config.allowedAuthAlgorithms.set(AuthAlgorithm.SHARED);
if (mPasswordView.length() != 0) {
int length=mPasswordView.length();
String password=mPasswordView.getText().toString();
if ((length == 10 || length == 26 || length == 58) && password.matches("[0-9A-Fa-f]*")) {
config.wepKeys[0]=password;
}
 else {
config.wepKeys[0]='"' + password + '"';
}
}
break;
case AccessPoint.SECURITY_PSK:
config.allowedKeyManagement.set(KeyMgmt.WPA_PSK);
if (mPasswordView.length() != 0) {
String password=mPasswordView.getText().toString();
if (password.matches("[0-9A-Fa-f]{64}")) {
config.preSharedKey=password;
}
 else {
config.preSharedKey='"' + password + '"';
}
}
break;
case AccessPoint.SECURITY_EAP:
config.allowedKeyManagement.set(KeyMgmt.WPA_EAP);
config.allowedKeyManagement.set(KeyMgmt.IEEE8021X);
config.eap.setValue((String)mEapMethodSpinner.getSelectedItem());
config.phase2.setValue((mPhase2Spinner.getSelectedItemPosition() == 0) ? "" : PHASE2_PREFIX + mPhase2Spinner.getSelectedItem());
config.ca_cert.setValue((mEapCaCertSpinner.getSelectedItemPosition() == 0) ? "" : KEYSTORE_SPACE + Credentials.CA_CERTIFICATE + (String)mEapCaCertSpinner.getSelectedItem());
config.client_cert.setValue((mEapUserCertSpinner.getSelectedItemPosition() == 0) ? "" : KEYSTORE_SPACE + Credentials.USER_CERTIFICATE + (String)mEapUserCertSpinner.getSelectedItem());
final boolean isEmptyKeyId=(mEapUserCertSpinner.getSelectedItemPosition() == 0);
config.key_id.setValue(isEmptyKeyId ? "" : Credentials.USER_PRIVATE_KEY + (String)mEapUserCertSpinner.getSelectedItem());
config.engine.setValue(isEmptyKeyId ? WifiConfiguration.ENGINE_DISABLE : WifiConfiguration.ENGINE_ENABLE);
config.engine_id.setValue(isEmptyKeyId ? "" : WifiConfiguration.KEYSTORE_ENGINE_ID);
config.identity.setValue((mEapIdentityView.length() == 0) ? "" : mEapIdentityView.getText().toString());
config.anonymous_identity.setValue((mEapAnonymousView.length() == 0) ? "" : mEapAnonymousView.getText().toString());
if (mPasswordView.length() != 0) {
config.password.setValue(mPasswordView.getText().toString());
}
break;
default :
return null;
}
config.proxySettings=mProxySettings;
config.ipAssignment=mIpAssignment;
config.linkProperties=new LinkProperties(mLinkProperties);
return config;
}
