{
  if (mAccessPoint != null && mAccessPoint.networkId != INVALID_NETWORK_ID && !mEdit) {
    return null;
  }
  WifiConfiguration config=new WifiConfiguration();
  if (mAccessPoint == null) {
    config.SSID=AccessPoint.convertToQuotedString(mSsidView.getText().toString());
    config.hiddenSSID=true;
  }
 else   if (mAccessPoint.networkId == INVALID_NETWORK_ID) {
    config.SSID=AccessPoint.convertToQuotedString(mAccessPoint.ssid);
  }
 else {
    config.networkId=mAccessPoint.networkId;
  }
switch (mAccessPointSecurity) {
case AccessPoint.SECURITY_NONE:
    config.allowedKeyManagement.set(KeyMgmt.NONE);
  break;
case AccessPoint.SECURITY_WEP:
config.allowedKeyManagement.set(KeyMgmt.NONE);
config.allowedAuthAlgorithms.set(AuthAlgorithm.OPEN);
config.allowedAuthAlgorithms.set(AuthAlgorithm.SHARED);
if (mPasswordView.length() != 0) {
int length=mPasswordView.length();
String password=mPasswordView.getText().toString();
if ((length == 10 || length == 26 || length == 58) && password.matches("[0-9A-Fa-f]*")) {
config.wepKeys[0]=password;
}
 else {
config.wepKeys[0]='"' + password + '"';
}
}
break;
case AccessPoint.SECURITY_PSK:
config.allowedKeyManagement.set(KeyMgmt.WPA_PSK);
if (mPasswordView.length() != 0) {
String password=mPasswordView.getText().toString();
if (password.matches("[0-9A-Fa-f]{64}")) {
config.preSharedKey=password;
}
 else {
config.preSharedKey='"' + password + '"';
}
}
break;
case AccessPoint.SECURITY_EAP:
config.allowedKeyManagement.set(KeyMgmt.WPA_EAP);
config.allowedKeyManagement.set(KeyMgmt.IEEE8021X);
config.eap.setValue((String)mEapMethodSpinner.getSelectedItem());
config.phase2.setValue((mPhase2Spinner.getSelectedItemPosition() == 0) ? "" : "auth=" + mPhase2Spinner.getSelectedItem());
config.ca_cert.setValue((mEapCaCertSpinner.getSelectedItemPosition() == 0) ? "" : KEYSTORE_SPACE + Credentials.CA_CERTIFICATE + (String)mEapCaCertSpinner.getSelectedItem());
config.client_cert.setValue((mEapUserCertSpinner.getSelectedItemPosition() == 0) ? "" : KEYSTORE_SPACE + Credentials.USER_CERTIFICATE + (String)mEapUserCertSpinner.getSelectedItem());
config.private_key.setValue((mEapUserCertSpinner.getSelectedItemPosition() == 0) ? "" : KEYSTORE_SPACE + Credentials.USER_PRIVATE_KEY + (String)mEapUserCertSpinner.getSelectedItem());
config.identity.setValue((mEapIdentityView.length() == 0) ? "" : mEapIdentityView.getText().toString());
config.anonymous_identity.setValue((mEapAnonymousView.length() == 0) ? "" : mEapAnonymousView.getText().toString());
if (mPasswordView.length() != 0) {
config.password.setValue(mPasswordView.getText().toString());
}
break;
default :
return null;
}
config.ipAssignment=(mIpSettingsSpinner != null && mIpSettingsSpinner.getSelectedItemPosition() == STATIC_IP) ? IpAssignment.STATIC : IpAssignment.DHCP;
if (config.ipAssignment == IpAssignment.STATIC) {
LinkProperties linkProperties=new LinkProperties();
int result=validateIpConfigFields(linkProperties);
if (result == 0) {
config.linkProperties=linkProperties;
}
 else {
Toast.makeText(mConfigUi.getContext(),result,Toast.LENGTH_LONG).show();
config.ipAssignment=IpAssignment.UNASSIGNED;
}
}
config.proxySettings=(mProxySettingsSpinner != null && mProxySettingsSpinner.getSelectedItemPosition() == PROXY_STATIC) ? ProxySettings.STATIC : ProxySettings.NONE;
if (config.proxySettings == ProxySettings.STATIC) {
String host=mProxyHostView.getText().toString();
String portStr=mProxyPortView.getText().toString();
String exclusionList=mProxyExclusionListView.getText().toString();
int port=0;
int result=0;
try {
port=Integer.parseInt(portStr);
result=ProxySelector.validate(host,portStr,exclusionList);
}
 catch (NumberFormatException e) {
result=R.string.proxy_error_invalid_port;
}
if (result == 0) {
ProxyProperties proxyProperties=new ProxyProperties(host,port,exclusionList);
config.linkProperties.setHttpProxy(proxyProperties);
}
 else {
Toast.makeText(mConfigUi.getContext(),result,Toast.LENGTH_LONG).show();
config.proxySettings=ProxySettings.UNASSIGNED;
}
}
return config;
}
