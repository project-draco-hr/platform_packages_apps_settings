{
  if (mAccessPoint != null && mAccessPoint.networkId != INVALID_NETWORK_ID && !mEdit) {
    return null;
  }
  WifiConfiguration config=new WifiConfiguration();
  if (mAccessPoint == null) {
    config.SSID=AccessPoint.convertToQuotedString(mSsidView.getText().toString());
    config.hiddenSSID=true;
  }
 else   if (mAccessPoint.networkId == INVALID_NETWORK_ID) {
    config.SSID=AccessPoint.convertToQuotedString(mAccessPoint.ssid);
  }
 else {
    config.networkId=mAccessPoint.networkId;
  }
switch (mAccessPointSecurity) {
case AccessPoint.SECURITY_NONE:
    config.allowedKeyManagement.set(KeyMgmt.NONE);
  break;
case AccessPoint.SECURITY_WEP:
config.allowedKeyManagement.set(KeyMgmt.NONE);
config.allowedAuthAlgorithms.set(AuthAlgorithm.OPEN);
config.allowedAuthAlgorithms.set(AuthAlgorithm.SHARED);
if (mPasswordView.length() != 0) {
int length=mPasswordView.length();
String password=mPasswordView.getText().toString();
if ((length == 10 || length == 26 || length == 58) && password.matches("[0-9A-Fa-f]*")) {
config.wepKeys[0]=password;
}
 else {
config.wepKeys[0]='"' + password + '"';
}
}
break;
case AccessPoint.SECURITY_PSK:
config.allowedKeyManagement.set(KeyMgmt.WPA_PSK);
if (mPasswordView.length() != 0) {
String password=mPasswordView.getText().toString();
if (password.matches("[0-9A-Fa-f]{64}")) {
config.preSharedKey=password;
}
 else {
config.preSharedKey='"' + password + '"';
}
}
break;
case AccessPoint.SECURITY_EAP:
config.allowedKeyManagement.set(KeyMgmt.WPA_EAP);
config.allowedKeyManagement.set(KeyMgmt.IEEE8021X);
config.enterpriseConfig=new WifiEnterpriseConfig();
int eapMethod=mEapMethodSpinner.getSelectedItemPosition();
int phase2Method=mPhase2Spinner.getSelectedItemPosition();
config.enterpriseConfig.setEapMethod(eapMethod);
switch (eapMethod) {
case Eap.PEAP:
switch (phase2Method) {
case WIFI_PEAP_PHASE2_NONE:
config.enterpriseConfig.setPhase2Method(Phase2.NONE);
break;
case WIFI_PEAP_PHASE2_MSCHAPV2:
config.enterpriseConfig.setPhase2Method(Phase2.MSCHAPV2);
break;
case WIFI_PEAP_PHASE2_GTC:
config.enterpriseConfig.setPhase2Method(Phase2.GTC);
break;
default :
Log.e(TAG,"Unknown phase2 method" + phase2Method);
break;
}
break;
default :
config.enterpriseConfig.setPhase2Method(phase2Method);
break;
}
String caCert=(String)mEapCaCertSpinner.getSelectedItem();
if (caCert.equals(unspecifiedCert)) caCert="";
config.enterpriseConfig.setCaCertificate(caCert);
String clientCert=(String)mEapUserCertSpinner.getSelectedItem();
if (clientCert.equals(unspecifiedCert)) clientCert="";
config.enterpriseConfig.setClientCertificate(clientCert);
config.enterpriseConfig.setIdentity(mEapIdentityView.getText().toString());
config.enterpriseConfig.setAnonymousIdentity(mEapAnonymousView.getText().toString());
if (mPasswordView.isShown()) {
if (mPasswordView.length() > 0) {
config.enterpriseConfig.setPassword(mPasswordView.getText().toString());
}
}
 else {
config.enterpriseConfig.setPassword(mPasswordView.getText().toString());
}
break;
default :
return null;
}
config.proxySettings=mProxySettings;
config.ipAssignment=mIpAssignment;
config.linkProperties=new LinkProperties(mLinkProperties);
return config;
}
