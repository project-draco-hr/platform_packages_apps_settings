{
  mLinkProperties.clear();
  mIpAssignment=(mIpSettingsSpinner != null && mIpSettingsSpinner.getSelectedItemPosition() == STATIC_IP) ? IpAssignment.STATIC : IpAssignment.DHCP;
  if (mIpAssignment == IpAssignment.STATIC) {
    int result=validateIpConfigFields(mLinkProperties);
    if (result != 0) {
      return false;
    }
  }
  final int selectedPosition=mProxySettingsSpinner.getSelectedItemPosition();
  mProxySettings=ProxySettings.NONE;
  if (selectedPosition == PROXY_STATIC && mProxyHostView != null) {
    mProxySettings=ProxySettings.STATIC;
    String host=mProxyHostView.getText().toString();
    String portStr=mProxyPortView.getText().toString();
    String exclusionList=mProxyExclusionListView.getText().toString();
    int port=0;
    int result=0;
    try {
      port=Integer.parseInt(portStr);
      result=ProxySelector.validate(host,portStr,exclusionList);
    }
 catch (    NumberFormatException e) {
      result=R.string.proxy_error_invalid_port;
    }
    if (result == 0) {
      ProxyInfo proxyProperties=new ProxyInfo(host,port,exclusionList);
      mLinkProperties.setHttpProxy(proxyProperties);
    }
 else {
      return false;
    }
  }
 else   if (selectedPosition == PROXY_PAC && mProxyPacView != null) {
    mProxySettings=ProxySettings.PAC;
    CharSequence uriSequence=mProxyPacView.getText();
    if (TextUtils.isEmpty(uriSequence)) {
      return false;
    }
    Uri uri=Uri.parse(uriSequence.toString());
    if (uri == null) {
      return false;
    }
    ProxyInfo proxyInfo=new ProxyInfo(uri);
    mLinkProperties.setHttpProxy(proxyInfo);
  }
  return true;
}
