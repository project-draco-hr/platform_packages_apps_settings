{
  if (getActivity() == null)   return;
  if (isUiRestricted()) {
    addMessagePreference(R.string.wifi_empty_list_user_restricted);
    return;
  }
  final int wifiState=mWifiManager.getWifiState();
switch (wifiState) {
case WifiManager.WIFI_STATE_ENABLED:
    final Collection<AccessPoint> accessPoints=mWifiTracker.getAccessPoints();
  getPreferenceScreen().removeAll();
boolean hasAvailableAccessPoints=false;
int index=0;
for (AccessPoint accessPoint : accessPoints) {
if (accessPoint.getLevel() != -1) {
hasAvailableAccessPoints=true;
if (accessPoint.getTag() != null) {
  final Preference pref=(Preference)accessPoint.getTag();
  pref.setOrder(index++);
  getPreferenceScreen().addPreference(pref);
  continue;
}
AccessPointPreference preference=new AccessPointPreference(accessPoint,getActivity(),mUserBadgeCache,false);
preference.setOrder(index++);
if (mOpenSsid != null && mOpenSsid.equals(accessPoint.getSsidStr()) && !accessPoint.isSaved() && accessPoint.getSecurity() != AccessPoint.SECURITY_NONE) {
  onPreferenceTreeClick(getPreferenceScreen(),preference);
  mOpenSsid=null;
}
getPreferenceScreen().addPreference(preference);
accessPoint.setListener(this);
}
}
if (!hasAvailableAccessPoints) {
setProgressBarVisible(true);
addMessagePreference(R.string.wifi_empty_list_wifi_on);
}
 else {
setProgressBarVisible(false);
}
break;
case WifiManager.WIFI_STATE_ENABLING:
getPreferenceScreen().removeAll();
setProgressBarVisible(true);
break;
case WifiManager.WIFI_STATE_DISABLING:
addMessagePreference(R.string.wifi_stopping);
setProgressBarVisible(true);
break;
case WifiManager.WIFI_STATE_DISABLED:
setOffMessage();
setProgressBarVisible(false);
break;
}
if (savedNetworksExist != mWifiTracker.doSavedNetworksExist()) {
savedNetworksExist=!savedNetworksExist;
getActivity().invalidateOptionsMenu();
}
}
