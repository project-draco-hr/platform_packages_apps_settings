{
switch (dialogId) {
case WIFI_DIALOG_ID:
    AccessPoint ap=mDlgAccessPoint;
  if (ap == null) {
    if (mAccessPointSavedState != null) {
      ap=new AccessPoint(getActivity(),mAccessPointSavedState);
      mDlgAccessPoint=ap;
    }
  }
mSelectedAccessPoint=ap;
mDialog=new WifiDialog(getActivity(),this,ap,mDlgEdit);
return mDialog;
case WPS_PBC_DIALOG_ID:
return new WpsDialog(getActivity(),WpsInfo.PBC);
case WPS_PIN_DIALOG_ID:
return new WpsDialog(getActivity(),WpsInfo.DISPLAY);
case WIFI_SKIPPED_DIALOG_ID:
return new AlertDialog.Builder(getActivity()).setMessage(R.string.wifi_skipped_message).setCancelable(false).setNegativeButton(R.string.wifi_skip_anyway,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int id){
getActivity().setResult(RESULT_SKIP);
getActivity().finish();
}
}
).setPositiveButton(R.string.wifi_dont_skip,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int id){
}
}
).create();
case WIFI_AND_MOBILE_SKIPPED_DIALOG_ID:
return new AlertDialog.Builder(getActivity()).setMessage(R.string.wifi_and_mobile_skipped_message).setCancelable(false).setNegativeButton(R.string.wifi_skip_anyway,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int id){
getActivity().setResult(RESULT_SKIP);
getActivity().finish();
}
}
).setPositiveButton(R.string.wifi_dont_skip,new DialogInterface.OnClickListener(){
@Override public void onClick(DialogInterface dialog,int id){
}
}
).create();
}
return super.onCreateDialog(dialogId);
}
