{
  super(context);
  mContext=context;
  mWpsSetup=wpsSetup;
class WpsListener implements WifiManager.WpsListener {
    public void onStartSuccess(    String pin){
      if (pin != null) {
        updateDialog(DialogState.WPS_START,String.format(mContext.getString(R.string.wifi_wps_onstart_pin),pin));
      }
 else {
        updateDialog(DialogState.WPS_START,mContext.getString(R.string.wifi_wps_onstart_pbc));
      }
    }
    public void onCompletion(){
      updateDialog(DialogState.WPS_COMPLETE,mContext.getString(R.string.wifi_wps_complete));
    }
    public void onFailure(    int reason){
      String msg;
switch (reason) {
case WifiManager.WPS_OVERLAP_ERROR:
        msg=mContext.getString(R.string.wifi_wps_failed_overlap);
      break;
case WifiManager.WPS_WEP_PROHIBITED:
    msg=mContext.getString(R.string.wifi_wps_failed_wep);
  break;
case WifiManager.WPS_TKIP_ONLY_PROHIBITED:
msg=mContext.getString(R.string.wifi_wps_failed_tkip);
break;
case WifiManager.IN_PROGRESS:
msg=mContext.getString(R.string.wifi_wps_in_progress);
break;
default :
msg=mContext.getString(R.string.wifi_wps_failed_generic);
break;
}
updateDialog(DialogState.WPS_FAILED,msg);
}
}
mWpsListener=new WpsListener();
mFilter=new IntentFilter();
mFilter.addAction(WifiManager.NETWORK_STATE_CHANGED_ACTION);
mReceiver=new BroadcastReceiver(){
@Override public void onReceive(Context context,Intent intent){
handleEvent(context,intent);
}
}
;
setCanceledOnTouchOutside(false);
}
