{
  extractCertificate(certFile,password);
  int flags=KeyStore.FLAG_ENCRYPTED;
  try {
    if (mUserKey != null) {
      Log.v(TAG,"has private key");
      String key=Credentials.USER_PRIVATE_KEY + profile.ipsecUserCert;
      byte[] value=mUserKey.getEncoded();
      if (!mKeyStore.importKey(key,value,mUid,flags)) {
        Log.e(TAG,"Failed to install " + key + " as user "+ mUid);
        return;
      }
      Log.v(TAG,"install " + key + " as user "+ mUid+ " is successful");
    }
    if (mUserCert != null) {
      String certName=Credentials.USER_CERTIFICATE + profile.ipsecUserCert;
      byte[] certData=Credentials.convertToPem(mUserCert);
      if (!mKeyStore.put(certName,certData,mUid,flags)) {
        Log.e(TAG,"Failed to install " + certName + " as user "+ mUid);
        return;
      }
      Log.v(TAG,"install " + certName + " as user"+ mUid+ " is successful.");
    }
    if (!mCaCerts.isEmpty()) {
      String caListName=Credentials.CA_CERTIFICATE + profile.ipsecCaCert;
      X509Certificate[] caCerts=mCaCerts.toArray(new X509Certificate[mCaCerts.size()]);
      byte[] caListData=Credentials.convertToPem(caCerts);
      if (!mKeyStore.put(caListName,caListData,mUid,flags)) {
        Log.e(TAG,"Failed to install " + caListName + " as user "+ mUid);
        return;
      }
      Log.v(TAG," install " + caListName + " as user "+ mUid+ " is successful");
    }
  }
 catch (  CertificateEncodingException e) {
    Log.e(TAG,"Exception while convert certificates to pem " + e);
    throw new AssertionError(e);
  }
catch (  IOException e) {
    Log.e(TAG,"IOException while convert to pem: " + e);
  }
}
